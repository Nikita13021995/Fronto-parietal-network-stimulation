<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2020.2.3">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="comma" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': '', 'session': '001'}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="[]" valType="fileList"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="True" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1920, 1080]" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[0,0,0]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="Ospan5_4 _ время работает" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="ThankYouScreen">
      <PolygonComponent name="Back">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Back" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="polygon_2">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="black" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="polygon_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="cross" valType="str"/>
        <Param name="size" updates="constant" val="(0.25, 0.25)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
    </Routine>
    <Routine name="Blank100">
      <PolygonComponent name="WhiteBCK_ISI">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="WhiteBCK_ISI" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5, 5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.1" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="text">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.1" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="Remember_6c">
      <PolygonComponent name="Bc_21">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bc_21" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="In_21">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="In_21" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Dis21">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Dis21" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ex_21">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ex_21" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_50">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Dis21.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Dis21.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Dis21.text = Dis21.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Dis21.text = Dis21.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Dis21.text = Dis21.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Dis21.text = Dis21.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Dis21.text = Dis21.text[:-1]&amp;#10;            Dis21.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Dis21.text = Dis21.text[:-1]&amp;#10;            Dis21.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Dis21.text = Dis21.text[:-1]&amp;#10;            Dis21.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Dis21.text = Dis21.text[:-1]&amp;#10;            Dis21.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Dis21.text = Dis21.text[:-1]&amp;#10;            Dis21.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Dis21.text = Dis21.text[:-1]&amp;#10;            Dis21.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Dis21.text = Dis21.text[:-1]&amp;#10;            Dis21.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Dis21.text = Dis21.text[:-1]&amp;#10;            Dis21.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Dis21.text = Dis21.text[:-1]&amp;#10;            Dis21.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Dis21.text = Dis21.text[:-1]&amp;#10;            Dis21.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Dis21.text = Dis21.text[:-1]&amp;#10;            Dis21.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Dis21.text = Dis21.text[:-1]&amp;#10;            Dis21.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Dis21.text = Dis21.text[:-1]&amp;#10;            Dis21.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Dis21.text = Dis21.text[:-5]&amp;#10;            Dis21.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Dis21.text = Dis21.text[:-9]&amp;#10;            Dis21.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Dis21.text = Dis21.text[:-1]&amp;#10;            Dis21.text+= ('Ц')&amp;#10;    elif 'x' in keys:&amp;#10;            Dis21.text = Dis21.text[:-1]&amp;#10;            Dis21.text+= (u'Ч')&amp;#10;    elif 'i' in keys:&amp;#10;            Dis21.text = Dis21.text[:-1]&amp;#10;            Dis21.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Dis21.text = Dis21.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Dis21.text = (Dis21.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Dis21.text = Dis21.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Dis21.text = (Dis21.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Dis21.text = (Dis21.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Dis21.text = Dis21.text.slice(0, (- 1));&amp;#10;        Dis21.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Dis21.text = Dis21.text.slice(0, (- 1));&amp;#10;            Dis21.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Dis21.text = Dis21.text.slice(0, (- 1));&amp;#10;                Dis21.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Dis21.text = Dis21.text.slice(0, (- 1));&amp;#10;                    Dis21.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Dis21.text = Dis21.text.slice(0, (- 1));&amp;#10;                        Dis21.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Dis21.text = Dis21.text.slice(0, (- 1));&amp;#10;                            Dis21.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Dis21.text = Dis21.text.slice(0, (- 1));&amp;#10;                                Dis21.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Dis21.text = Dis21.text.slice(0, (- 1));&amp;#10;                                    Dis21.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Dis21.text = Dis21.text.slice(0, (- 1));&amp;#10;                                        Dis21.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Dis21.text = Dis21.text.slice(0, (- 1));&amp;#10;                                            Dis21.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Dis21.text = Dis21.text.slice(0, (- 1));&amp;#10;                                                Dis21.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Dis21.text = Dis21.text.slice(0, (- 1));&amp;#10;                                                    Dis21.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Dis21.text = Dis21.text.slice(0, (- 1));&amp;#10;                                                        Dis21.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Dis21.text = Dis21.text.slice(0, (- 5));&amp;#10;                                                            Dis21.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Dis21.text = Dis21.text.slice(0, (- 9));&amp;#10;                                                                Dis21.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Dis21.text = Dis21.text.slice(0, (- 1));&amp;#10;                                                                    Dis21.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;x&quot;, keys)) {&amp;#10;                                                                        Dis21.text = Dis21.text.slice(0, (- 1));&amp;#10;                                                                        Dis21.text += &quot;\u0427&quot;;&amp;#10;                                                                    } else {&amp;#10;                                                                        if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                            Dis21.text = Dis21.text.slice(0, (- 1));&amp;#10;                                                                            Dis21.text += &quot;\u0428&quot;;&amp;#10;                                                                        }&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Dis21.text);&amp;#10;Remember_21.addData(&quot;Answer of Pax&quot;, Dis21.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Dis21.text)&amp;#10;Remember_21.addData('Answer of Pax', Dis21.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_50" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Ospan_6c">
      <PolygonComponent name="Bck_21">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bck_21" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Stim_21">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Stim_21" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$S21" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ext_21">
        <Param name="allowedKeys" updates="constant" val="'1','0'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ext_21" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Remember_6b">
      <PolygonComponent name="Bc_20">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bc_20" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="In_20">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="In_20" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Dis20">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Dis20" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ex_20">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ex_20" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_49">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Dis20.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Dis20.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Dis20.text = Dis20.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Dis20.text = Dis20.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Dis20.text = Dis20.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Dis20.text = Dis20.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Dis20.text = Dis20.text[:-1]&amp;#10;            Dis20.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Dis20.text = Dis20.text[:-1]&amp;#10;            Dis20.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Dis20.text = Dis20.text[:-1]&amp;#10;            Dis20.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Dis20.text = Dis20.text[:-1]&amp;#10;            Dis20.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Dis20.text = Dis20.text[:-1]&amp;#10;            Dis20.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Dis20.text = Dis20.text[:-1]&amp;#10;            Dis20.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Dis20.text = Dis20.text[:-1]&amp;#10;            Dis20.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Dis20.text = Dis20.text[:-1]&amp;#10;            Dis20.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Dis20.text = Dis20.text[:-1]&amp;#10;            Dis20.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Dis20.text = Dis20.text[:-1]&amp;#10;            Dis20.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Dis20.text = Dis20.text[:-1]&amp;#10;            Dis20.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Dis20.text = Dis20.text[:-1]&amp;#10;            Dis20.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Dis20.text = Dis20.text[:-1]&amp;#10;            Dis20.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Dis20.text = Dis20.text[:-5]&amp;#10;            Dis20.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Dis20.text = Dis20.text[:-9]&amp;#10;            Dis20.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Dis20.text = Dis20.text[:-1]&amp;#10;            Dis20.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Dis20.text = Dis20.text[:-1]&amp;#10;            Dis20.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Dis20.text = Dis20.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Dis20.text = (Dis20.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Dis20.text = Dis20.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Dis20.text = (Dis20.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Dis20.text = (Dis20.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Dis20.text = Dis20.text.slice(0, (- 1));&amp;#10;        Dis20.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Dis20.text = Dis20.text.slice(0, (- 1));&amp;#10;            Dis20.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Dis20.text = Dis20.text.slice(0, (- 1));&amp;#10;                Dis20.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Dis20.text = Dis20.text.slice(0, (- 1));&amp;#10;                    Dis20.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Dis20.text = Dis20.text.slice(0, (- 1));&amp;#10;                        Dis20.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Dis20.text = Dis20.text.slice(0, (- 1));&amp;#10;                            Dis20.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Dis20.text = Dis20.text.slice(0, (- 1));&amp;#10;                                Dis20.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Dis20.text = Dis20.text.slice(0, (- 1));&amp;#10;                                    Dis20.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Dis20.text = Dis20.text.slice(0, (- 1));&amp;#10;                                        Dis20.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Dis20.text = Dis20.text.slice(0, (- 1));&amp;#10;                                            Dis20.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Dis20.text = Dis20.text.slice(0, (- 1));&amp;#10;                                                Dis20.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Dis20.text = Dis20.text.slice(0, (- 1));&amp;#10;                                                    Dis20.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Dis20.text = Dis20.text.slice(0, (- 1));&amp;#10;                                                        Dis20.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Dis20.text = Dis20.text.slice(0, (- 5));&amp;#10;                                                            Dis20.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Dis20.text = Dis20.text.slice(0, (- 9));&amp;#10;                                                                Dis20.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Dis20.text = Dis20.text.slice(0, (- 1));&amp;#10;                                                                    Dis20.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                        Dis20.text = Dis20.text.slice(0, (- 1));&amp;#10;                                                                        Dis20.text += &quot;\u0428&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Dis20.text);&amp;#10;Remember_20.addData(&quot;Answer of Pax&quot;, Dis20.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Dis20.text)&amp;#10;Remember_20.addData('Answer of Pax', Dis20.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_49" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Ospan_6b">
      <PolygonComponent name="Bck_20">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bck_20" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Stim_20">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Stim_20" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$S20" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ext_20">
        <Param name="allowedKeys" updates="constant" val="'1','0'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ext_20" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Remember_3c">
      <PolygonComponent name="Bc_19">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bc_19" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="In_19">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="In_19" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Dis19">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Dis19" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ex_19">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ex_19" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_48">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Dis19.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Dis19.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Dis19.text = Dis19.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Dis19.text = Dis19.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Dis19.text = Dis19.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Dis19.text = Dis19.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Dis19.text = Dis19.text[:-1]&amp;#10;            Dis19.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Dis19.text = Dis19.text[:-1]&amp;#10;            Dis19.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Dis19.text = Dis19.text[:-1]&amp;#10;            Dis19.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Dis19.text = Dis19.text[:-1]&amp;#10;            Dis19.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Dis19.text = Dis19.text[:-1]&amp;#10;            Dis19.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Dis19.text = Dis19.text[:-1]&amp;#10;            Dis19.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Dis19.text = Dis19.text[:-1]&amp;#10;            Dis19.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Dis19.text = Dis19.text[:-1]&amp;#10;            Dis19.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Dis19.text = Dis19.text[:-1]&amp;#10;            Dis19.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Dis19.text = Dis19.text[:-1]&amp;#10;            Dis19.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Dis19.text = Dis19.text[:-1]&amp;#10;            Dis19.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Dis19.text = Dis19.text[:-1]&amp;#10;            Dis19.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Dis19.text = Dis19.text[:-1]&amp;#10;            Dis19.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Dis19.text = Dis19.text[:-5]&amp;#10;            Dis19.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Dis19.text = Dis19.text[:-9]&amp;#10;            Dis19.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Dis19.text = Dis19.text[:-1]&amp;#10;            Dis19.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Dis19.text = Dis19.text[:-1]&amp;#10;            Dis19.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Dis19.text = Dis19.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Dis19.text = (Dis19.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Dis19.text = Dis19.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Dis19.text = (Dis19.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Dis19.text = (Dis19.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Dis19.text = Dis19.text.slice(0, (- 1));&amp;#10;        Dis19.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Dis19.text = Dis19.text.slice(0, (- 1));&amp;#10;            Dis19.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Dis19.text = Dis19.text.slice(0, (- 1));&amp;#10;                Dis19.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Dis19.text = Dis19.text.slice(0, (- 1));&amp;#10;                    Dis19.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Dis19.text = Dis19.text.slice(0, (- 1));&amp;#10;                        Dis19.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Dis19.text = Dis19.text.slice(0, (- 1));&amp;#10;                            Dis19.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Dis19.text = Dis19.text.slice(0, (- 1));&amp;#10;                                Dis19.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Dis19.text = Dis19.text.slice(0, (- 1));&amp;#10;                                    Dis19.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Dis19.text = Dis19.text.slice(0, (- 1));&amp;#10;                                        Dis19.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Dis19.text = Dis19.text.slice(0, (- 1));&amp;#10;                                            Dis19.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Dis19.text = Dis19.text.slice(0, (- 1));&amp;#10;                                                Dis19.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Dis19.text = Dis19.text.slice(0, (- 1));&amp;#10;                                                    Dis19.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Dis19.text = Dis19.text.slice(0, (- 1));&amp;#10;                                                        Dis19.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Dis19.text = Dis19.text.slice(0, (- 5));&amp;#10;                                                            Dis19.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Dis19.text = Dis19.text.slice(0, (- 9));&amp;#10;                                                                Dis19.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Dis19.text = Dis19.text.slice(0, (- 1));&amp;#10;                                                                    Dis19.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                        Dis19.text = Dis19.text.slice(0, (- 1));&amp;#10;                                                                        Dis19.text += &quot;\u0428&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Dis19.text);&amp;#10;Remember_19.addData(&quot;Answer of Pax&quot;, Dis19.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Dis19.text)&amp;#10;Remember_19.addData('Answer of Pax', Dis19.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_48" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Ospan_3c">
      <PolygonComponent name="Bck_19">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bck_19" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Stim_19">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Stim_19" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$S19" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ext_19">
        <Param name="allowedKeys" updates="constant" val="'1','0'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ext_19" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Remember_5c">
      <PolygonComponent name="Bc_18">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bc_18" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="In_18">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="In_18" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Dis18">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Dis18" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ex_18">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ex_18" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_47">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Dis18.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Dis18.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Dis18.text = Dis18.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Dis18.text = Dis18.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Dis18.text = Dis18.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Dis18.text = Dis18.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Dis18.text = Dis18.text[:-1]&amp;#10;            Dis18.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Dis18.text = Dis18.text[:-1]&amp;#10;            Dis18.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Dis18.text = Dis18.text[:-1]&amp;#10;            Dis18.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Dis18.text = Dis18.text[:-1]&amp;#10;            Dis18.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Dis18.text = Dis18.text[:-1]&amp;#10;            Dis18.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Dis18.text = Dis18.text[:-1]&amp;#10;            Dis18.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Dis18.text = Dis18.text[:-1]&amp;#10;            Dis18.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Dis18.text = Dis18.text[:-1]&amp;#10;            Dis18.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Dis18.text = Dis18.text[:-1]&amp;#10;            Dis18.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Dis18.text = Dis18.text[:-1]&amp;#10;            Dis18.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Dis18.text = Dis18.text[:-1]&amp;#10;            Dis18.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Dis18.text = Dis18.text[:-1]&amp;#10;            Dis18.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Dis18.text = Dis18.text[:-1]&amp;#10;            Dis18.text+= (u'Ф')&amp;#10;    elif 'x' in keys:&amp;#10;            Dis18.text = Dis18.text[:-1]&amp;#10;            Dis18.text+= (u'Ч')&amp;#10;    elif 'comma' in keys:&amp;#10;            Dis18.text = Dis18.text[:-5]&amp;#10;            Dis18.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Dis18.text = Dis18.text[:-9]&amp;#10;            Dis18.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Dis18.text = Dis18.text[:-1]&amp;#10;            Dis18.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Dis18.text = Dis18.text[:-1]&amp;#10;            Dis18.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Dis18.text = Dis18.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Dis18.text = (Dis18.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Dis18.text = Dis18.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Dis18.text = (Dis18.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Dis18.text = (Dis18.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Dis18.text = Dis18.text.slice(0, (- 1));&amp;#10;        Dis18.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Dis18.text = Dis18.text.slice(0, (- 1));&amp;#10;            Dis18.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Dis18.text = Dis18.text.slice(0, (- 1));&amp;#10;                Dis18.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Dis18.text = Dis18.text.slice(0, (- 1));&amp;#10;                    Dis18.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Dis18.text = Dis18.text.slice(0, (- 1));&amp;#10;                        Dis18.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Dis18.text = Dis18.text.slice(0, (- 1));&amp;#10;                            Dis18.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Dis18.text = Dis18.text.slice(0, (- 1));&amp;#10;                                Dis18.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Dis18.text = Dis18.text.slice(0, (- 1));&amp;#10;                                    Dis18.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Dis18.text = Dis18.text.slice(0, (- 1));&amp;#10;                                        Dis18.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Dis18.text = Dis18.text.slice(0, (- 1));&amp;#10;                                            Dis18.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Dis18.text = Dis18.text.slice(0, (- 1));&amp;#10;                                                Dis18.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Dis18.text = Dis18.text.slice(0, (- 1));&amp;#10;                                                    Dis18.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Dis18.text = Dis18.text.slice(0, (- 1));&amp;#10;                                                        Dis18.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;x&quot;, keys)) {&amp;#10;                                                            Dis18.text = Dis18.text.slice(0, (- 1));&amp;#10;                                                            Dis18.text += &quot;\u0427&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                                Dis18.text = Dis18.text.slice(0, (- 5));&amp;#10;                                                                Dis18.text += &quot;\u0411&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                    Dis18.text = Dis18.text.slice(0, (- 9));&amp;#10;                                                                    Dis18.text += &quot;\u0416&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                        Dis18.text = Dis18.text.slice(0, (- 1));&amp;#10;                                                                        Dis18.text += &quot;\u0426&quot;;&amp;#10;                                                                    } else {&amp;#10;                                                                        if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                            Dis18.text = Dis18.text.slice(0, (- 1));&amp;#10;                                                                            Dis18.text += &quot;\u0428&quot;;&amp;#10;                                                                        }&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Dis18.text);&amp;#10;Remember_18.addData(&quot;Answer of Pax&quot;, Dis18.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Dis18.text)&amp;#10;Remember_18.addData('Answer of Pax', Dis18.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_47" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Ospan_5c">
      <PolygonComponent name="Bck_18">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bck_18" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Stim_18">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Stim_18" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$S18" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ext_18">
        <Param name="allowedKeys" updates="constant" val="'1','0'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ext_18" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Remember_8c">
      <PolygonComponent name="Bc_17">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bc_17" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="In_17">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="In_17" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Dis17">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Dis17" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ex_17">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ex_17" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_46">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Dis17.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Dis17.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Dis17.text = Dis17.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Dis17.text = Dis17.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Dis17.text = Dis17.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Dis17.text = Dis17.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Dis17.text = Dis17.text[:-1]&amp;#10;            Dis17.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Dis17.text = Dis17.text[:-1]&amp;#10;            Dis17.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Dis17.text = Dis17.text[:-1]&amp;#10;            Dis17.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Dis17.text = Dis17.text[:-1]&amp;#10;            Dis17.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Dis17.text = Dis17.text[:-1]&amp;#10;            Dis17.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Dis17.text = Dis17.text[:-1]&amp;#10;            Dis17.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Dis17.text = Dis17.text[:-1]&amp;#10;            Dis17.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Dis17.text = Dis17.text[:-1]&amp;#10;            Dis17.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Dis17.text = Dis17.text[:-1]&amp;#10;            Dis17.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Dis17.text = Dis17.text[:-1]&amp;#10;            Dis17.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Dis17.text = Dis17.text[:-1]&amp;#10;            Dis17.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Dis17.text = Dis17.text[:-1]&amp;#10;            Dis17.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Dis17.text = Dis17.text[:-1]&amp;#10;            Dis17.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Dis17.text = Dis17.text[:-5]&amp;#10;            Dis17.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Dis17.text = Dis17.text[:-9]&amp;#10;            Dis17.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Dis17.text = Dis17.text[:-1]&amp;#10;            Dis17.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Dis17.text = Dis17.text[:-1]&amp;#10;            Dis17.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Dis17.text = Dis17.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Dis17.text = (Dis17.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Dis17.text = Dis17.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Dis17.text = (Dis17.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Dis17.text = (Dis17.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Dis17.text = Dis17.text.slice(0, (- 1));&amp;#10;        Dis17.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Dis17.text = Dis17.text.slice(0, (- 1));&amp;#10;            Dis17.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Dis17.text = Dis17.text.slice(0, (- 1));&amp;#10;                Dis17.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Dis17.text = Dis17.text.slice(0, (- 1));&amp;#10;                    Dis17.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Dis17.text = Dis17.text.slice(0, (- 1));&amp;#10;                        Dis17.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Dis17.text = Dis17.text.slice(0, (- 1));&amp;#10;                            Dis17.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Dis17.text = Dis17.text.slice(0, (- 1));&amp;#10;                                Dis17.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Dis17.text = Dis17.text.slice(0, (- 1));&amp;#10;                                    Dis17.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Dis17.text = Dis17.text.slice(0, (- 1));&amp;#10;                                        Dis17.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Dis17.text = Dis17.text.slice(0, (- 1));&amp;#10;                                            Dis17.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Dis17.text = Dis17.text.slice(0, (- 1));&amp;#10;                                                Dis17.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Dis17.text = Dis17.text.slice(0, (- 1));&amp;#10;                                                    Dis17.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Dis17.text = Dis17.text.slice(0, (- 1));&amp;#10;                                                        Dis17.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Dis17.text = Dis17.text.slice(0, (- 5));&amp;#10;                                                            Dis17.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Dis17.text = Dis17.text.slice(0, (- 9));&amp;#10;                                                                Dis17.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Dis17.text = Dis17.text.slice(0, (- 1));&amp;#10;                                                                    Dis17.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                        Dis17.text = Dis17.text.slice(0, (- 1));&amp;#10;                                                                        Dis17.text += &quot;\u0428&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Dis17.text);&amp;#10;Remember_17.addData(&quot;Answer of Pax&quot;, Dis17.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Dis17.text)&amp;#10;Remember_17.addData('Answer of Pax', Dis17.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_46" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Ospan_8c">
      <PolygonComponent name="Bck_17">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bck_17" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Stim_17">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Stim_17" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$S17" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ext_17">
        <Param name="allowedKeys" updates="constant" val="'1','0'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ext_17" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Just_in_case_block"/>
    <Routine name="Remember_7c">
      <PolygonComponent name="Bc_16">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bc_16" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="In_16">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="In_16" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Dis16">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Dis16" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ex_16">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ex_16" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_45">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Dis16.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Dis16.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Dis16.text = Dis16.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Dis16.text = Dis16.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Dis16.text = Dis16.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Dis16.text = Dis16.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Dis16.text = Dis16.text[:-1]&amp;#10;            Dis16.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Dis16.text = Dis16.text[:-1]&amp;#10;            Dis16.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Dis16.text = Dis16.text[:-1]&amp;#10;            Dis16.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Dis16.text = Dis16.text[:-1]&amp;#10;            Dis16.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Dis16.text = Dis16.text[:-1]&amp;#10;            Dis16.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Dis16.text = Dis16.text[:-1]&amp;#10;            Dis16.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Dis16.text = Dis16.text[:-1]&amp;#10;            Dis16.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Dis16.text = Dis16.text[:-1]&amp;#10;            Dis16.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Dis16.text = Dis16.text[:-1]&amp;#10;            Dis16.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Dis16.text = Dis16.text[:-1]&amp;#10;            Dis16.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Dis16.text = Dis16.text[:-1]&amp;#10;            Dis16.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Dis16.text = Dis16.text[:-1]&amp;#10;            Dis16.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Dis16.text = Dis16.text[:-1]&amp;#10;            Dis16.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Dis16.text = Dis16.text[:-5]&amp;#10;            Dis16.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Dis16.text = Dis16.text[:-9]&amp;#10;            Dis16.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Dis16.text = Dis16.text[:-1]&amp;#10;            Dis16.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Dis16.text = Dis16.text[:-1]&amp;#10;            Dis16.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Dis16.text = Dis16.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Dis16.text = (Dis16.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Dis16.text = Dis16.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Dis16.text = (Dis16.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Dis16.text = (Dis16.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Dis16.text = Dis16.text.slice(0, (- 1));&amp;#10;        Dis16.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Dis16.text = Dis16.text.slice(0, (- 1));&amp;#10;            Dis16.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Dis16.text = Dis16.text.slice(0, (- 1));&amp;#10;                Dis16.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Dis16.text = Dis16.text.slice(0, (- 1));&amp;#10;                    Dis16.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Dis16.text = Dis16.text.slice(0, (- 1));&amp;#10;                        Dis16.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Dis16.text = Dis16.text.slice(0, (- 1));&amp;#10;                            Dis16.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Dis16.text = Dis16.text.slice(0, (- 1));&amp;#10;                                Dis16.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Dis16.text = Dis16.text.slice(0, (- 1));&amp;#10;                                    Dis16.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Dis16.text = Dis16.text.slice(0, (- 1));&amp;#10;                                        Dis16.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Dis16.text = Dis16.text.slice(0, (- 1));&amp;#10;                                            Dis16.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Dis16.text = Dis16.text.slice(0, (- 1));&amp;#10;                                                Dis16.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Dis16.text = Dis16.text.slice(0, (- 1));&amp;#10;                                                    Dis16.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Dis16.text = Dis16.text.slice(0, (- 1));&amp;#10;                                                        Dis16.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Dis16.text = Dis16.text.slice(0, (- 5));&amp;#10;                                                            Dis16.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Dis16.text = Dis16.text.slice(0, (- 9));&amp;#10;                                                                Dis16.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Dis16.text = Dis16.text.slice(0, (- 1));&amp;#10;                                                                    Dis16.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                        Dis16.text = Dis16.text.slice(0, (- 1));&amp;#10;                                                                        Dis16.text += &quot;\u0428&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Dis16.text);&amp;#10;Remember_16.addData(&quot;Answer of Pax&quot;, Dis16.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Dis16.text)&amp;#10;Remember_16.addData('Answer of Pax', Dis16.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_45" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Ospan_7c">
      <PolygonComponent name="Bck_16">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bck_16" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Stim_16">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Stim_16" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$S16" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ext_16">
        <Param name="allowedKeys" updates="constant" val="'1','0'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ext_16" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Remember_2c">
      <PolygonComponent name="Bc_15">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bc_15" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="In_15">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="In_15" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Dis15">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Dis15" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ex_15">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ex_15" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_44">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Dis15.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Dis15.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Dis15.text = Dis15.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Dis15.text = Dis15.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Dis15.text = Dis15.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Dis15.text = Dis15.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Dis15.text = Dis15.text[:-1]&amp;#10;            Dis15.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Dis15.text = Dis15.text[:-1]&amp;#10;            Dis15.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Dis15.text = Dis15.text[:-1]&amp;#10;            Dis15.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Dis15.text = Dis15.text[:-1]&amp;#10;            Dis15.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Dis15.text = Dis15.text[:-1]&amp;#10;            Dis15.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Dis15.text = Dis15.text[:-1]&amp;#10;            Dis15.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Dis15.text = Dis15.text[:-1]&amp;#10;            Dis15.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Dis15.text = Dis15.text[:-1]&amp;#10;            Dis15.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Dis15.text = Dis15.text[:-1]&amp;#10;            Dis15.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Dis15.text = Dis15.text[:-1]&amp;#10;            Dis15.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Dis15.text = Dis15.text[:-1]&amp;#10;            Dis15.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Dis15.text = Dis15.text[:-1]&amp;#10;            Dis15.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Dis15.text = Dis15.text[:-1]&amp;#10;            Dis15.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Dis15.text = Dis15.text[:-5]&amp;#10;            Dis15.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Dis15.text = Dis15.text[:-9]&amp;#10;            Dis15.text+= ('Ж')&amp;#10;    elif 'x' in keys:&amp;#10;            Dis15.text = Dis15.text[:-1]&amp;#10;            Dis15.text+= (u'Ч')&amp;#10;    elif 'w' in keys:&amp;#10;            Dis15.text = Dis15.text[:-1]&amp;#10;            Dis15.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Dis15.text = Dis15.text[:-1]&amp;#10;            Dis15.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Dis15.text = Dis15.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Dis15.text = (Dis15.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Dis15.text = Dis15.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Dis15.text = (Dis15.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Dis15.text = (Dis15.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Dis15.text = Dis15.text.slice(0, (- 1));&amp;#10;        Dis15.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Dis15.text = Dis15.text.slice(0, (- 1));&amp;#10;            Dis15.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Dis15.text = Dis15.text.slice(0, (- 1));&amp;#10;                Dis15.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Dis15.text = Dis15.text.slice(0, (- 1));&amp;#10;                    Dis15.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Dis15.text = Dis15.text.slice(0, (- 1));&amp;#10;                        Dis15.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Dis15.text = Dis15.text.slice(0, (- 1));&amp;#10;                            Dis15.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Dis15.text = Dis15.text.slice(0, (- 1));&amp;#10;                                Dis15.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Dis15.text = Dis15.text.slice(0, (- 1));&amp;#10;                                    Dis15.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Dis15.text = Dis15.text.slice(0, (- 1));&amp;#10;                                        Dis15.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Dis15.text = Dis15.text.slice(0, (- 1));&amp;#10;                                            Dis15.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Dis15.text = Dis15.text.slice(0, (- 1));&amp;#10;                                                Dis15.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Dis15.text = Dis15.text.slice(0, (- 1));&amp;#10;                                                    Dis15.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Dis15.text = Dis15.text.slice(0, (- 1));&amp;#10;                                                        Dis15.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Dis15.text = Dis15.text.slice(0, (- 5));&amp;#10;                                                            Dis15.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Dis15.text = Dis15.text.slice(0, (- 9));&amp;#10;                                                                Dis15.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;x&quot;, keys)) {&amp;#10;                                                                    Dis15.text = Dis15.text.slice(0, (- 1));&amp;#10;                                                                    Dis15.text += &quot;\u0427&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                        Dis15.text = Dis15.text.slice(0, (- 1));&amp;#10;                                                                        Dis15.text += &quot;\u0426&quot;;&amp;#10;                                                                    } else {&amp;#10;                                                                        if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                            Dis15.text = Dis15.text.slice(0, (- 1));&amp;#10;                                                                            Dis15.text += &quot;\u0428&quot;;&amp;#10;                                                                        }&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Dis15.text);&amp;#10;Remember_15.addData(&quot;Answer of Pax&quot;, Dis15.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Dis15.text)&amp;#10;Remember_15.addData('Answer of Pax', Dis15.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_44" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Ospan_2c">
      <PolygonComponent name="Bck_15">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bck_15" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Stim_15">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Stim_15" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$S15" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ext_15">
        <Param name="allowedKeys" updates="constant" val="'1','0'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ext_15" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Remember_4c">
      <PolygonComponent name="Bc_14">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bc_14" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="In_14">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="In_14" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Dis14">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Dis14" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ex_14">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ex_14" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_43">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Dis14.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Dis14.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Dis14.text = Dis14.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Dis14.text = Dis14.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Dis14.text = Dis14.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Dis14.text = Dis14.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Dis14.text = Dis14.text[:-1]&amp;#10;            Dis14.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Dis14.text = Dis14.text[:-1]&amp;#10;            Dis14.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Dis14.text = Dis14.text[:-1]&amp;#10;            Dis14.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Dis14.text = Dis14.text[:-1]&amp;#10;            Dis14.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Dis14.text = Dis14.text[:-1]&amp;#10;            Dis14.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Dis14.text = Dis14.text[:-1]&amp;#10;            Dis14.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Dis14.text = Dis14.text[:-1]&amp;#10;            Dis14.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Dis14.text = Dis14.text[:-1]&amp;#10;            Dis14.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Dis14.text = Dis14.text[:-1]&amp;#10;            Dis14.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Dis14.text = Dis14.text[:-1]&amp;#10;            Dis14.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Dis14.text = Dis14.text[:-1]&amp;#10;            Dis14.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Dis14.text = Dis14.text[:-1]&amp;#10;            Dis14.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Dis14.text = Dis14.text[:-1]&amp;#10;            Dis14.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Dis14.text = Dis14.text[:-5]&amp;#10;            Dis14.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Dis14.text = Dis14.text[:-9]&amp;#10;            Dis14.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Dis14.text = Dis14.text[:-1]&amp;#10;            Dis14.text+= ('Ц')&amp;#10;    elif 'x' in keys:&amp;#10;            Dis14.text = Dis14.text[:-1]&amp;#10;            Dis14.text+= ('Ч')&amp;#10;    elif 'i' in keys:&amp;#10;            Dis14.text = Dis14.text[:-1]&amp;#10;            Dis14.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Dis14.text = Dis14.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Dis14.text = (Dis14.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Dis14.text = Dis14.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Dis14.text = (Dis14.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Dis14.text = (Dis14.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Dis14.text = Dis14.text.slice(0, (- 1));&amp;#10;        Dis14.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Dis14.text = Dis14.text.slice(0, (- 1));&amp;#10;            Dis14.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Dis14.text = Dis14.text.slice(0, (- 1));&amp;#10;                Dis14.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Dis14.text = Dis14.text.slice(0, (- 1));&amp;#10;                    Dis14.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Dis14.text = Dis14.text.slice(0, (- 1));&amp;#10;                        Dis14.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Dis14.text = Dis14.text.slice(0, (- 1));&amp;#10;                            Dis14.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Dis14.text = Dis14.text.slice(0, (- 1));&amp;#10;                                Dis14.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Dis14.text = Dis14.text.slice(0, (- 1));&amp;#10;                                    Dis14.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Dis14.text = Dis14.text.slice(0, (- 1));&amp;#10;                                        Dis14.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Dis14.text = Dis14.text.slice(0, (- 1));&amp;#10;                                            Dis14.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Dis14.text = Dis14.text.slice(0, (- 1));&amp;#10;                                                Dis14.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Dis14.text = Dis14.text.slice(0, (- 1));&amp;#10;                                                    Dis14.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Dis14.text = Dis14.text.slice(0, (- 1));&amp;#10;                                                        Dis14.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Dis14.text = Dis14.text.slice(0, (- 5));&amp;#10;                                                            Dis14.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Dis14.text = Dis14.text.slice(0, (- 9));&amp;#10;                                                                Dis14.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Dis14.text = Dis14.text.slice(0, (- 1));&amp;#10;                                                                    Dis14.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;x&quot;, keys)) {&amp;#10;                                                                        Dis14.text = Dis14.text.slice(0, (- 1));&amp;#10;                                                                        Dis14.text += &quot;\u0427&quot;;&amp;#10;                                                                    } else {&amp;#10;                                                                        if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                            Dis14.text = Dis14.text.slice(0, (- 1));&amp;#10;                                                                            Dis14.text += &quot;\u0428&quot;;&amp;#10;                                                                        }&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Dis14.text);&amp;#10;Remember_14.addData(&quot;Answer of Pax&quot;, Dis14.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Dis14.text)&amp;#10;Remember_14.addData('Answer of Pax', Dis14.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_43" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Ospan_4c">
      <PolygonComponent name="Bck_14">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bck_14" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Stim_14">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Stim_14" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$S14" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ext_14">
        <Param name="allowedKeys" updates="constant" val="'1','0'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ext_14" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Remember_3b">
      <PolygonComponent name="Bc_13">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bc_13" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="In_13">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="In_13" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Dis13">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Dis13" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ex_13">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ex_13" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_42">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Dis13.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Dis13.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Dis13.text = Dis13.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Dis13.text = Dis13.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Dis13.text = Dis13.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Dis13.text = Dis13.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Dis13.text = Dis13.text[:-1]&amp;#10;            Dis13.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Dis13.text = Dis13.text[:-1]&amp;#10;            Dis13.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Dis13.text = Dis13.text[:-1]&amp;#10;            Dis13.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Dis13.text = Dis13.text[:-1]&amp;#10;            Dis13.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Dis13.text = Dis13.text[:-1]&amp;#10;            Dis13.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Dis13.text = Dis13.text[:-1]&amp;#10;            Dis13.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Dis13.text = Dis13.text[:-1]&amp;#10;            Dis13.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Dis13.text = Dis13.text[:-1]&amp;#10;            Dis13.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Dis13.text = Dis13.text[:-1]&amp;#10;            Dis13.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Dis13.text = Dis13.text[:-1]&amp;#10;            Dis13.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Dis13.text = Dis13.text[:-1]&amp;#10;            Dis13.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Dis13.text = Dis13.text[:-1]&amp;#10;            Dis13.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Dis13.text = Dis13.text[:-1]&amp;#10;            Dis13.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Dis13.text = Dis13.text[:-5]&amp;#10;            Dis13.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Dis13.text = Dis13.text[:-9]&amp;#10;            Dis13.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Dis13.text = Dis13.text[:-1]&amp;#10;            Dis13.text+= ('Ц')&amp;#10;    elif 'x' in keys:&amp;#10;            Dis13.text = Dis13.text[:-1]&amp;#10;            Dis13.text+= (u'Ч')&amp;#10;    elif 'i' in keys:&amp;#10;            Dis13.text = Dis13.text[:-1]&amp;#10;            Dis13.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Dis13.text = Dis13.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Dis13.text = (Dis13.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Dis13.text = Dis13.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Dis13.text = (Dis13.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Dis13.text = (Dis13.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Dis13.text = Dis13.text.slice(0, (- 1));&amp;#10;        Dis13.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Dis13.text = Dis13.text.slice(0, (- 1));&amp;#10;            Dis13.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Dis13.text = Dis13.text.slice(0, (- 1));&amp;#10;                Dis13.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Dis13.text = Dis13.text.slice(0, (- 1));&amp;#10;                    Dis13.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Dis13.text = Dis13.text.slice(0, (- 1));&amp;#10;                        Dis13.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Dis13.text = Dis13.text.slice(0, (- 1));&amp;#10;                            Dis13.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Dis13.text = Dis13.text.slice(0, (- 1));&amp;#10;                                Dis13.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Dis13.text = Dis13.text.slice(0, (- 1));&amp;#10;                                    Dis13.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Dis13.text = Dis13.text.slice(0, (- 1));&amp;#10;                                        Dis13.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Dis13.text = Dis13.text.slice(0, (- 1));&amp;#10;                                            Dis13.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Dis13.text = Dis13.text.slice(0, (- 1));&amp;#10;                                                Dis13.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Dis13.text = Dis13.text.slice(0, (- 1));&amp;#10;                                                    Dis13.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Dis13.text = Dis13.text.slice(0, (- 1));&amp;#10;                                                        Dis13.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Dis13.text = Dis13.text.slice(0, (- 5));&amp;#10;                                                            Dis13.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Dis13.text = Dis13.text.slice(0, (- 9));&amp;#10;                                                                Dis13.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Dis13.text = Dis13.text.slice(0, (- 1));&amp;#10;                                                                    Dis13.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;x&quot;, keys)) {&amp;#10;                                                                        Dis13.text = Dis13.text.slice(0, (- 1));&amp;#10;                                                                        Dis13.text += &quot;\u0427&quot;;&amp;#10;                                                                    } else {&amp;#10;                                                                        if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                            Dis13.text = Dis13.text.slice(0, (- 1));&amp;#10;                                                                            Dis13.text += &quot;\u0428&quot;;&amp;#10;                                                                        }&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Dis13.text);&amp;#10;Remember_13.addData(&quot;Answer of Pax&quot;, Dis13.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Dis13.text)&amp;#10;Remember_13.addData('Answer of Pax', Dis13.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_42" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Ospan_3b">
      <PolygonComponent name="Bck_13">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bck_13" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Stim_13">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Stim_13" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$S13" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ext_13">
        <Param name="allowedKeys" updates="constant" val="'1','0'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ext_13" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Remember_3a">
      <PolygonComponent name="Bc_12">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bc_12" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="In_12">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="In_12" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Dis12">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Dis12" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ex_12">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ex_12" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_41">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Dis12.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Dis12.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Dis12.text = Dis12.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Dis12.text = Dis12.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Dis12.text = Dis12.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Dis12.text = Dis12.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Dis12.text = Dis12.text[:-1]&amp;#10;            Dis12.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Dis12.text = Dis12.text[:-1]&amp;#10;            Dis12.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Dis12.text = Dis12.text[:-1]&amp;#10;            Dis12.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Dis12.text = Dis12.text[:-1]&amp;#10;            Dis12.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Dis12.text = Dis12.text[:-1]&amp;#10;            Dis12.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Dis12.text = Dis12.text[:-1]&amp;#10;            Dis12.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Dis12.text = Dis12.text[:-1]&amp;#10;            Dis12.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Dis12.text = Dis12.text[:-1]&amp;#10;            Dis12.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Dis12.text = Dis12.text[:-1]&amp;#10;            Dis12.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Dis12.text = Dis12.text[:-1]&amp;#10;            Dis12.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Dis12.text = Dis12.text[:-1]&amp;#10;            Dis12.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Dis12.text = Dis12.text[:-1]&amp;#10;            Dis12.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Dis12.text = Dis12.text[:-1]&amp;#10;            Dis12.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Dis12.text = Dis12.text[:-5]&amp;#10;            Dis12.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Dis12.text = Dis12.text[:-9]&amp;#10;            Dis12.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Dis12.text = Dis12.text[:-1]&amp;#10;            Dis12.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Dis12.text = Dis12.text[:-1]&amp;#10;            Dis12.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Dis12.text = Dis12.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Dis12.text = (Dis12.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Dis12.text = Dis12.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Dis12.text = (Dis12.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Dis12.text = (Dis12.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Dis12.text = Dis12.text.slice(0, (- 1));&amp;#10;        Dis12.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Dis12.text = Dis12.text.slice(0, (- 1));&amp;#10;            Dis12.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Dis12.text = Dis12.text.slice(0, (- 1));&amp;#10;                Dis12.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Dis12.text = Dis12.text.slice(0, (- 1));&amp;#10;                    Dis12.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Dis12.text = Dis12.text.slice(0, (- 1));&amp;#10;                        Dis12.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Dis12.text = Dis12.text.slice(0, (- 1));&amp;#10;                            Dis12.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Dis12.text = Dis12.text.slice(0, (- 1));&amp;#10;                                Dis12.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Dis12.text = Dis12.text.slice(0, (- 1));&amp;#10;                                    Dis12.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Dis12.text = Dis12.text.slice(0, (- 1));&amp;#10;                                        Dis12.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Dis12.text = Dis12.text.slice(0, (- 1));&amp;#10;                                            Dis12.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Dis12.text = Dis12.text.slice(0, (- 1));&amp;#10;                                                Dis12.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Dis12.text = Dis12.text.slice(0, (- 1));&amp;#10;                                                    Dis12.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Dis12.text = Dis12.text.slice(0, (- 1));&amp;#10;                                                        Dis12.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Dis12.text = Dis12.text.slice(0, (- 5));&amp;#10;                                                            Dis12.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Dis12.text = Dis12.text.slice(0, (- 9));&amp;#10;                                                                Dis12.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Dis12.text = Dis12.text.slice(0, (- 1));&amp;#10;                                                                    Dis12.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                        Dis12.text = Dis12.text.slice(0, (- 1));&amp;#10;                                                                        Dis12.text += &quot;\u0428&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Dis12.text);&amp;#10;Remember_12.addData(&quot;Answer of Pax&quot;, Dis12.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Dis12.text)&amp;#10;Remember_12.addData('Answer of Pax', Dis12.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_41" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Ospan_3a">
      <PolygonComponent name="Bck_12">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bck_12" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Stim_12">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Stim_12" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$S12" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ext_12">
        <Param name="allowedKeys" updates="constant" val="'1','0'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ext_12" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Remember_4b">
      <PolygonComponent name="Bc_11">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bc_11" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="In_11">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="In_11" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Dis11">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Dis11" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ex_11">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ex_11" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_40">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Dis11.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Dis11.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Dis11.text = Dis11.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Dis11.text = Dis11.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Dis11.text = Dis11.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Dis11.text = Dis11.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Dis11.text = Dis11.text[:-1]&amp;#10;            Dis11.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Dis11.text = Dis11.text[:-1]&amp;#10;            Dis11.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Dis11.text = Dis11.text[:-1]&amp;#10;            Dis11.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Dis11.text = Dis11.text[:-1]&amp;#10;            Dis11.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Dis11.text = Dis11.text[:-1]&amp;#10;            Dis11.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Dis11.text = Dis11.text[:-1]&amp;#10;            Dis11.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Dis11.text = Dis11.text[:-1]&amp;#10;            Dis11.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Dis11.text = Dis11.text[:-1]&amp;#10;            Dis11.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Dis11.text = Dis11.text[:-1]&amp;#10;            Dis11.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Dis11.text = Dis11.text[:-1]&amp;#10;            Dis11.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Dis11.text = Dis11.text[:-1]&amp;#10;            Dis11.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Dis11.text = Dis11.text[:-1]&amp;#10;            Dis11.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Dis11.text = Dis11.text[:-1]&amp;#10;            Dis11.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Dis11.text = Dis11.text[:-5]&amp;#10;            Dis11.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Dis11.text = Dis11.text[:-9]&amp;#10;            Dis11.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Dis11.text = Dis11.text[:-1]&amp;#10;            Dis11.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Dis11.text = Dis11.text[:-1]&amp;#10;            Dis11.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Dis11.text = Dis11.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Dis11.text = (Dis11.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Dis11.text = Dis11.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Dis11.text = (Dis11.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Dis11.text = (Dis11.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Dis11.text = Dis11.text.slice(0, (- 1));&amp;#10;        Dis11.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Dis11.text = Dis11.text.slice(0, (- 1));&amp;#10;            Dis11.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Dis11.text = Dis11.text.slice(0, (- 1));&amp;#10;                Dis11.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Dis11.text = Dis11.text.slice(0, (- 1));&amp;#10;                    Dis11.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Dis11.text = Dis11.text.slice(0, (- 1));&amp;#10;                        Dis11.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Dis11.text = Dis11.text.slice(0, (- 1));&amp;#10;                            Dis11.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Dis11.text = Dis11.text.slice(0, (- 1));&amp;#10;                                Dis11.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Dis11.text = Dis11.text.slice(0, (- 1));&amp;#10;                                    Dis11.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Dis11.text = Dis11.text.slice(0, (- 1));&amp;#10;                                        Dis11.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Dis11.text = Dis11.text.slice(0, (- 1));&amp;#10;                                            Dis11.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Dis11.text = Dis11.text.slice(0, (- 1));&amp;#10;                                                Dis11.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Dis11.text = Dis11.text.slice(0, (- 1));&amp;#10;                                                    Dis11.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Dis11.text = Dis11.text.slice(0, (- 1));&amp;#10;                                                        Dis11.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Dis11.text = Dis11.text.slice(0, (- 5));&amp;#10;                                                            Dis11.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Dis11.text = Dis11.text.slice(0, (- 9));&amp;#10;                                                                Dis11.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Dis11.text = Dis11.text.slice(0, (- 1));&amp;#10;                                                                    Dis11.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                        Dis11.text = Dis11.text.slice(0, (- 1));&amp;#10;                                                                        Dis11.text += &quot;\u0428&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Dis11.text);&amp;#10;Remember_11.addData(&quot;Answer of Pax&quot;, Dis11.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Dis11.text)&amp;#10;Remember_11.addData('Answer of Pax', Dis11.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_40" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Ospan_4b">
      <PolygonComponent name="Bck_11">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bck_11" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Stim_11">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Stim_11" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$S11" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ext_11">
        <Param name="allowedKeys" updates="constant" val="'1','0'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ext_11" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Remember_7b">
      <PolygonComponent name="Bc_10">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bc_10" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="In_10">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="In_10" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Dis10">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Dis10" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ex_10">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ex_10" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_39">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Dis10.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Dis10.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Dis10.text = Dis10.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Dis10.text = Dis10.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Dis10.text = Dis10.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Dis10.text = Dis10.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Dis10.text = Dis10.text[:-1]&amp;#10;            Dis10.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Dis10.text = Dis10.text[:-1]&amp;#10;            Dis10.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Dis10.text = Dis10.text[:-1]&amp;#10;            Dis10.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Dis10.text = Dis10.text[:-1]&amp;#10;            Dis10.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Dis10.text = Dis10.text[:-1]&amp;#10;            Dis10.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Dis10.text = Dis10.text[:-1]&amp;#10;            Dis10.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Dis10.text = Dis10.text[:-1]&amp;#10;            Dis10.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Dis10.text = Dis10.text[:-1]&amp;#10;            Dis10.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Dis10.text = Dis10.text[:-1]&amp;#10;            Dis10.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Dis10.text = Dis10.text[:-1]&amp;#10;            Dis10.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Dis10.text = Dis10.text[:-1]&amp;#10;            Dis10.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Dis10.text = Dis10.text[:-1]&amp;#10;            Dis10.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Dis10.text = Dis10.text[:-1]&amp;#10;            Dis10.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Dis10.text = Dis10.text[:-5]&amp;#10;            Dis10.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Dis10.text = Dis10.text[:-9]&amp;#10;            Dis10.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Dis10.text = Dis10.text[:-1]&amp;#10;            Dis10.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Dis10.text = Dis10.text[:-1]&amp;#10;            Dis10.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Dis10.text = Dis10.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Dis10.text = (Dis10.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Dis10.text = Dis10.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Dis10.text = (Dis10.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Dis10.text = (Dis10.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Dis10.text = Dis10.text.slice(0, (- 1));&amp;#10;        Dis10.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Dis10.text = Dis10.text.slice(0, (- 1));&amp;#10;            Dis10.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Dis10.text = Dis10.text.slice(0, (- 1));&amp;#10;                Dis10.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Dis10.text = Dis10.text.slice(0, (- 1));&amp;#10;                    Dis10.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Dis10.text = Dis10.text.slice(0, (- 1));&amp;#10;                        Dis10.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Dis10.text = Dis10.text.slice(0, (- 1));&amp;#10;                            Dis10.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Dis10.text = Dis10.text.slice(0, (- 1));&amp;#10;                                Dis10.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Dis10.text = Dis10.text.slice(0, (- 1));&amp;#10;                                    Dis10.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Dis10.text = Dis10.text.slice(0, (- 1));&amp;#10;                                        Dis10.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Dis10.text = Dis10.text.slice(0, (- 1));&amp;#10;                                            Dis10.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Dis10.text = Dis10.text.slice(0, (- 1));&amp;#10;                                                Dis10.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Dis10.text = Dis10.text.slice(0, (- 1));&amp;#10;                                                    Dis10.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Dis10.text = Dis10.text.slice(0, (- 1));&amp;#10;                                                        Dis10.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Dis10.text = Dis10.text.slice(0, (- 5));&amp;#10;                                                            Dis10.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Dis10.text = Dis10.text.slice(0, (- 9));&amp;#10;                                                                Dis10.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Dis10.text = Dis10.text.slice(0, (- 1));&amp;#10;                                                                    Dis10.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                        Dis10.text = Dis10.text.slice(0, (- 1));&amp;#10;                                                                        Dis10.text += &quot;\u0428&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Dis10.text);&amp;#10;Remember_10.addData(&quot;Answer of Pax&quot;, Dis10.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Dis10.text)&amp;#10;Remember_10.addData('Answer of Pax', Dis10.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_39" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Ospan_7b">
      <PolygonComponent name="Bck_10">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bck_10" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Stim_10">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Stim_10" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$S10" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ext_10">
        <Param name="allowedKeys" updates="constant" val="'1','0'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ext_10" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Remember_8b">
      <PolygonComponent name="Bc_9">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bc_9" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="In_9">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="In_9" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Dis9">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Dis9" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ex_9">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ex_9" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_38">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Dis9.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Dis9.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Dis9.text = Dis9.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Dis9.text = Dis9.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Dis9.text = Dis9.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Dis9.text = Dis9.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Dis9.text = Dis9.text[:-1]&amp;#10;            Dis9.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Dis9.text = Dis9.text[:-1]&amp;#10;            Dis9.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Dis9.text = Dis9.text[:-1]&amp;#10;            Dis9.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Dis9.text = Dis9.text[:-1]&amp;#10;            Dis9.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Dis9.text = Dis9.text[:-1]&amp;#10;            Dis9.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Dis9.text = Dis9.text[:-1]&amp;#10;            Dis9.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Dis9.text = Dis9.text[:-1]&amp;#10;            Dis9.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Dis9.text = Dis9.text[:-1]&amp;#10;            Dis9.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Dis9.text = Dis9.text[:-1]&amp;#10;            Dis9.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Dis9.text = Dis9.text[:-1]&amp;#10;            Dis9.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Dis9.text = Dis9.text[:-1]&amp;#10;            Dis9.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Dis9.text = Dis9.text[:-1]&amp;#10;            Dis9.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Dis9.text = Dis9.text[:-1]&amp;#10;            Dis9.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Dis9.text = Dis9.text[:-5]&amp;#10;            Dis9.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Dis9.text = Dis9.text[:-9]&amp;#10;            Dis9.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Dis9.text = Dis9.text[:-1]&amp;#10;            Dis9.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Dis9.text = Dis9.text[:-1]&amp;#10;            Dis9.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Dis9.text = Dis9.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Dis9.text = (Dis9.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Dis9.text = Dis9.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Dis9.text = (Dis9.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Dis9.text = (Dis9.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Dis9.text = Dis9.text.slice(0, (- 1));&amp;#10;        Dis9.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Dis9.text = Dis9.text.slice(0, (- 1));&amp;#10;            Dis9.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Dis9.text = Dis9.text.slice(0, (- 1));&amp;#10;                Dis9.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Dis9.text = Dis9.text.slice(0, (- 1));&amp;#10;                    Dis9.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Dis9.text = Dis9.text.slice(0, (- 1));&amp;#10;                        Dis9.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Dis9.text = Dis9.text.slice(0, (- 1));&amp;#10;                            Dis9.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Dis9.text = Dis9.text.slice(0, (- 1));&amp;#10;                                Dis9.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Dis9.text = Dis9.text.slice(0, (- 1));&amp;#10;                                    Dis9.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Dis9.text = Dis9.text.slice(0, (- 1));&amp;#10;                                        Dis9.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Dis9.text = Dis9.text.slice(0, (- 1));&amp;#10;                                            Dis9.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Dis9.text = Dis9.text.slice(0, (- 1));&amp;#10;                                                Dis9.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Dis9.text = Dis9.text.slice(0, (- 1));&amp;#10;                                                    Dis9.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Dis9.text = Dis9.text.slice(0, (- 1));&amp;#10;                                                        Dis9.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Dis9.text = Dis9.text.slice(0, (- 5));&amp;#10;                                                            Dis9.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Dis9.text = Dis9.text.slice(0, (- 9));&amp;#10;                                                                Dis9.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Dis9.text = Dis9.text.slice(0, (- 1));&amp;#10;                                                                    Dis9.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                        Dis9.text = Dis9.text.slice(0, (- 1));&amp;#10;                                                                        Dis9.text += &quot;\u0428&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Dis9.text);&amp;#10;Remember_9.addData(&quot;Answer of Pax&quot;, Dis9.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Dis9.text)&amp;#10;Remember_9.addData('Answer of Pax', Dis9.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_38" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Ospan_8b">
      <PolygonComponent name="Bck_9">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bck_9" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="stim_9">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="stim_9" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$S9" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ext_9">
        <Param name="allowedKeys" updates="constant" val="'1','0'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ext_9" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Remember_2b">
      <PolygonComponent name="Bc_8">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bc_8" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="In_8">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="In_8" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Dis8">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Dis8" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ex_8">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ex_8" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_37">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Dis8.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Dis8.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Dis8.text = Dis8.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Dis8.text = Dis8.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Dis8.text = Dis8.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Dis8.text = Dis8.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Dis8.text = Dis8.text[:-1]&amp;#10;            Dis8.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Dis8.text = Dis8.text[:-1]&amp;#10;            Dis8.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Dis8.text = Dis8.text[:-1]&amp;#10;            Dis8.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Dis8.text = Dis8.text[:-1]&amp;#10;            Dis8.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Dis8.text = Dis8.text[:-1]&amp;#10;            Dis8.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Dis8.text = Dis8.text[:-1]&amp;#10;            Dis8.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Dis8.text = Dis8.text[:-1]&amp;#10;            Dis8.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Dis8.text = Dis8.text[:-1]&amp;#10;            Dis8.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Dis8.text = Dis8.text[:-1]&amp;#10;            Dis8.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Dis8.text = Dis8.text[:-1]&amp;#10;            Dis8.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Dis8.text = Dis8.text[:-1]&amp;#10;            Dis8.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Dis8.text = Dis8.text[:-1]&amp;#10;            Dis8.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Dis8.text = Dis8.text[:-1]&amp;#10;            Dis8.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Dis8.text = Dis8.text[:-5]&amp;#10;            Dis8.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Dis8.text = Dis8.text[:-9]&amp;#10;            Dis8.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Dis8.text = Dis8.text[:-1]&amp;#10;            Dis8.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Dis8.text = Dis8.text[:-1]&amp;#10;            Dis8.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Dis8.text = Dis8.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Dis8.text = (Dis8.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Dis8.text = Dis8.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Dis8.text = (Dis8.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Dis8.text = (Dis8.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Dis8.text = Dis8.text.slice(0, (- 1));&amp;#10;        Dis8.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Dis8.text = Dis8.text.slice(0, (- 1));&amp;#10;            Dis8.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Dis8.text = Dis8.text.slice(0, (- 1));&amp;#10;                Dis8.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Dis8.text = Dis8.text.slice(0, (- 1));&amp;#10;                    Dis8.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Dis8.text = Dis8.text.slice(0, (- 1));&amp;#10;                        Dis8.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Dis8.text = Dis8.text.slice(0, (- 1));&amp;#10;                            Dis8.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Dis8.text = Dis8.text.slice(0, (- 1));&amp;#10;                                Dis8.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Dis8.text = Dis8.text.slice(0, (- 1));&amp;#10;                                    Dis8.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Dis8.text = Dis8.text.slice(0, (- 1));&amp;#10;                                        Dis8.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Dis8.text = Dis8.text.slice(0, (- 1));&amp;#10;                                            Dis8.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Dis8.text = Dis8.text.slice(0, (- 1));&amp;#10;                                                Dis8.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Dis8.text = Dis8.text.slice(0, (- 1));&amp;#10;                                                    Dis8.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Dis8.text = Dis8.text.slice(0, (- 1));&amp;#10;                                                        Dis8.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Dis8.text = Dis8.text.slice(0, (- 5));&amp;#10;                                                            Dis8.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Dis8.text = Dis8.text.slice(0, (- 9));&amp;#10;                                                                Dis8.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Dis8.text = Dis8.text.slice(0, (- 1));&amp;#10;                                                                    Dis8.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                        Dis8.text = Dis8.text.slice(0, (- 1));&amp;#10;                                                                        Dis8.text += &quot;\u0428&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Dis8.text);&amp;#10;Remember_8.addData(&quot;Answer of Pax&quot;, Dis8.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Dis8.text)&amp;#10;Remember_8.addData('Answer of Pax', Dis8.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_37" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Ospan_2b">
      <PolygonComponent name="Bck_8">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bck_8" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Stim_8">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Stim_8" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$S8" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ext_8">
        <Param name="allowedKeys" updates="constant" val="'1','0'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ext_8" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Remember_5b">
      <PolygonComponent name="Bc_7">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bc_7" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="In_7">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="In_7" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Dis7">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Dis7" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ex_7">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ex_7" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_36">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Dis7.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Dis7.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Dis7.text = Dis7.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Dis7.text = Dis7.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Dis7.text = Dis7.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Dis7.text = Dis7.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Dis7.text = Dis7.text[:-1]&amp;#10;            Dis7.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Dis7.text = Dis7.text[:-1]&amp;#10;            Dis7.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Dis7.text = Dis7.text[:-1]&amp;#10;            Dis7.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Dis7.text = Dis7.text[:-1]&amp;#10;            Dis7.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Dis7.text = Dis7.text[:-1]&amp;#10;            Dis7.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Dis7.text = Dis7.text[:-1]&amp;#10;            Dis7.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Dis7.text = Dis7.text[:-1]&amp;#10;            Dis7.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Dis7.text = Dis7.text[:-1]&amp;#10;            Dis7.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Dis7.text = Dis7.text[:-1]&amp;#10;            Dis7.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Dis7.text = Dis7.text[:-1]&amp;#10;            Dis7.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Dis7.text = Dis7.text[:-1]&amp;#10;            Dis7.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Dis7.text = Dis7.text[:-1]&amp;#10;            Dis7.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Dis7.text = Dis7.text[:-1]&amp;#10;            Dis7.text+= (u'Ф')&amp;#10;    elif 'x' in keys:&amp;#10;            Dis7.text = Dis7.text[:-1]&amp;#10;            Dis7.text+= (u'Ч')&amp;#10;    elif 'comma' in keys:&amp;#10;            Dis7.text = Dis7.text[:-5]&amp;#10;            Dis7.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Dis7.text = Dis7.text[:-9]&amp;#10;            Dis7.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Dis7.text = Dis7.text[:-1]&amp;#10;            Dis7.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Dis7.text = Dis7.text[:-1]&amp;#10;            Dis7.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Dis7.text = Dis7.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Dis7.text = (Dis7.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Dis7.text = Dis7.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Dis7.text = (Dis7.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Dis7.text = (Dis7.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Dis7.text = Dis7.text.slice(0, (- 1));&amp;#10;        Dis7.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Dis7.text = Dis7.text.slice(0, (- 1));&amp;#10;            Dis7.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Dis7.text = Dis7.text.slice(0, (- 1));&amp;#10;                Dis7.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Dis7.text = Dis7.text.slice(0, (- 1));&amp;#10;                    Dis7.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Dis7.text = Dis7.text.slice(0, (- 1));&amp;#10;                        Dis7.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Dis7.text = Dis7.text.slice(0, (- 1));&amp;#10;                            Dis7.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Dis7.text = Dis7.text.slice(0, (- 1));&amp;#10;                                Dis7.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Dis7.text = Dis7.text.slice(0, (- 1));&amp;#10;                                    Dis7.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Dis7.text = Dis7.text.slice(0, (- 1));&amp;#10;                                        Dis7.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Dis7.text = Dis7.text.slice(0, (- 1));&amp;#10;                                            Dis7.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Dis7.text = Dis7.text.slice(0, (- 1));&amp;#10;                                                Dis7.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Dis7.text = Dis7.text.slice(0, (- 1));&amp;#10;                                                    Dis7.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Dis7.text = Dis7.text.slice(0, (- 1));&amp;#10;                                                        Dis7.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;x&quot;, keys)) {&amp;#10;                                                            Dis7.text = Dis7.text.slice(0, (- 1));&amp;#10;                                                            Dis7.text += &quot;\u0427&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                                Dis7.text = Dis7.text.slice(0, (- 5));&amp;#10;                                                                Dis7.text += &quot;\u0411&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                    Dis7.text = Dis7.text.slice(0, (- 9));&amp;#10;                                                                    Dis7.text += &quot;\u0416&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                        Dis7.text = Dis7.text.slice(0, (- 1));&amp;#10;                                                                        Dis7.text += &quot;\u0426&quot;;&amp;#10;                                                                    } else {&amp;#10;                                                                        if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                            Dis7.text = Dis7.text.slice(0, (- 1));&amp;#10;                                                                            Dis7.text += &quot;\u0428&quot;;&amp;#10;                                                                        }&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Dis7.text);&amp;#10;Remember_7.addData(&quot;Answer of Pax&quot;, Dis7.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Dis7.text)&amp;#10;Remember_7.addData('Answer of Pax', Dis7.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_36" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Ospan_5b">
      <PolygonComponent name="Bck_7">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bck_7" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Stim_7">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Stim_7" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$S7" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ext_7">
        <Param name="allowedKeys" updates="constant" val="'1','0'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ext_7" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Remember_8a">
      <PolygonComponent name="Bc_6">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bc_6" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="In_6">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="In_6" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Dis6">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Dis6" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ex_6">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ex_6" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_35">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Dis6.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Dis6.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Dis6.text = Dis6.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Dis6.text = Dis6.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Dis6.text = Dis6.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Dis6.text = Dis6.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Dis6.text = Dis6.text[:-1]&amp;#10;            Dis6.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Dis6.text = Dis6.text[:-1]&amp;#10;            Dis6.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Dis6.text = Dis6.text[:-1]&amp;#10;            Dis6.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Dis6.text = Dis6.text[:-1]&amp;#10;            Dis6.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Dis6.text = Dis6.text[:-1]&amp;#10;            Dis6.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Dis6.text = Dis6.text[:-1]&amp;#10;            Dis6.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Dis6.text = Dis6.text[:-1]&amp;#10;            Dis6.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Dis6.text = Dis6.text[:-1]&amp;#10;            Dis6.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Dis6.text = Dis6.text[:-1]&amp;#10;            Dis6.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Dis6.text = Dis6.text[:-1]&amp;#10;            Dis6.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Dis6.text = Dis6.text[:-1]&amp;#10;            Dis6.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Dis6.text = Dis6.text[:-1]&amp;#10;            Dis6.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Dis6.text = Dis6.text[:-1]&amp;#10;            Dis6.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Dis6.text = Dis6.text[:-5]&amp;#10;            Dis6.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Dis6.text = Dis6.text[:-9]&amp;#10;            Dis6.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Dis6.text = Dis6.text[:-1]&amp;#10;            Dis6.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Dis6.text = Dis6.text[:-1]&amp;#10;            Dis6.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Dis6.text = Dis6.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Dis6.text = (Dis6.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Dis6.text = Dis6.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Dis6.text = (Dis6.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Dis6.text = (Dis6.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Dis6.text = Dis6.text.slice(0, (- 1));&amp;#10;        Dis6.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Dis6.text = Dis6.text.slice(0, (- 1));&amp;#10;            Dis6.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Dis6.text = Dis6.text.slice(0, (- 1));&amp;#10;                Dis6.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Dis6.text = Dis6.text.slice(0, (- 1));&amp;#10;                    Dis6.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Dis6.text = Dis6.text.slice(0, (- 1));&amp;#10;                        Dis6.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Dis6.text = Dis6.text.slice(0, (- 1));&amp;#10;                            Dis6.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Dis6.text = Dis6.text.slice(0, (- 1));&amp;#10;                                Dis6.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Dis6.text = Dis6.text.slice(0, (- 1));&amp;#10;                                    Dis6.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Dis6.text = Dis6.text.slice(0, (- 1));&amp;#10;                                        Dis6.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Dis6.text = Dis6.text.slice(0, (- 1));&amp;#10;                                            Dis6.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Dis6.text = Dis6.text.slice(0, (- 1));&amp;#10;                                                Dis6.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Dis6.text = Dis6.text.slice(0, (- 1));&amp;#10;                                                    Dis6.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Dis6.text = Dis6.text.slice(0, (- 1));&amp;#10;                                                        Dis6.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Dis6.text = Dis6.text.slice(0, (- 5));&amp;#10;                                                            Dis6.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Dis6.text = Dis6.text.slice(0, (- 9));&amp;#10;                                                                Dis6.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Dis6.text = Dis6.text.slice(0, (- 1));&amp;#10;                                                                    Dis6.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                        Dis6.text = Dis6.text.slice(0, (- 1));&amp;#10;                                                                        Dis6.text += &quot;\u0428&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Dis6.text);&amp;#10;Remember_6.addData(&quot;Answer of Pax&quot;, Dis6.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Dis6.text)&amp;#10;Remember_6.addData('Answer of Pax', Dis6.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_35" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Ospan_8a">
      <PolygonComponent name="Bck_6">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bck_6" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Stim_6">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Stim_6" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$S6" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ext_6">
        <Param name="allowedKeys" updates="constant" val="'1','0'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ext_6" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Remember_2a">
      <PolygonComponent name="Bc_5">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bc_5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="In_5">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="In_5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Dis5">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Dis5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ex_5">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ex_5" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_34">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Dis5.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Dis5.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Dis5.text = Dis5.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Dis5.text = Dis5.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Dis5.text = Dis5.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Dis5.text = Dis5.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Dis5.text = Dis5.text[:-1]&amp;#10;            Dis5.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Dis5.text = Dis5.text[:-1]&amp;#10;            Dis5.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Dis5.text = Dis5.text[:-1]&amp;#10;            Dis5.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Dis5.text = Dis5.text[:-1]&amp;#10;            Dis5.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Dis5.text = Dis5.text[:-1]&amp;#10;            Dis5.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Dis5.text = Dis5.text[:-1]&amp;#10;            Dis5.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Dis5.text = Dis5.text[:-1]&amp;#10;            Dis5.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Dis5.text = Dis5.text[:-1]&amp;#10;            Dis5.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Dis5.text = Dis5.text[:-1]&amp;#10;            Dis5.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Dis5.text = Dis5.text[:-1]&amp;#10;            Dis5.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Dis5.text = Dis5.text[:-1]&amp;#10;            Dis5.text+= (u'П')&amp;#10;    elif 'x' in keys:&amp;#10;            Dis5.text = Dis5.text[:-1]&amp;#10;            Dis5.text+= (u'Ч')&amp;#10;    elif 'l' in keys:&amp;#10;            Dis5.text = Dis5.text[:-1]&amp;#10;            Dis5.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Dis5.text = Dis5.text[:-1]&amp;#10;            Dis5.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Dis5.text = Dis5.text[:-5]&amp;#10;            Dis5.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Dis5.text = Dis5.text[:-9]&amp;#10;            Dis5.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Dis5.text = Dis5.text[:-1]&amp;#10;            Dis5.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Dis5.text = Dis5.text[:-1]&amp;#10;            Dis5.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Dis5.text = Dis5.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Dis5.text = (Dis5.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Dis5.text = Dis5.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Dis5.text = (Dis5.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Dis5.text = (Dis5.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Dis5.text = Dis5.text.slice(0, (- 1));&amp;#10;        Dis5.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Dis5.text = Dis5.text.slice(0, (- 1));&amp;#10;            Dis5.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Dis5.text = Dis5.text.slice(0, (- 1));&amp;#10;                Dis5.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Dis5.text = Dis5.text.slice(0, (- 1));&amp;#10;                    Dis5.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Dis5.text = Dis5.text.slice(0, (- 1));&amp;#10;                        Dis5.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Dis5.text = Dis5.text.slice(0, (- 1));&amp;#10;                            Dis5.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Dis5.text = Dis5.text.slice(0, (- 1));&amp;#10;                                Dis5.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Dis5.text = Dis5.text.slice(0, (- 1));&amp;#10;                                    Dis5.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Dis5.text = Dis5.text.slice(0, (- 1));&amp;#10;                                        Dis5.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Dis5.text = Dis5.text.slice(0, (- 1));&amp;#10;                                            Dis5.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Dis5.text = Dis5.text.slice(0, (- 1));&amp;#10;                                                Dis5.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;x&quot;, keys)) {&amp;#10;                                                    Dis5.text = Dis5.text.slice(0, (- 1));&amp;#10;                                                    Dis5.text += &quot;\u0427&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                        Dis5.text = Dis5.text.slice(0, (- 1));&amp;#10;                                                        Dis5.text += &quot;\u0414&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                            Dis5.text = Dis5.text.slice(0, (- 1));&amp;#10;                                                            Dis5.text += &quot;\u0424&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                                Dis5.text = Dis5.text.slice(0, (- 5));&amp;#10;                                                                Dis5.text += &quot;\u0411&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                    Dis5.text = Dis5.text.slice(0, (- 9));&amp;#10;                                                                    Dis5.text += &quot;\u0416&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                        Dis5.text = Dis5.text.slice(0, (- 1));&amp;#10;                                                                        Dis5.text += &quot;\u0426&quot;;&amp;#10;                                                                    } else {&amp;#10;                                                                        if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                            Dis5.text = Dis5.text.slice(0, (- 1));&amp;#10;                                                                            Dis5.text += &quot;\u0428&quot;;&amp;#10;                                                                        }&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Dis5.text);&amp;#10;Remember_5.addData(&quot;Answer of Pax&quot;, Dis5.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Dis5.text)&amp;#10;Remember_5.addData('Answer of Pax', Dis5.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_34" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Ospan_2a">
      <PolygonComponent name="Bck_5">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bck_5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Stim_5">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Stim_5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$S5" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ext_5">
        <Param name="allowedKeys" updates="constant" val="'1','0'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ext_5" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Remember_6a">
      <PolygonComponent name="Bc_4">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bc_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="In_4">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="In_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Dis4">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Dis4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ex_4">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ex_4" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_33">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Dis4.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Dis4.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Dis4.text = Dis4.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Dis4.text = Dis4.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Dis4.text = Dis4.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Dis4.text = Dis4.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Dis4.text = Dis4.text[:-1]&amp;#10;            Dis4.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Dis4.text = Dis4.text[:-1]&amp;#10;            Dis4.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Dis4.text = Dis4.text[:-1]&amp;#10;            Dis4.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Dis4.text = Dis4.text[:-1]&amp;#10;            Dis4.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Dis4.text = Dis4.text[:-1]&amp;#10;            Dis4.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Dis4.text = Dis4.text[:-1]&amp;#10;            Dis4.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Dis4.text = Dis4.text[:-1]&amp;#10;            Dis4.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Dis4.text = Dis4.text[:-1]&amp;#10;            Dis4.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Dis4.text = Dis4.text[:-1]&amp;#10;            Dis4.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Dis4.text = Dis4.text[:-1]&amp;#10;            Dis4.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Dis4.text = Dis4.text[:-1]&amp;#10;            Dis4.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Dis4.text = Dis4.text[:-1]&amp;#10;            Dis4.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Dis4.text = Dis4.text[:-1]&amp;#10;            Dis4.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Dis4.text = Dis4.text[:-5]&amp;#10;            Dis4.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Dis4.text = Dis4.text[:-9]&amp;#10;            Dis4.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Dis4.text = Dis4.text[:-1]&amp;#10;            Dis4.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Dis4.text = Dis4.text[:-1]&amp;#10;            Dis4.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Dis4.text = Dis4.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Dis4.text = (Dis4.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Dis4.text = Dis4.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Dis4.text = (Dis4.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Dis4.text = (Dis4.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Dis4.text = Dis4.text.slice(0, (- 1));&amp;#10;        Dis4.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Dis4.text = Dis4.text.slice(0, (- 1));&amp;#10;            Dis4.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Dis4.text = Dis4.text.slice(0, (- 1));&amp;#10;                Dis4.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Dis4.text = Dis4.text.slice(0, (- 1));&amp;#10;                    Dis4.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Dis4.text = Dis4.text.slice(0, (- 1));&amp;#10;                        Dis4.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Dis4.text = Dis4.text.slice(0, (- 1));&amp;#10;                            Dis4.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Dis4.text = Dis4.text.slice(0, (- 1));&amp;#10;                                Dis4.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Dis4.text = Dis4.text.slice(0, (- 1));&amp;#10;                                    Dis4.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Dis4.text = Dis4.text.slice(0, (- 1));&amp;#10;                                        Dis4.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Dis4.text = Dis4.text.slice(0, (- 1));&amp;#10;                                            Dis4.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Dis4.text = Dis4.text.slice(0, (- 1));&amp;#10;                                                Dis4.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Dis4.text = Dis4.text.slice(0, (- 1));&amp;#10;                                                    Dis4.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Dis4.text = Dis4.text.slice(0, (- 1));&amp;#10;                                                        Dis4.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Dis4.text = Dis4.text.slice(0, (- 5));&amp;#10;                                                            Dis4.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Dis4.text = Dis4.text.slice(0, (- 9));&amp;#10;                                                                Dis4.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Dis4.text = Dis4.text.slice(0, (- 1));&amp;#10;                                                                    Dis4.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                        Dis4.text = Dis4.text.slice(0, (- 1));&amp;#10;                                                                        Dis4.text += &quot;\u0428&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Dis4.text);&amp;#10;Remember_4.addData(&quot;Answer of Pax&quot;, Dis4.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Dis4.text)&amp;#10;Remember_4.addData('Answer of Pax', Dis4.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_33" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Ospan_6a">
      <PolygonComponent name="Bck_4">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bck_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Stim_4">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Stim_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$S4" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ext_4">
        <Param name="allowedKeys" updates="constant" val="'0','1'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ext_4" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Remember_7a">
      <PolygonComponent name="Bc_3">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bc_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="In_3">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="In_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Dis3">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Dis3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ex_3">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ex_3" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_32">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Dis3.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Dis3.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Dis3.text = Dis3.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Dis3.text = Dis3.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Dis3.text = Dis3.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Dis3.text = Dis3.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Dis3.text = Dis3.text[:-1]&amp;#10;            Dis3.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Dis3.text = Dis3.text[:-1]&amp;#10;            Dis3.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Dis3.text = Dis3.text[:-1]&amp;#10;            Dis3.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Dis3.text = Dis3.text[:-1]&amp;#10;            Dis3.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Dis3.text = Dis3.text[:-1]&amp;#10;            Dis3.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Dis3.text = Dis3.text[:-1]&amp;#10;            Dis3.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Dis3.text = Dis3.text[:-1]&amp;#10;            Dis3.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Dis3.text = Dis3.text[:-1]&amp;#10;            Dis3.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Dis3.text = Dis3.text[:-1]&amp;#10;            Dis3.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Dis3.text = Dis3.text[:-1]&amp;#10;            Dis3.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Dis3.text = Dis3.text[:-1]&amp;#10;            Dis3.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Dis3.text = Dis3.text[:-1]&amp;#10;            Dis3.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Dis3.text = Dis3.text[:-1]&amp;#10;            Dis3.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Dis3.text = Dis3.text[:-5]&amp;#10;            Dis3.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Dis3.text = Dis3.text[:-9]&amp;#10;            Dis3.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Dis3.text = Dis3.text[:-1]&amp;#10;            Dis3.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Dis3.text = Dis3.text[:-1]&amp;#10;            Dis3.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Dis3.text = Dis3.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Dis3.text = (Dis3.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Dis3.text = Dis3.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Dis3.text = (Dis3.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Dis3.text = (Dis3.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Dis3.text = Dis3.text.slice(0, (- 1));&amp;#10;        Dis3.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Dis3.text = Dis3.text.slice(0, (- 1));&amp;#10;            Dis3.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Dis3.text = Dis3.text.slice(0, (- 1));&amp;#10;                Dis3.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Dis3.text = Dis3.text.slice(0, (- 1));&amp;#10;                    Dis3.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Dis3.text = Dis3.text.slice(0, (- 1));&amp;#10;                        Dis3.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Dis3.text = Dis3.text.slice(0, (- 1));&amp;#10;                            Dis3.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Dis3.text = Dis3.text.slice(0, (- 1));&amp;#10;                                Dis3.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Dis3.text = Dis3.text.slice(0, (- 1));&amp;#10;                                    Dis3.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Dis3.text = Dis3.text.slice(0, (- 1));&amp;#10;                                        Dis3.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Dis3.text = Dis3.text.slice(0, (- 1));&amp;#10;                                            Dis3.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Dis3.text = Dis3.text.slice(0, (- 1));&amp;#10;                                                Dis3.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Dis3.text = Dis3.text.slice(0, (- 1));&amp;#10;                                                    Dis3.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Dis3.text = Dis3.text.slice(0, (- 1));&amp;#10;                                                        Dis3.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Dis3.text = Dis3.text.slice(0, (- 5));&amp;#10;                                                            Dis3.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Dis3.text = Dis3.text.slice(0, (- 9));&amp;#10;                                                                Dis3.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Dis3.text = Dis3.text.slice(0, (- 1));&amp;#10;                                                                    Dis3.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                        Dis3.text = Dis3.text.slice(0, (- 1));&amp;#10;                                                                        Dis3.text += &quot;\u0428&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Dis3.text);&amp;#10;Remember_3.addData(&quot;Answer of Pax&quot;, Dis3.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Dis3.text)&amp;#10;Remember_3.addData('Answer of Pax', Dis3.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_32" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Ospan_7a">
      <PolygonComponent name="Bck_3">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bck_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Stimuli_3">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Stimuli_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$S3" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ext_3">
        <Param name="allowedKeys" updates="constant" val="'0','1'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ext_3" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Remember_5a">
      <PolygonComponent name="Bc_2">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bc_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="In_2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="In_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Dis2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Dis2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ex_2">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ex_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_31">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Dis2.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Dis2.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Dis2.text = Dis2.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Dis2.text = Dis2.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Dis2.text = Dis2.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Dis2.text = Dis2.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Dis2.text = Dis2.text[:-1]&amp;#10;            Dis2.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Dis2.text = Dis2.text[:-1]&amp;#10;            Dis2.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Dis2.text = Dis2.text[:-1]&amp;#10;            Dis2.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Dis2.text = Dis2.text[:-1]&amp;#10;            Dis2.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Dis2.text = Dis2.text[:-1]&amp;#10;            Dis2.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Dis2.text = Dis2.text[:-1]&amp;#10;            Dis2.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Dis2.text = Dis2.text[:-1]&amp;#10;            Dis2.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Dis2.text = Dis2.text[:-1]&amp;#10;            Dis2.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Dis2.text = Dis2.text[:-1]&amp;#10;            Dis2.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Dis2.text = Dis2.text[:-1]&amp;#10;            Dis2.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Dis2.text = Dis2.text[:-1]&amp;#10;            Dis2.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Dis2.text = Dis2.text[:-1]&amp;#10;            Dis2.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Dis2.text = Dis2.text[:-1]&amp;#10;            Dis2.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Dis2.text = Dis2.text[:-5]&amp;#10;            Dis2.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Dis2.text = Dis2.text[:-9]&amp;#10;            Dis2.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Dis2.text = Dis2.text[:-1]&amp;#10;            Dis2.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Dis2.text = Dis2.text[:-1]&amp;#10;            Dis2.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Dis2.text = Dis2.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Dis2.text = (Dis2.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Dis2.text = Dis2.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Dis2.text = (Dis2.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Dis2.text = (Dis2.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Dis2.text = Dis2.text.slice(0, (- 1));&amp;#10;        Dis2.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Dis2.text = Dis2.text.slice(0, (- 1));&amp;#10;            Dis2.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Dis2.text = Dis2.text.slice(0, (- 1));&amp;#10;                Dis2.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Dis2.text = Dis2.text.slice(0, (- 1));&amp;#10;                    Dis2.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Dis2.text = Dis2.text.slice(0, (- 1));&amp;#10;                        Dis2.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Dis2.text = Dis2.text.slice(0, (- 1));&amp;#10;                            Dis2.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Dis2.text = Dis2.text.slice(0, (- 1));&amp;#10;                                Dis2.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Dis2.text = Dis2.text.slice(0, (- 1));&amp;#10;                                    Dis2.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Dis2.text = Dis2.text.slice(0, (- 1));&amp;#10;                                        Dis2.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Dis2.text = Dis2.text.slice(0, (- 1));&amp;#10;                                            Dis2.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Dis2.text = Dis2.text.slice(0, (- 1));&amp;#10;                                                Dis2.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Dis2.text = Dis2.text.slice(0, (- 1));&amp;#10;                                                    Dis2.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Dis2.text = Dis2.text.slice(0, (- 1));&amp;#10;                                                        Dis2.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Dis2.text = Dis2.text.slice(0, (- 5));&amp;#10;                                                            Dis2.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Dis2.text = Dis2.text.slice(0, (- 9));&amp;#10;                                                                Dis2.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Dis2.text = Dis2.text.slice(0, (- 1));&amp;#10;                                                                    Dis2.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                        Dis2.text = Dis2.text.slice(0, (- 1));&amp;#10;                                                                        Dis2.text += &quot;\u0428&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Dis2.text);&amp;#10;Remember_2.addData(&quot;Answer of Pax&quot;, Dis2.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Dis2.text)&amp;#10;Remember_2.addData('Answer of Pax', Dis2.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_31" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Ospan_5a">
      <PolygonComponent name="Bck_2">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bck_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Stimuli_2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Stimuli_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$S2" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ext_2">
        <Param name="allowedKeys" updates="constant" val="'0','1'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ext_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Remember_4a">
      <PolygonComponent name="Bc_1">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bc_1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Ins_1">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Ins_1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Dis1">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Dis1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ex_1">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ex_1" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_30">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Dis1.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Dis1.text = ''&amp;#10;event.clearEvents('keyboard')" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Dis1.text = Dis1.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Dis1.text = Dis1.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Dis1.text = Dis1.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Dis1.text = Dis1.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Dis1.text = Dis1.text[:-1]&amp;#10;            Dis1.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Dis1.text = Dis1.text[:-1]&amp;#10;            Dis1.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Dis1.text = Dis1.text[:-1]&amp;#10;            Dis1.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Dis1.text = Dis1.text[:-1]&amp;#10;            Dis1.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Dis1.text = Dis1.text[:-1]&amp;#10;            Dis1.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Dis1.text = Dis1.text[:-1]&amp;#10;            Dis1.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Dis1.text = Dis1.text[:-1]&amp;#10;            Dis1.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Dis1.text = Dis1.text[:-1]&amp;#10;            Dis1.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Dis1.text = Dis1.text[:-1]&amp;#10;            Dis1.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Dis1.text = Dis1.text[:-1]&amp;#10;            Dis1.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Dis1.text = Dis1.text[:-1]&amp;#10;            Dis1.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Dis1.text = Dis1.text[:-1]&amp;#10;            Dis1.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Dis1.text = Dis1.text[:-1]&amp;#10;            Dis1.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Dis1.text = Dis1.text[:-5]&amp;#10;            Dis1.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Dis1.text = Dis1.text[:-9]&amp;#10;            Dis1.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Dis1.text = Dis1.text[:-1]&amp;#10;            Dis1.text+= ('Ц')&amp;#10;    elif 'x' in keys:&amp;#10;            Dis1.text = Dis1.text[:-1]&amp;#10;            Dis1.text+= (u'Ч')&amp;#10;    elif 'i' in keys:&amp;#10;            Dis1.text = Dis1.text[:-1]&amp;#10;            Dis1.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Dis1.text = Dis1.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Dis1.text = (Dis1.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Dis1.text = Dis1.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Dis1.text = (Dis1.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Dis1.text = (Dis1.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Dis1.text = Dis1.text.slice(0, (- 1));&amp;#10;        Dis1.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Dis1.text = Dis1.text.slice(0, (- 1));&amp;#10;            Dis1.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Dis1.text = Dis1.text.slice(0, (- 1));&amp;#10;                Dis1.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Dis1.text = Dis1.text.slice(0, (- 1));&amp;#10;                    Dis1.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Dis1.text = Dis1.text.slice(0, (- 1));&amp;#10;                        Dis1.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Dis1.text = Dis1.text.slice(0, (- 1));&amp;#10;                            Dis1.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Dis1.text = Dis1.text.slice(0, (- 1));&amp;#10;                                Dis1.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Dis1.text = Dis1.text.slice(0, (- 1));&amp;#10;                                    Dis1.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Dis1.text = Dis1.text.slice(0, (- 1));&amp;#10;                                        Dis1.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Dis1.text = Dis1.text.slice(0, (- 1));&amp;#10;                                            Dis1.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Dis1.text = Dis1.text.slice(0, (- 1));&amp;#10;                                                Dis1.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Dis1.text = Dis1.text.slice(0, (- 1));&amp;#10;                                                    Dis1.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Dis1.text = Dis1.text.slice(0, (- 1));&amp;#10;                                                        Dis1.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Dis1.text = Dis1.text.slice(0, (- 5));&amp;#10;                                                            Dis1.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Dis1.text = Dis1.text.slice(0, (- 9));&amp;#10;                                                                Dis1.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Dis1.text = Dis1.text.slice(0, (- 1));&amp;#10;                                                                    Dis1.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;x&quot;, keys)) {&amp;#10;                                                                        Dis1.text = Dis1.text.slice(0, (- 1));&amp;#10;                                                                        Dis1.text += &quot;\u0427&quot;;&amp;#10;                                                                    } else {&amp;#10;                                                                        if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                            Dis1.text = Dis1.text.slice(0, (- 1));&amp;#10;                                                                            Dis1.text += &quot;\u0428&quot;;&amp;#10;                                                                        }&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Dis1.text);&amp;#10;Remember_1.addData(&quot;Answer of Pax&quot;, Dis1.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Dis1.text)&amp;#10;Remember_1.addData('Answer of Pax', Dis1.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_30" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Ospan_4a">
      <PolygonComponent name="Bkg_1">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bkg_1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Stimuli_1">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Stimuli_1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$S1" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ext1">
        <Param name="allowedKeys" updates="constant" val="'0','1'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ext1" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Instruction_3"/>
    <Routine name="PrRemember_3c">
      <PolygonComponent name="B_7">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="B_7" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="I_6">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="I_6" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Display6">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Display6" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="E_6">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="E_6" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_17">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Display6.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Display6.text = ''&amp;#10;event.clearEvents('keyboard')" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Display6.text = Display6.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Display6.text = Display6.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Display6.text = Display6.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Display6.text = Display6.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Display6.text = Display6.text[:-1]&amp;#10;            Display6.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Display6.text = Display6.text[:-1]&amp;#10;            Display6.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Display6.text = Display6.text[:-1]&amp;#10;            Display6.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Display6.text = Display6.text[:-1]&amp;#10;            Display6.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Display6.text = Display6.text[:-1]&amp;#10;            Display6.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Display6.text = Display6.text[:-1]&amp;#10;            Display6.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Display6.text = Display6.text[:-1]&amp;#10;            Display6.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Display6.text = Display6.text[:-1]&amp;#10;            Display6.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Display6.text = Display6.text[:-1]&amp;#10;            Display6.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Display6.text = Display6.text[:-1]&amp;#10;            Display6.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Display6.text = Display6.text[:-1]&amp;#10;            Display6.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Display6.text = Display6.text[:-1]&amp;#10;            Display6.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Display6.text = Display6.text[:-1]&amp;#10;            Display6.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Display6.text = Display6.text[:-5]&amp;#10;            Display6.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Display6.text = Display6.text[:-9]&amp;#10;            Display6.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Display6.text = Display6.text[:-1]&amp;#10;            Display6.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Display6.text = Display6.text[:-1]&amp;#10;            Display6.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Display6.text = Display6.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Display6.text = (Display6.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Display6.text = Display6.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Display6.text = (Display6.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Display6.text = (Display6.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Display6.text = Display6.text.slice(0, (- 1));&amp;#10;        Display6.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Display6.text = Display6.text.slice(0, (- 1));&amp;#10;            Display6.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Display6.text = Display6.text.slice(0, (- 1));&amp;#10;                Display6.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Display6.text = Display6.text.slice(0, (- 1));&amp;#10;                    Display6.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Display6.text = Display6.text.slice(0, (- 1));&amp;#10;                        Display6.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Display6.text = Display6.text.slice(0, (- 1));&amp;#10;                            Display6.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Display6.text = Display6.text.slice(0, (- 1));&amp;#10;                                Display6.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Display6.text = Display6.text.slice(0, (- 1));&amp;#10;                                    Display6.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Display6.text = Display6.text.slice(0, (- 1));&amp;#10;                                        Display6.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Display6.text = Display6.text.slice(0, (- 1));&amp;#10;                                            Display6.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Display6.text = Display6.text.slice(0, (- 1));&amp;#10;                                                Display6.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Display6.text = Display6.text.slice(0, (- 1));&amp;#10;                                                    Display6.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Display6.text = Display6.text.slice(0, (- 1));&amp;#10;                                                        Display6.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Display6.text = Display6.text.slice(0, (- 5));&amp;#10;                                                            Display6.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Display6.text = Display6.text.slice(0, (- 9));&amp;#10;                                                                Display6.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Display6.text = Display6.text.slice(0, (- 1));&amp;#10;                                                                    Display6.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                        Display6.text = Display6.text.slice(0, (- 1));&amp;#10;                                                                        Display6.text += &quot;\u0428&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="Recall_6.addData(&quot;Answer of Pax&quot;, Display6.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="Recall_6.addData('Answer of Pax', Display6.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_17" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Practice_3c">
      <PolygonComponent name="Bckgr_6">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bckgr_6" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Practice_6">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Practice_6" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$P6" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Instr_6">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="Instr_6" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -.3)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="1 (верно) ----------- 0 (неверно)" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Exit_6">
        <Param name="allowedKeys" updates="constant" val="'0','1'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Exit_6" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_6">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="RT_list.append(Exit_6.rt);&amp;#10;Resp_list.append(Exit_6.keys);&amp;#10;console.log(Exit_6.rt);&amp;#10;console.log(Resp_list);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="RT_list.append(Exit_6.rt)&amp;#10;Resp_list.append(Exit_6.keys)&amp;#10;print(Exit_6.rt)&amp;#10;print(Resp_list)&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_6" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="PrRemember_3b">
      <PolygonComponent name="B_5">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="B_5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="I_5">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="I_5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Display5">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Display5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="E_5">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="E_5" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_16">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Display5.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Display5.text = ''&amp;#10;event.clearEvents('keyboard')" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Display5.text = Display5.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Display5.text = Display5.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Display5.text = Display5.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Display5.text = Display5.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Display5.text = Display5.text[:-1]&amp;#10;            Display5.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Display5.text = Display5.text[:-1]&amp;#10;            Display5.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Display5.text = Display5.text[:-1]&amp;#10;            Display5.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Display5.text = Display5.text[:-1]&amp;#10;            Display5.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Display5.text = Display5.text[:-1]&amp;#10;            Display5.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Display5.text = Display5.text[:-1]&amp;#10;            Display5.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Display5.text = Display5.text[:-1]&amp;#10;            Display5.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Display5.text = Display5.text[:-1]&amp;#10;            Display5.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Display5.text = Display5.text[:-1]&amp;#10;            Display5.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Display5.text = Display5.text[:-1]&amp;#10;            Display5.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Display5.text = Display5.text[:-1]&amp;#10;            Display5.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Display5.text = Display5.text[:-1]&amp;#10;            Display5.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Display5.text = Display5.text[:-1]&amp;#10;            Display5.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Display5.text = Display5.text[:-5]&amp;#10;            Display5.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Display5.text = Display5.text[:-9]&amp;#10;            Display5.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Display5.text = Display5.text[:-1]&amp;#10;            Display5.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Display5.text = Display5.text[:-1]&amp;#10;            Display5.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Display5.text = Display5.text[:-1]&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Display5.text = (Display5.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Display5.text = Display5.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Display5.text = (Display5.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Display5.text = (Display5.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Display5.text = Display5.text.slice(0, (- 1));&amp;#10;        Display5.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Display5.text = Display5.text.slice(0, (- 1));&amp;#10;            Display5.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Display5.text = Display5.text.slice(0, (- 1));&amp;#10;                Display5.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Display5.text = Display5.text.slice(0, (- 1));&amp;#10;                    Display5.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Display5.text = Display5.text.slice(0, (- 1));&amp;#10;                        Display5.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Display5.text = Display5.text.slice(0, (- 1));&amp;#10;                            Display5.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Display5.text = Display5.text.slice(0, (- 1));&amp;#10;                                Display5.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Display5.text = Display5.text.slice(0, (- 1));&amp;#10;                                    Display5.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Display5.text = Display5.text.slice(0, (- 1));&amp;#10;                                        Display5.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Display5.text = Display5.text.slice(0, (- 1));&amp;#10;                                            Display5.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Display5.text = Display5.text.slice(0, (- 1));&amp;#10;                                                Display5.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Display5.text = Display5.text.slice(0, (- 1));&amp;#10;                                                    Display5.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Display5.text = Display5.text.slice(0, (- 1));&amp;#10;                                                        Display5.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Display5.text = Display5.text.slice(0, (- 5));&amp;#10;                                                            Display5.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Display5.text = Display5.text.slice(0, (- 9));&amp;#10;                                                                Display5.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Display5.text = Display5.text.slice(0, (- 1));&amp;#10;                                                                    Display5.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                        Display5.text = Display5.text.slice(0, (- 1));&amp;#10;                                                                        Display5.text += &quot;\u0428&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="Recall_5.addData(&quot;Answer of Pax&quot;, Display5.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="Recall_5.addData('Answer of Pax', Display5.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_16" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Practice_3b">
      <PolygonComponent name="Bckgr_5">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bckgr_5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Practice_5">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Practice_5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$P5" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Instr_5">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="Instr_5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -.3)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="1 (верно) ----------- 0 (неверно)" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Exit_5">
        <Param name="allowedKeys" updates="constant" val="'0','1'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Exit_5" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_5">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="RT_list.append(Exit_5.rt);&amp;#10;Resp_list.append(Exit_5.keys);&amp;#10;console.log(Exit_5.rt);&amp;#10;console.log(Resp_list);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="RT_list.append(Exit_5.rt)&amp;#10;Resp_list.append(Exit_5.keys)&amp;#10;print(Exit_5.rt)&amp;#10;print(Resp_list)&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_5" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="PrRemember_3a">
      <PolygonComponent name="B_2">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="B_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="I_2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="I_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Display4">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Display4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="E_4">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="E_4" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_15">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Display4.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Display4.text = ''&amp;#10;event.clearEvents('keyboard')" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Display4.text = Display4.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Display4.text = Display4.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Display4.text = Display4.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Display4.text = Display4.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Display4.text = Display4.text[:-1]&amp;#10;            Display4.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Display4.text = Display4.text[:-1]&amp;#10;            Display4.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Display4.text = Display4.text[:-1]&amp;#10;            Display4.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Display4.text = Display4.text[:-1]&amp;#10;            Display4.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Display4.text = Display4.text[:-1]&amp;#10;            Display4.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Display4.text = Display4.text[:-1]&amp;#10;            Display4.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Display4.text = Display4.text[:-1]&amp;#10;            Display4.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Display4.text = Display4.text[:-1]&amp;#10;            Display4.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Display4.text = Display4.text[:-1]&amp;#10;            Display4.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Display4.text = Display4.text[:-1]&amp;#10;            Display4.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Display4.text = Display4.text[:-1]&amp;#10;            Display4.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Display4.text = Display4.text[:-1]&amp;#10;            Display4.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Display4.text = Display4.text[:-1]&amp;#10;            Display4.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Display4.text = Display4.text[:-5]&amp;#10;            Display4.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Display4.text = Display4.text[:-9]&amp;#10;            Display4.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Display4.text = Display4.text[:-1]&amp;#10;            Display4.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Display4.text = Display4.text[:-1]&amp;#10;            Display4.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Display4.text = Display4.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Display4.text = (Display4.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Display4.text = Display4.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Display4.text = (Display4.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Display4.text = (Display4.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Display4.text = Display4.text.slice(0, (- 1));&amp;#10;        Display4.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Display4.text = Display4.text.slice(0, (- 1));&amp;#10;            Display4.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Display4.text = Display4.text.slice(0, (- 1));&amp;#10;                Display4.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Display4.text = Display4.text.slice(0, (- 1));&amp;#10;                    Display4.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Display4.text = Display4.text.slice(0, (- 1));&amp;#10;                        Display4.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Display4.text = Display4.text.slice(0, (- 1));&amp;#10;                            Display4.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Display4.text = Display4.text.slice(0, (- 1));&amp;#10;                                Display4.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Display4.text = Display4.text.slice(0, (- 1));&amp;#10;                                    Display4.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Display4.text = Display4.text.slice(0, (- 1));&amp;#10;                                        Display4.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Display4.text = Display4.text.slice(0, (- 1));&amp;#10;                                            Display4.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Display4.text = Display4.text.slice(0, (- 1));&amp;#10;                                                Display4.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Display4.text = Display4.text.slice(0, (- 1));&amp;#10;                                                    Display4.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Display4.text = Display4.text.slice(0, (- 1));&amp;#10;                                                        Display4.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Display4.text = Display4.text.slice(0, (- 5));&amp;#10;                                                            Display4.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Display4.text = Display4.text.slice(0, (- 9));&amp;#10;                                                                Display4.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Display4.text = Display4.text.slice(0, (- 1));&amp;#10;                                                                    Display4.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                        Display4.text = Display4.text.slice(0, (- 1));&amp;#10;                                                                        Display4.text += &quot;\u0428&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="Recall_4.addData(&quot;Answer of Pax&quot;, Display4.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="Recall_4.addData('Answer of Pax', Display4.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_15" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Practice_3a">
      <PolygonComponent name="Bckgr_4">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bckgr_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Practice_4">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Practice_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$P4" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Instr_4">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="Instr_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -.3)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="1 (верно) ----------- 0 (неверно)" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Exit_4">
        <Param name="allowedKeys" updates="constant" val="'0','1'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Exit_4" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_4">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="RT_list.append(Exit_4.rt);&amp;#10;Resp_list.append(Exit_4.keys);&amp;#10;console.log(Exit_4.rt);&amp;#10;console.log(Resp_list);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="RT_list.append(Exit_4.rt)&amp;#10;Resp_list.append(Exit_4.keys)&amp;#10;print(Exit_4.rt)&amp;#10;print(Resp_list)&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_4" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="PrRemember_2c">
      <PolygonComponent name="B_1">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="B_1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="In_1">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="In_1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="code_14">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Display3.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Display3.text = ''&amp;#10;event.clearEvents('keyboard')" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Display3.text = Display3.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Display3.text = Display3.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Display3.text = Display3.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Display3.text = Display3.text + keys[0]&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Display3.text = Display3.text[:-1]&amp;#10;            Display3.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Display3.text = Display3.text[:-1]&amp;#10;            Display3.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Display3.text = Display3.text[:-1]&amp;#10;            Display3.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Display3.text = Display3.text[:-1]&amp;#10;            Display3.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Display3.text = Display3.text[:-1]&amp;#10;            Display3.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Display3.text = Display3.text[:-1]&amp;#10;            Display3.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Display3.text = Display3.text[:-1]&amp;#10;            Display3.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Display3.text = Display3.text[:-1]&amp;#10;            Display3.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Display3.text = Display3.text[:-1]&amp;#10;            Display3.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Display3.text = Display3.text[:-1]&amp;#10;            Display3.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Display3.text = Display3.text[:-1]&amp;#10;            Display3.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Display3.text = Display3.text[:-1]&amp;#10;            Display3.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Display3.text = Display3.text[:-1]&amp;#10;            Display3.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Display3.text = Display3.text[:-5]&amp;#10;            Display3.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Display3.text = Display3.text[:-9]&amp;#10;            Display3.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Display3.text = Display3.text[:-1]&amp;#10;            Display3.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Display3.text = Display3.text[:-1]&amp;#10;            Display3.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Display3.text = Display3.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Display3.text = (Display3.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Display3.text = Display3.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Display3.text = (Display3.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Display3.text = (Display3.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Display3.text = Display3.text.slice(0, (- 1));&amp;#10;        Display3.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Display3.text = Display3.text.slice(0, (- 1));&amp;#10;            Display3.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Display3.text = Display3.text.slice(0, (- 1));&amp;#10;                Display3.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Display3.text = Display3.text.slice(0, (- 1));&amp;#10;                    Display3.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Display3.text = Display3.text.slice(0, (- 1));&amp;#10;                        Display3.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Display3.text = Display3.text.slice(0, (- 1));&amp;#10;                            Display3.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Display3.text = Display3.text.slice(0, (- 1));&amp;#10;                                Display3.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Display3.text = Display3.text.slice(0, (- 1));&amp;#10;                                    Display3.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Display3.text = Display3.text.slice(0, (- 1));&amp;#10;                                        Display3.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Display3.text = Display3.text.slice(0, (- 1));&amp;#10;                                            Display3.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Display3.text = Display3.text.slice(0, (- 1));&amp;#10;                                                Display3.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Display3.text = Display3.text.slice(0, (- 1));&amp;#10;                                                    Display3.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Display3.text = Display3.text.slice(0, (- 1));&amp;#10;                                                        Display3.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Display3.text = Display3.text.slice(0, (- 5));&amp;#10;                                                            Display3.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Display3.text = Display3.text.slice(0, (- 9));&amp;#10;                                                                Display3.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Display3.text = Display3.text.slice(0, (- 1));&amp;#10;                                                                    Display3.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                        Display3.text = Display3.text.slice(0, (- 1));&amp;#10;                                                                        Display3.text += &quot;\u0428&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="Recall_3.addData(&quot;Answer of Pax&quot;, Display3.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="Recall_3.addData('Answer of Pax', Display3.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_14" valType="code"/>
      </CodeComponent>
      <TextComponent name="Display3">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Display3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="E_3">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="E_3" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Practice_2c">
      <PolygonComponent name="Bckgr_3">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bckgr_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Practice_3">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Practice_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$P3" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Instr_3">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="Instr_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -.3)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="1 (верно) ----------- 0 (неверно)" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Exit_3">
        <Param name="allowedKeys" updates="constant" val="'1','0'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Exit_3" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_3">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="RT_list.append(Exit_3.rt);&amp;#10;Resp_list.append(Exit_3.keys);&amp;#10;console.log(Exit_3.rt);&amp;#10;console.log(Resp_list);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="RT_list.append(Exit_3.rt)&amp;#10;Resp_list.append(Exit_3.keys)&amp;#10;print(Exit_3.rt)&amp;#10;print(Resp_list)&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_3" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="PrRemember_2b">
      <PolygonComponent name="Background___2">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Background___2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5, 5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Instr2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Instr2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="code_13">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Display2.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Display2.text = ''&amp;#10;event.clearEvents('keyboard')" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Display2.text = Display2.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Display2.text = Display2.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Display2.text = Display2.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Display2.text = Display2.text + keys[0]&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Display2.text = Display2.text[:-1]&amp;#10;            Display2.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Display2.text = Display2.text[:-1]&amp;#10;            Display2.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Display2.text = Display2.text[:-1]&amp;#10;            Display2.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Display2.text = Display2.text[:-1]&amp;#10;            Display2.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Display2.text = Display2.text[:-1]&amp;#10;            Display2.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Display2.text = Display2.text[:-1]&amp;#10;            Display2.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Display2.text = Display2.text[:-1]&amp;#10;            Display2.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Display2.text = Display2.text[:-1]&amp;#10;            Display2.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Display2.text = Display2.text[:-1]&amp;#10;            Display2.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Display2.text = Display2.text[:-1]&amp;#10;            Display2.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Display2.text = Display2.text[:-1]&amp;#10;            Display2.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Display2.text = Display2.text[:-1]&amp;#10;            Display2.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Display2.text = Display2.text[:-1]&amp;#10;            Display2.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Display2.text = Display2.text[:-5]&amp;#10;            Display2.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Display2.text = Display2.text[:-9]&amp;#10;            Display2.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Display2.text = Display2.text[:-1]&amp;#10;            Display2.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Display2.text = Display2.text[:-1]&amp;#10;            Display2.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Display2.text = Display2.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Display2.text = (Display2.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Display2.text = Display2.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Display2.text = (Display2.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Display2.text = (Display2.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Display2.text = Display2.text.slice(0, (- 1));&amp;#10;        Display2.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Display2.text = Display2.text.slice(0, (- 1));&amp;#10;            Display2.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Display2.text = Display2.text.slice(0, (- 1));&amp;#10;                Display2.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Display2.text = Display2.text.slice(0, (- 1));&amp;#10;                    Display2.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Display2.text = Display2.text.slice(0, (- 1));&amp;#10;                        Display2.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Display2.text = Display2.text.slice(0, (- 1));&amp;#10;                            Display2.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Display2.text = Display2.text.slice(0, (- 1));&amp;#10;                                Display2.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Display2.text = Display2.text.slice(0, (- 1));&amp;#10;                                    Display2.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Display2.text = Display2.text.slice(0, (- 1));&amp;#10;                                        Display2.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Display2.text = Display2.text.slice(0, (- 1));&amp;#10;                                            Display2.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Display2.text = Display2.text.slice(0, (- 1));&amp;#10;                                                Display2.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Display2.text = Display2.text.slice(0, (- 1));&amp;#10;                                                    Display2.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Display2.text = Display2.text.slice(0, (- 1));&amp;#10;                                                        Display2.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Display2.text = Display2.text.slice(0, (- 5));&amp;#10;                                                            Display2.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Display2.text = Display2.text.slice(0, (- 9));&amp;#10;                                                                Display2.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Display2.text = Display2.text.slice(0, (- 1));&amp;#10;                                                                    Display2.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                        Display2.text = Display2.text.slice(0, (- 1));&amp;#10;                                                                        Display2.text += &quot;\u0428&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="Recall_2.addData(&quot;Answer of Pax&quot;, Display2.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="Recall_2.addData('Answer of Pax', Display2.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_13" valType="code"/>
      </CodeComponent>
      <TextComponent name="Display2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Display2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="ExitButton2">
        <Param name="allowedKeys" updates="constant" val="'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="ExitButton2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="text_3">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -.25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Нажмите &quot;enter&quot; после того, как вспомнили буквы." valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="Practice_2b">
      <PolygonComponent name="Background__2">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Background__2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5, 5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Practice__2a">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Practice__2a" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$P2" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Instr_2a">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="Instr_2a" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -.3)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="1 (верно) ----------- 0 (неверно)" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_2">
        <Param name="allowedKeys" updates="constant" val="'0','1'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_2">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="RT_list.append(key_resp_2.rt);&amp;#10;Resp_list.append(key_resp_2.keys);&amp;#10;console.log(key_resp_2.rt);&amp;#10;console.log(Resp_list);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="RT_list.append(key_resp_2.rt)&amp;#10;Resp_list.append(key_resp_2.keys)&amp;#10;print(key_resp_2.rt)&amp;#10;print(Resp_list)&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_2" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="PrRemember_2a">
      <PolygonComponent name="Background_2">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Background_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5, 5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Instr1">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Instr1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="code_12">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Display.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Display.text = ''&amp;#10;event.clearEvents('keyboard')" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Display.text = Display.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Display.text = Display.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Display.text = Display.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Display.text = Display.text + keys[0]&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Display.text = Display.text[:-1]&amp;#10;            Display.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Display.text = Display.text[:-1]&amp;#10;            Display.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Display.text = Display.text[:-1]&amp;#10;            Display.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Display.text = Display.text[:-1]&amp;#10;            Display.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Display.text = Display.text[:-1]&amp;#10;            Display.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Display.text = Display.text[:-1]&amp;#10;            Display.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Display.text = Display.text[:-1]&amp;#10;            Display.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Display.text = Display.text[:-1]&amp;#10;            Display.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Display.text = Display.text[:-1]&amp;#10;            Display.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Display.text = Display.text[:-1]&amp;#10;            Display.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Display.text = Display.text[:-1]&amp;#10;            Display.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Display.text = Display.text[:-1]&amp;#10;            Display.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Display.text = Display.text[:-1]&amp;#10;            Display.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Display.text = Display.text[:-5]&amp;#10;            Display.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Display.text = Display.text[:-9]&amp;#10;            Display.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Display.text = Display.text[:-1]&amp;#10;            Display.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Display.text = Display.text[:-1]&amp;#10;            Display.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Display.text = Display.text[:-1]&amp;#10;&amp;#10;n = Display.text&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Display.text = (Display.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Display.text = Display.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Display.text = (Display.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Display.text = (Display.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Display.text = Display.text.slice(0, (- 1));&amp;#10;        Display.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Display.text = Display.text.slice(0, (- 1));&amp;#10;            Display.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Display.text = Display.text.slice(0, (- 1));&amp;#10;                Display.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Display.text = Display.text.slice(0, (- 1));&amp;#10;                    Display.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Display.text = Display.text.slice(0, (- 1));&amp;#10;                        Display.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Display.text = Display.text.slice(0, (- 1));&amp;#10;                            Display.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Display.text = Display.text.slice(0, (- 1));&amp;#10;                                Display.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Display.text = Display.text.slice(0, (- 1));&amp;#10;                                    Display.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Display.text = Display.text.slice(0, (- 1));&amp;#10;                                        Display.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Display.text = Display.text.slice(0, (- 1));&amp;#10;                                            Display.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Display.text = Display.text.slice(0, (- 1));&amp;#10;                                                Display.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Display.text = Display.text.slice(0, (- 1));&amp;#10;                                                    Display.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Display.text = Display.text.slice(0, (- 1));&amp;#10;                                                        Display.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Display.text = Display.text.slice(0, (- 5));&amp;#10;                                                            Display.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Display.text = Display.text.slice(0, (- 9));&amp;#10;                                                                Display.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Display.text = Display.text.slice(0, (- 1));&amp;#10;                                                                    Display.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                        Display.text = Display.text.slice(0, (- 1));&amp;#10;                                                                        Display.text += &quot;\u0428&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;n = Display.text;&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="Recall_1.addData(&quot;Answer of Pax&quot;, n);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="Recall_1.addData('Answer of Pax', n)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_12" valType="code"/>
      </CodeComponent>
      <TextComponent name="Display">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Display" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Exit1">
        <Param name="allowedKeys" updates="constant" val="'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Exit1" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="text_2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -0.25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Нажмите &quot;enter&quot; после того, как вспомнили буквы." valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="CodePart"/>
    <Routine name="Time_Calculation"/>
    <Routine name="Instruction_2">
      <PolygonComponent name="Background">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Background" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Instruction">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="Instruction" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Мы рассчитали для вас персональное время выполнения задач, основываясь на тренировочных упражнениях. Это сделает наш эксперимент для вас  максимально комфортным. Помните, что в эксперименте важны и правильность решения задач, и количество букв, которые вы запомните. &amp;#10;&amp;#10;Если вы считаете, что готовы приступить к эксперименту, нажмите клавишу &quot;Г&quot;. &amp;#10;Если вам необходимы 6 дополнительных разминочных блока, нажмите &quot;P&quot;. " valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Decision">
        <Param name="allowedKeys" updates="constant" val="'u','h'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Decision" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="DecisionToStart">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if ((Decision.keys === &quot;h&quot;)) {&amp;#10;    DoPrac = 1;&amp;#10;}&amp;#10;if ((Decision.keys === &quot;u&quot;)) {&amp;#10;    DoPrac = 0;&amp;#10;    DoExp = 1;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="if(Decision.keys == 'h'):&amp;#10;    DoPrac = 1&amp;#10;&amp;#10;if(Decision.keys == 'u'):&amp;#10;    DoPrac = 0&amp;#10;    DoExp = 1&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="DecisionToStart" valType="code"/>
      </CodeComponent>
      <CodeComponent name="TimeAv">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="console.log(&quot;Here the calculation starts:&quot;);&amp;#10;console.log(&quot;responses: &quot;, Resp_list);&amp;#10;console.log(&quot;corr responses: &quot;, Correct_list);&amp;#10;console.log(&quot;time: &quot;, RT_list);&amp;#10;Compar = [];&amp;#10;i = 0;&amp;#10;for (var i = 0, _pj_a = 52; (i &lt; _pj_a); i += 1) {&amp;#10;    if ((Resp_list[i] === Correct_list[i])) {&amp;#10;        Compar.append(1);&amp;#10;        i = (i + 1);&amp;#10;    } else {&amp;#10;        Compar.append(0);&amp;#10;        i = (i + 1);&amp;#10;    }&amp;#10;}&amp;#10;console.log(&quot;Comparison list: &quot;, Compar);&amp;#10;Time = [];&amp;#10;for (var i = 0, _pj_a = 52; (i &lt; _pj_a); i += 1) {&amp;#10;    n = (RT_list[i] * Compar[i]);&amp;#10;    Time.append(n);&amp;#10;    i = (i + 1);&amp;#10;}&amp;#10;console.log(&quot;timing without filter =&quot;, Time);&amp;#10;Time2 = [];&amp;#10;for (var i = 0, _pj_a = Time.length; (i &lt; _pj_a); i += 1) {&amp;#10;    if ((Time[i] === 0.0)) {&amp;#10;        i = (i + 1);&amp;#10;    } else {&amp;#10;        Time2.append(Time[i]);&amp;#10;    }&amp;#10;}&amp;#10;console.log(&quot;real timing with filter = &quot;, Time2);&amp;#10;rt = np.array(Time2);&amp;#10;fcm = rt.mean();&amp;#10;fcs = rt.std();&amp;#10;a = fcm;&amp;#10;b = fcs;&amp;#10;c = (a + b);&amp;#10;console.log(&quot;av =&quot;, a);&amp;#10;console.log(&quot;sd = &quot;, b);&amp;#10;console.log(&quot;trial time =&quot;, c);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="#print('responses = ', Resp_list)&amp;#10;#print('correct responses = ', Correct_list)&amp;#10;#print('timing = ', RT_list)&amp;#10;&amp;#10;print('Here the calculation starts:')&amp;#10;#Printing all the data received from practice trials&amp;#10;print('responses: ', Resp_list)&amp;#10;print('corr responses: ', Correct_list)&amp;#10;print('time: ', RT_list)&amp;#10;&amp;#10;#Compating responses with correst responses (receive a new list)&amp;#10;Compar = []&amp;#10;i = 0&amp;#10;for i in range(52):&amp;#10;    if Resp_list[i] == Correct_list[i]:&amp;#10;        Compar.append(1)&amp;#10;        i = i + 1&amp;#10;    else:&amp;#10;        Compar.append(0)&amp;#10;        i = i + 1&amp;#10;        &amp;#10;        &amp;#10;&amp;#10;print('Comparison list: ', Compar)&amp;#10;&amp;#10;#Creating a list of timing for only correct solution of math problem&amp;#10;Time = []&amp;#10;for i in range(52):&amp;#10;    n = RT_list[i] * Compar[i]&amp;#10;    Time.append(n)&amp;#10;    i = i + 1&amp;#10;&amp;#10;print('timing without filter =',Time)&amp;#10;&amp;#10;#Filtering list from null data&amp;#10;Time2 = []&amp;#10;for i in range(len(Time)):&amp;#10;    if Time[i] == 0.0:&amp;#10;        i = i + 1&amp;#10;    else:&amp;#10;        Time2.append(Time[i])&amp;#10;&amp;#10;print('real timing with filter = ', Time2)&amp;#10;&amp;#10;rt = np.array(Time2)&amp;#10;fcm = rt.mean()&amp;#10;fcs = rt.std()&amp;#10;&amp;#10;a = fcm &amp;#10;b = fcs &amp;#10;c = a+b&amp;#10;print('av =', a)&amp;#10;print('sd = ', b)&amp;#10;print('trial time =', c)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="Practice_1.addData(&quot;RT_for_exp&quot;, c);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="Practice_1.addData('RT_for_exp', c)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="TimeAv" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Codepart_2">
      <PolygonComponent name="bkac">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="bkac" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Instro">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="Instro" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Сейчас мы попробуем с вами потренироваться в решении данного теста. &amp;#10;Вам будет предложено 12 разминочных блоков возрастающей сложности. Если одной практики вам будет недостаточно, у вас будет возможность решить еще 6 дополнительных разминочных блоков. &amp;#10;Сложность каждой задачи варьируется от 2 до 7 уравнений/букв. &amp;#10;&amp;#10;Если вы готовы продолжить, нажмите &quot;enter&quot;." valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Start">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Start" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Instruction_1">
      <PolygonComponent name="WhiteBCK_0_0">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="WhiteBCK_0_0" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5, 5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Instructions">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="code"/>
        <Param name="name" updates="None" val="Instructions" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вы будете выполнять тест на рабочую память.&amp;#10; &amp;#10;На экране вам будут продемонстрированы математический пример и буква: &amp;#10;«(5 x 1) - 1 = 4 ? A».&amp;#10;&amp;#10;Вам необходимо ответить, правильно ли решен пример или нет. Если вы считаете, что он решен правильно - нажмите клавишу &quot;1&quot;. Если считаете, что решение неверное - нажмите &quot;0&quot;. Во время решения вам также необходимо запомнить буквы, которые находятся в конце примеров. После выполнения одного блока примеров, мы попросим вас вспомнить все эти буквы. &amp;#10;&amp;#10;Помните, что при этом, важно правильно решить математический пример. &amp;#10;&amp;#10;Если вы готовы продолжить - нажмите &quot;enter&quot;." valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Instruction_stop">
        <Param name="allowedKeys" updates="constant" val="'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Instruction_stop" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Welcome_screen">
      <PolygonComponent name="WhiteBCK_0">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="WhiteBCK_0" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5, 5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="WelcomeText">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="WelcomeText" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Здравствуйте! &amp;#10;Сейчас вы станете участником интересного эксперимента. &amp;#10;Если вы готовы продолжить - нажмите &quot;enter&quot;." valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Welcome_screen_stop">
        <Param name="allowedKeys" updates="constant" val="'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Welcome_screen_stop" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Pr_2_Remember_2a">
      <PolygonComponent name="B2_1">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="B2_1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="I2_2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="I2_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Display2a">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Display2a" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ext2">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ext2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_24">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Display2a.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Display2a.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Display2a.text = Display2a.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Display2a.text = Display2a.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Display2a.text = Display2a.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Display2a.text = Display2a.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Display2a.text = Display2a.text[:-1]&amp;#10;            Display2a.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Display2a.text = Display2a.text[:-1]&amp;#10;            Display2a.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Display2a.text = Display2a.text[:-1]&amp;#10;            Display2a.text+= (u'Н')&amp;#10;    elif 'x' in keys:&amp;#10;            Display2a.text = Display2a.text[:-1]&amp;#10;            Display2a.text+= (u'Ч')&amp;#10;    elif 'r' in keys:&amp;#10;            Display2a.text = Display2a.text[:-1]&amp;#10;            Display2a.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Display2a.text = Display2a.text[:-1]&amp;#10;            Display2a.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Display2a.text = Display2a.text[:-1]&amp;#10;            Display2a.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Display2a.text = Display2a.text[:-1]&amp;#10;            Display2a.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Display2a.text = Display2a.text[:-1]&amp;#10;            Display2a.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Display2a.text = Display2a.text[:-1]&amp;#10;            Display2a.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Display2a.text = Display2a.text[:-1]&amp;#10;            Display2a.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Display2a.text = Display2a.text[:-1]&amp;#10;            Display2a.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Display2a.text = Display2a.text[:-1]&amp;#10;            Display2a.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Display2a.text = Display2a.text[:-1]&amp;#10;            Display2a.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Display2a.text = Display2a.text[:-5]&amp;#10;            Display2a.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Display2a.text = Display2a.text[:-9]&amp;#10;            Display2a.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Display2a.text = Display2a.text[:-1]&amp;#10;            Display2a.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Display2a.text = Display2a.text[:-1]&amp;#10;            Display2a.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Display2a.text = Display2a.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Display2a.text = (Display2a.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Display2a.text = Display2a.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Display2a.text = (Display2a.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Display2a.text = (Display2a.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Display2a.text = Display2a.text.slice(0, (- 1));&amp;#10;        Display2a.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Display2a.text = Display2a.text.slice(0, (- 1));&amp;#10;            Display2a.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Display2a.text = Display2a.text.slice(0, (- 1));&amp;#10;                Display2a.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;x&quot;, keys)) {&amp;#10;                    Display2a.text = Display2a.text.slice(0, (- 1));&amp;#10;                    Display2a.text += &quot;\u0427&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                        Display2a.text = Display2a.text.slice(0, (- 1));&amp;#10;                        Display2a.text += &quot;\u041a&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                            Display2a.text = Display2a.text.slice(0, (- 1));&amp;#10;                            Display2a.text += &quot;\u0420&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                                Display2a.text = Display2a.text.slice(0, (- 1));&amp;#10;                                Display2a.text += &quot;\u0412&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                    Display2a.text = Display2a.text.slice(0, (- 1));&amp;#10;                                    Display2a.text += &quot;\u041b&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                        Display2a.text = Display2a.text.slice(0, (- 1));&amp;#10;                                        Display2a.text += &quot;\u0417&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                            Display2a.text = Display2a.text.slice(0, (- 1));&amp;#10;                                            Display2a.text += &quot;\u0421&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                                Display2a.text = Display2a.text.slice(0, (- 1));&amp;#10;                                                Display2a.text += &quot;\u0422&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                    Display2a.text = Display2a.text.slice(0, (- 1));&amp;#10;                                                    Display2a.text += &quot;\u041f&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                        Display2a.text = Display2a.text.slice(0, (- 1));&amp;#10;                                                        Display2a.text += &quot;\u0414&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                            Display2a.text = Display2a.text.slice(0, (- 1));&amp;#10;                                                            Display2a.text += &quot;\u0424&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                                Display2a.text = Display2a.text.slice(0, (- 5));&amp;#10;                                                                Display2a.text += &quot;\u0411&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                    Display2a.text = Display2a.text.slice(0, (- 9));&amp;#10;                                                                    Display2a.text += &quot;\u0416&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                        Display2a.text = Display2a.text.slice(0, (- 1));&amp;#10;                                                                        Display2a.text += &quot;\u0426&quot;;&amp;#10;                                                                    } else {&amp;#10;                                                                        if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                            Display2a.text = Display2a.text.slice(0, (- 1));&amp;#10;                                                                            Display2a.text += &quot;\u0428&quot;;&amp;#10;                                                                        }&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Display2a.text);&amp;#10;thisExp.addData(&quot;typedWord&quot;, Display2a.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Display2a.text)&amp;#10;thisExp.addData(&quot;typedWord&quot;, Display2a.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_24" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Pr_2_Rememember_2b">
      <PolygonComponent name="B2_2">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="B2_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="I2_1">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="I2_1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Display1a">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Display1a" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="E2_1">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="E2_1" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_25">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Display1a.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Display1a.text = ''&amp;#10;event.clearEvents('keyboard')" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Display1a.text = Display1a.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Display1a.text = Display1a.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Display1a.text = Display1a.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Display1a.text = Display1a.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Display1a.text = Display1a.text[:-1]&amp;#10;            Display1a.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Display1a.text = Display1a.text[:-1]&amp;#10;            Display1a.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Display1a.text = Display1a.text[:-1]&amp;#10;            Display1a.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Display1a.text = Display1a.text[:-1]&amp;#10;            Display1a.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Display1a.text = Display1a.text[:-1]&amp;#10;            Display1a.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Display1a.text = Display1a.text[:-1]&amp;#10;            Display1a.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Display1a.text = Display1a.text[:-1]&amp;#10;            Display1a.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Display1a.text = Display1a.text[:-1]&amp;#10;            Display1a.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Display1a.text = Display1a.text[:-1]&amp;#10;            Display1a.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Display1a.text = Display1a.text[:-1]&amp;#10;            Display1a.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Display1a.text = Display1a.text[:-1]&amp;#10;            Display1a.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Display1a.text = Display1a.text[:-1]&amp;#10;            Display1a.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Display1a.text = Display1a.text[:-1]&amp;#10;            Display1a.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Display1a.text = Display1a.text[:-5]&amp;#10;            Display1a.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Display1a.text = Display1a.text[:-9]&amp;#10;            Display1a.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Display1a.text = Display1a.text[:-1]&amp;#10;            Display1a.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Display1a.text = Display1a.text[:-1]&amp;#10;            Display1a.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Display1a.text = Display1a.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Display1a.text = (Display1a.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Display1a.text = Display1a.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Display1a.text = (Display1a.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Display1a.text = (Display1a.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Display1a.text = Display1a.text.slice(0, (- 1));&amp;#10;        Display1a.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Display1a.text = Display1a.text.slice(0, (- 1));&amp;#10;            Display1a.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Display1a.text = Display1a.text.slice(0, (- 1));&amp;#10;                Display1a.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Display1a.text = Display1a.text.slice(0, (- 1));&amp;#10;                    Display1a.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Display1a.text = Display1a.text.slice(0, (- 1));&amp;#10;                        Display1a.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Display1a.text = Display1a.text.slice(0, (- 1));&amp;#10;                            Display1a.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Display1a.text = Display1a.text.slice(0, (- 1));&amp;#10;                                Display1a.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Display1a.text = Display1a.text.slice(0, (- 1));&amp;#10;                                    Display1a.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Display1a.text = Display1a.text.slice(0, (- 1));&amp;#10;                                        Display1a.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Display1a.text = Display1a.text.slice(0, (- 1));&amp;#10;                                            Display1a.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Display1a.text = Display1a.text.slice(0, (- 1));&amp;#10;                                                Display1a.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Display1a.text = Display1a.text.slice(0, (- 1));&amp;#10;                                                    Display1a.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Display1a.text = Display1a.text.slice(0, (- 1));&amp;#10;                                                        Display1a.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Display1a.text = Display1a.text.slice(0, (- 5));&amp;#10;                                                            Display1a.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Display1a.text = Display1a.text.slice(0, (- 9));&amp;#10;                                                                Display1a.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Display1a.text = Display1a.text.slice(0, (- 1));&amp;#10;                                                                    Display1a.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                        Display1a.text = Display1a.text.slice(0, (- 1));&amp;#10;                                                                        Display1a.text += &quot;\u0428&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Display1a.text);&amp;#10;thisExp.addData(&quot;typedWord&quot;, Display1a.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Display1a.text)&amp;#10;thisExp.addData(&quot;typedWord&quot;, Display1a.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_25" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Pr_2_Remember_2c">
      <PolygonComponent name="B2_3">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="B2_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="I2_3">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="I2_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Display3a">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Display3a" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="E2_3">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="E2_3" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_26">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Display3a.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Display3a.text = ''&amp;#10;event.clearEvents('keyboard')" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Display3a.text = Display3a.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Display3a.text = Display3a.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Display3a.text = Display3a.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Display3a.text = Display3a.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Display3a.text = Display3a.text[:-1]&amp;#10;            Display3a.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Display3a.text = Display3a.text[:-1]&amp;#10;            Display3a.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Display3a.text = Display3a.text[:-1]&amp;#10;            Display3a.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Display3a.text = Display3a.text[:-1]&amp;#10;            Display3a.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Display3a.text = Display3a.text[:-1]&amp;#10;            Display3a.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Display3a.text = Display3a.text[:-1]&amp;#10;            Display3a.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Display3a.text = Display3a.text[:-1]&amp;#10;            Display3a.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Display3a.text = Display3a.text[:-1]&amp;#10;            Display3a.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Display3a.text = Display3a.text[:-1]&amp;#10;            Display3a.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Display3a.text = Display3a.text[:-1]&amp;#10;            Display3a.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Display3a.text = Display3a.text[:-1]&amp;#10;            Display3a.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Display3a.text = Display3a.text[:-1]&amp;#10;            Display3a.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Display3a.text = Display3a.text[:-1]&amp;#10;            Display3a.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Display3a.text = Display3a.text[:-5]&amp;#10;            Display3a.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Display3a.text = Display3a.text[:-9]&amp;#10;            Display3a.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Display3a.text = Display3a.text[:-1]&amp;#10;            Display3a.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Display3a.text = Display3a.text[:-1]&amp;#10;            Display3a.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Display3a.text = Display3a.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Display3a.text = (Display3a.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Display3a.text = Display3a.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Display3a.text = (Display3a.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Display3a.text = (Display3a.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Display3a.text = Display3a.text.slice(0, (- 1));&amp;#10;        Display3a.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Display3a.text = Display3a.text.slice(0, (- 1));&amp;#10;            Display3a.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Display3a.text = Display3a.text.slice(0, (- 1));&amp;#10;                Display3a.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Display3a.text = Display3a.text.slice(0, (- 1));&amp;#10;                    Display3a.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Display3a.text = Display3a.text.slice(0, (- 1));&amp;#10;                        Display3a.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Display3a.text = Display3a.text.slice(0, (- 1));&amp;#10;                            Display3a.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Display3a.text = Display3a.text.slice(0, (- 1));&amp;#10;                                Display3a.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Display3a.text = Display3a.text.slice(0, (- 1));&amp;#10;                                    Display3a.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Display3a.text = Display3a.text.slice(0, (- 1));&amp;#10;                                        Display3a.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Display3a.text = Display3a.text.slice(0, (- 1));&amp;#10;                                            Display3a.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Display3a.text = Display3a.text.slice(0, (- 1));&amp;#10;                                                Display3a.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Display3a.text = Display3a.text.slice(0, (- 1));&amp;#10;                                                    Display3a.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Display3a.text = Display3a.text.slice(0, (- 1));&amp;#10;                                                        Display3a.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Display3a.text = Display3a.text.slice(0, (- 5));&amp;#10;                                                            Display3a.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Display3a.text = Display3a.text.slice(0, (- 9));&amp;#10;                                                                Display3a.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Display3a.text = Display3a.text.slice(0, (- 1));&amp;#10;                                                                    Display3a.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                        Display3a.text = Display3a.text.slice(0, (- 1));&amp;#10;                                                                        Display3a.text += &quot;\u0428&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Display3a.text);&amp;#10;thisExp.addData(&quot;typedWord&quot;, Display3a.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Display3a.text)&amp;#10;thisExp.addData(&quot;typedWord&quot;, Display3a.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_26" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Pr_2_Remember_3a">
      <PolygonComponent name="B2_4">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="B2_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="I2_4">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="I2_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Display4a">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Display4a" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="E2_4">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="E2_4" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_27">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Display4a.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Display4a.text = ''&amp;#10;event.clearEvents('keyboard')" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Display4a.text = Display4a.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Display4a.text = Display4a.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Display4a.text = Display4a.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Display4a.text = Display4a.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Display4a.text = Display4a.text[:-1]&amp;#10;            Display4a.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Display4a.text = Display4a.text[:-1]&amp;#10;            Display4a.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Display4a.text = Display4a.text[:-1]&amp;#10;            Display4a.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Display4a.text = Display4a.text[:-1]&amp;#10;            Display4a.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Display4a.text = Display4a.text[:-1]&amp;#10;            Display4a.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Display4a.text = Display4a.text[:-1]&amp;#10;            Display4a.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Display4a.text = Display4a.text[:-1]&amp;#10;            Display4a.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Display4a.text = Display4a.text[:-1]&amp;#10;            Display4a.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Display4a.text = Display4a.text[:-1]&amp;#10;            Display4a.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Display4a.text = Display4a.text[:-1]&amp;#10;            Display4a.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Display4a.text = Display4a.text[:-1]&amp;#10;            Display4a.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Display4a.text = Display4a.text[:-1]&amp;#10;            Display4a.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Display4a.text = Display4a.text[:-1]&amp;#10;            Display4a.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Display4a.text = Display4a.text[:-5]&amp;#10;            Display4a.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Display4a.text = Display4a.text[:-9]&amp;#10;            Display4a.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Display4a.text = Display4a.text[:-1]&amp;#10;            Display4a.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Display4a.text = Display4a.text[:-1]&amp;#10;            Display4a.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Display4a.text = Display4a.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Display4a.text = (Display4a.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Display4a.text = Display4a.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Display4a.text = (Display4a.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Display4a.text = (Display4a.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Display4a.text = Display4a.text.slice(0, (- 1));&amp;#10;        Display4a.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Display4a.text = Display4a.text.slice(0, (- 1));&amp;#10;            Display4a.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Display4a.text = Display4a.text.slice(0, (- 1));&amp;#10;                Display4a.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Display4a.text = Display4a.text.slice(0, (- 1));&amp;#10;                    Display4a.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Display4a.text = Display4a.text.slice(0, (- 1));&amp;#10;                        Display4a.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Display4a.text = Display4a.text.slice(0, (- 1));&amp;#10;                            Display4a.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Display4a.text = Display4a.text.slice(0, (- 1));&amp;#10;                                Display4a.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Display4a.text = Display4a.text.slice(0, (- 1));&amp;#10;                                    Display4a.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Display4a.text = Display4a.text.slice(0, (- 1));&amp;#10;                                        Display4a.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Display4a.text = Display4a.text.slice(0, (- 1));&amp;#10;                                            Display4a.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Display4a.text = Display4a.text.slice(0, (- 1));&amp;#10;                                                Display4a.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Display4a.text = Display4a.text.slice(0, (- 1));&amp;#10;                                                    Display4a.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Display4a.text = Display4a.text.slice(0, (- 1));&amp;#10;                                                        Display4a.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Display4a.text = Display4a.text.slice(0, (- 5));&amp;#10;                                                            Display4a.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Display4a.text = Display4a.text.slice(0, (- 9));&amp;#10;                                                                Display4a.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Display4a.text = Display4a.text.slice(0, (- 1));&amp;#10;                                                                    Display4a.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                        Display4a.text = Display4a.text.slice(0, (- 1));&amp;#10;                                                                        Display4a.text += &quot;\u0428&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Display4a.text);&amp;#10;thisExp.addData(&quot;typedWord&quot;, Display4a.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Display4a.text)&amp;#10;thisExp.addData(&quot;typedWord&quot;, Display4a.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_27" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Pr_2_Remember_3b">
      <PolygonComponent name="B2_5">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="B2_5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="I2_5">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="I2_5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Display5a">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Display5a" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="E2_5">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="E2_5" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_28">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Display5a.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Display5a.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Display5a.text = Display5a.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Display5a.text = Display5a.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Display5a.text = Display5a.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Display5a.text = Display5a.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Display5a.text = Display5a.text[:-1]&amp;#10;            Display5a.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Display5a.text = Display5a.text[:-1]&amp;#10;            Display5a.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Display5a.text = Display5a.text[:-1]&amp;#10;            Display5a.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Display5a.text = Display5a.text[:-1]&amp;#10;            Display5a.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Display5a.text = Display5a.text[:-1]&amp;#10;            Display5a.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Display5a.text = Display5a.text[:-1]&amp;#10;            Display5a.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Display5a.text = Display5a.text[:-1]&amp;#10;            Display5a.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Display5a.text = Display5a.text[:-1]&amp;#10;            Display5a.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Display5a.text = Display5a.text[:-1]&amp;#10;            Display5a.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Display5a.text = Display5a.text[:-1]&amp;#10;            Display5a.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Display5a.text = Display5a.text[:-1]&amp;#10;            Display5a.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Display5a.text = Display5a.text[:-1]&amp;#10;            Display5a.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Display5a.text = Display5a.text[:-1]&amp;#10;            Display5a.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Display5a.text = Display5a.text[:-5]&amp;#10;            Display5a.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Display5a.text = Display5a.text[:-9]&amp;#10;            Display5a.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Display5a.text = Display5a.text[:-1]&amp;#10;            Display5a.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Display5a.text = Display5a.text[:-1]&amp;#10;            Display5a.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Display5a.text = Display5a.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Display5a.text = (Display5a.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Display5a.text = Display5a.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Display5a.text = (Display5a.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Display5a.text = (Display5a.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Display5a.text = Display5a.text.slice(0, (- 1));&amp;#10;        Display5a.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Display5a.text = Display5a.text.slice(0, (- 1));&amp;#10;            Display5a.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Display5a.text = Display5a.text.slice(0, (- 1));&amp;#10;                Display5a.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Display5a.text = Display5a.text.slice(0, (- 1));&amp;#10;                    Display5a.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Display5a.text = Display5a.text.slice(0, (- 1));&amp;#10;                        Display5a.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Display5a.text = Display5a.text.slice(0, (- 1));&amp;#10;                            Display5a.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Display5a.text = Display5a.text.slice(0, (- 1));&amp;#10;                                Display5a.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Display5a.text = Display5a.text.slice(0, (- 1));&amp;#10;                                    Display5a.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Display5a.text = Display5a.text.slice(0, (- 1));&amp;#10;                                        Display5a.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Display5a.text = Display5a.text.slice(0, (- 1));&amp;#10;                                            Display5a.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Display5a.text = Display5a.text.slice(0, (- 1));&amp;#10;                                                Display5a.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Display5a.text = Display5a.text.slice(0, (- 1));&amp;#10;                                                    Display5a.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Display5a.text = Display5a.text.slice(0, (- 1));&amp;#10;                                                        Display5a.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Display5a.text = Display5a.text.slice(0, (- 5));&amp;#10;                                                            Display5a.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Display5a.text = Display5a.text.slice(0, (- 9));&amp;#10;                                                                Display5a.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Display5a.text = Display5a.text.slice(0, (- 1));&amp;#10;                                                                    Display5a.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                        Display5a.text = Display5a.text.slice(0, (- 1));&amp;#10;                                                                        Display5a.text += &quot;\u0428&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Display5a.text);&amp;#10;thisExp.addData(&quot;typedWord&quot;, Display5a.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Display5a.text)&amp;#10;thisExp.addData(&quot;typedWord&quot;, Display5a.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_28" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Pr_2_Remember_3c">
      <PolygonComponent name="B2_6">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="B2_6" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="I2_6">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="I2_6" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Display6a">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Display6a" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="E2_6">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="E2_6" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_29">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Display6a.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Display6a.text = ''&amp;#10;event.clearEvents('keyboard')" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Display6a.text = Display6a.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Display6a.text = Display6a.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Display6a.text = Display6a.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Display6a.text = Display6a.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Display6a.text = Display6a.text[:-1]&amp;#10;            Display6a.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Display6a.text = Display6a.text[:-1]&amp;#10;            Display6a.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Display6a.text = Display6a.text[:-1]&amp;#10;            Display6a.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Display6a.text = Display6a.text[:-1]&amp;#10;            Display6a.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Display6a.text = Display6a.text[:-1]&amp;#10;            Display6a.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Display6a.text = Display6a.text[:-1]&amp;#10;            Display6a.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Display6a.text = Display6a.text[:-1]&amp;#10;            Display6a.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Display6a.text = Display6a.text[:-1]&amp;#10;            Display6a.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Display6a.text = Display6a.text[:-1]&amp;#10;            Display6a.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Display6a.text = Display6a.text[:-1]&amp;#10;            Display6a.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Display6a.text = Display6a.text[:-1]&amp;#10;            Display6a.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Display6a.text = Display6a.text[:-1]&amp;#10;            Display6a.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Display6a.text = Display6a.text[:-1]&amp;#10;            Display6a.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Display6a.text = Display6a.text[:-5]&amp;#10;            Display6a.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Display6a.text = Display6a.text[:-9]&amp;#10;            Display6a.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Display6a.text = Display6a.text[:-1]&amp;#10;            Display6a.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Display6a.text = Display6a.text[:-1]&amp;#10;            Display6a.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Display6a.text = Display6a.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Display6a.text = (Display6a.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Display6a.text = Display6a.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Display6a.text = (Display6a.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Display6a.text = (Display6a.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Display6a.text = Display6a.text.slice(0, (- 1));&amp;#10;        Display6a.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Display6a.text = Display6a.text.slice(0, (- 1));&amp;#10;            Display6a.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Display6a.text = Display6a.text.slice(0, (- 1));&amp;#10;                Display6a.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Display6a.text = Display6a.text.slice(0, (- 1));&amp;#10;                    Display6a.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Display6a.text = Display6a.text.slice(0, (- 1));&amp;#10;                        Display6a.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Display6a.text = Display6a.text.slice(0, (- 1));&amp;#10;                            Display6a.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Display6a.text = Display6a.text.slice(0, (- 1));&amp;#10;                                Display6a.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Display6a.text = Display6a.text.slice(0, (- 1));&amp;#10;                                    Display6a.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Display6a.text = Display6a.text.slice(0, (- 1));&amp;#10;                                        Display6a.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Display6a.text = Display6a.text.slice(0, (- 1));&amp;#10;                                            Display6a.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Display6a.text = Display6a.text.slice(0, (- 1));&amp;#10;                                                Display6a.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Display6a.text = Display6a.text.slice(0, (- 1));&amp;#10;                                                    Display6a.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Display6a.text = Display6a.text.slice(0, (- 1));&amp;#10;                                                        Display6a.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Display6a.text = Display6a.text.slice(0, (- 5));&amp;#10;                                                            Display6a.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Display6a.text = Display6a.text.slice(0, (- 9));&amp;#10;                                                                Display6a.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Display6a.text = Display6a.text.slice(0, (- 1));&amp;#10;                                                                    Display6a.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                        Display6a.text = Display6a.text.slice(0, (- 1));&amp;#10;                                                                        Display6a.text += &quot;\u0428&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Display6a.text);&amp;#10;thisExp.addData(&quot;typedWord&quot;, Display6a.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Display6a.text)&amp;#10;thisExp.addData(&quot;typedWord&quot;, Display6a.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_29" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Instruction_1_1">
      <PolygonComponent name="back1">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="back1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Instt">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="code"/>
        <Param name="name" updates="None" val="Instt" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="На решение каждого примера вам дается до 6 секунд. &amp;#10;&amp;#10;После того, как вы решите несколько примеров, вам будет предложено вспомнить буквы. Постарайтесь вспомнить максимальное количество букв в правильном порядке. Если вы совершили ошибку, вы можете исправить ее с помощью клавиши &quot;backspace&quot;. Если вы не помните какую-то букву, вы можете пропустить ее с помощью клавиши &quot;пробел&quot;.&amp;#10;&amp;#10;Если вы готовы продолжить - нажмите &quot;enter&quot;." valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ex">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ex" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Relax">
      <PolygonComponent name="B">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="B" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="120" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Q">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="Q" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="120" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Сейчас у вас есть 2 минуты отдохнуть. &amp;#10;Если вы готовы продолжить до истечения этих двух минут, нажмите &quot;enter&quot;.&amp;#10;" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="E">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="E" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="120" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="StartingExp">
      <PolygonComponent name="Backi">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Backi" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="I">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="I" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Теперь вы готовы начать эксперимент.&amp;#10;&amp;#10;Во время эксперимента вам будут предложены аналогичные задания, количество уравнений и букв может варьироваться от 2 до 7. Время на воспроизведение букв ограничено.&amp;#10;&amp;#10;По ходу эксперимента вам будет предложено 3 паузы для отдыха, длящиеся 2 минуты. &amp;#10;&amp;#10;Помните, что в эксперименте важны и правильность решения задач, и количество букв, которые вы запомните. &amp;#10;&amp;#10;Если вы готовы продолжить, нажмите клавишу &quot;enter&quot;." valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="S">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="S" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Practice_2a_2">
      <PolygonComponent name="Background_1">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Background_1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5, 5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Practice_1a">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Practice_1a" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$P1" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Instr_1a">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="Instr_1a" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -0.3)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="1 (верно) ----------- 0 (неверно)" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Key_resp_1">
        <Param name="allowedKeys" updates="constant" val="'0','1'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Key_resp_1" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="TimM">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="Resp_list = []" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="Resp_list = [];&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="RT_list = [];&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="RT_list = [] # an empty list to hold your values " valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="RT_list.append(Key_resp_1.rt);&amp;#10;Resp_list.append(Key_resp_1.keys);&amp;#10;console.log(Key_resp_1.rt);&amp;#10;console.log(Resp_list);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="RT_list.append(Key_resp_1.rt)&amp;#10;Resp_list.append(Key_resp_1.keys)&amp;#10;print(Key_resp_1.rt)&amp;#10;print(Resp_list)&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="TimM" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Ospan_new_1">
      <PolygonComponent name="Bck_22">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bck_22" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Stim_22">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Stim_22" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$S22" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ext_22">
        <Param name="allowedKeys" updates="constant" val="'1','0'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ext_22" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Remember_new_1">
      <PolygonComponent name="Bc_22">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bc_22" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Inst_22">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Inst_22" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Dis22">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Dis22" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ex_22">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ex_22" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_51">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Dis22.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Dis22.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Dis22.text = Dis22.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Dis22.text = Dis22.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Dis22.text = Dis22.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Dis22.text = Dis22.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Dis22.text = Dis22.text[:-1]&amp;#10;            Dis22.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Dis22.text = Dis22.text[:-1]&amp;#10;            Dis22.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Dis22.text = Dis22.text[:-1]&amp;#10;            Dis22.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Dis22.text = Dis22.text[:-1]&amp;#10;            Dis22.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Dis22.text = Dis22.text[:-1]&amp;#10;            Dis22.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Dis22.text = Dis22.text[:-1]&amp;#10;            Dis22.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Dis22.text = Dis22.text[:-1]&amp;#10;            Dis22.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Dis22.text = Dis22.text[:-1]&amp;#10;            Dis22.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Dis22.text = Dis22.text[:-1]&amp;#10;            Dis22.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Dis22.text = Dis22.text[:-1]&amp;#10;            Dis22.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Dis22.text = Dis22.text[:-1]&amp;#10;            Dis22.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Dis22.text = Dis22.text[:-1]&amp;#10;            Dis22.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Dis22.text = Dis22.text[:-1]&amp;#10;            Dis22.text+= (u'Ф')&amp;#10;    elif 'x' in keys:&amp;#10;            Dis22.text = Dis22.text[:-1]&amp;#10;            Dis22.text+= (u'Ч')&amp;#10;    elif 'comma' in keys:&amp;#10;            Dis22.text = Dis22.text[:-5]&amp;#10;            Dis22.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Dis22.text = Dis22.text[:-9]&amp;#10;            Dis22.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Dis22.text = Dis22.text[:-1]&amp;#10;            Dis22.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Dis22.text = Dis22.text[:-1]&amp;#10;            Dis22.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Dis22.text = Dis22.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Dis22.text = (Dis22.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Dis22.text = Dis22.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Dis22.text = (Dis22.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Dis22.text = (Dis22.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Dis22.text = Dis22.text.slice(0, (- 1));&amp;#10;        Dis22.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Dis22.text = Dis22.text.slice(0, (- 1));&amp;#10;            Dis22.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Dis22.text = Dis22.text.slice(0, (- 1));&amp;#10;                Dis22.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Dis22.text = Dis22.text.slice(0, (- 1));&amp;#10;                    Dis22.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Dis22.text = Dis22.text.slice(0, (- 1));&amp;#10;                        Dis22.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Dis22.text = Dis22.text.slice(0, (- 1));&amp;#10;                            Dis22.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Dis22.text = Dis22.text.slice(0, (- 1));&amp;#10;                                Dis22.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Dis22.text = Dis22.text.slice(0, (- 1));&amp;#10;                                    Dis22.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Dis22.text = Dis22.text.slice(0, (- 1));&amp;#10;                                        Dis22.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Dis22.text = Dis22.text.slice(0, (- 1));&amp;#10;                                            Dis22.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Dis22.text = Dis22.text.slice(0, (- 1));&amp;#10;                                                Dis22.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Dis22.text = Dis22.text.slice(0, (- 1));&amp;#10;                                                    Dis22.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Dis22.text = Dis22.text.slice(0, (- 1));&amp;#10;                                                        Dis22.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;x&quot;, keys)) {&amp;#10;                                                            Dis22.text = Dis22.text.slice(0, (- 1));&amp;#10;                                                            Dis22.text += &quot;\u0427&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                                Dis22.text = Dis22.text.slice(0, (- 5));&amp;#10;                                                                Dis22.text += &quot;\u0411&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                    Dis22.text = Dis22.text.slice(0, (- 9));&amp;#10;                                                                    Dis22.text += &quot;\u0416&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                        Dis22.text = Dis22.text.slice(0, (- 1));&amp;#10;                                                                        Dis22.text += &quot;\u0426&quot;;&amp;#10;                                                                    } else {&amp;#10;                                                                        if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                            Dis22.text = Dis22.text.slice(0, (- 1));&amp;#10;                                                                            Dis22.text += &quot;\u0428&quot;;&amp;#10;                                                                        }&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Dis22.text);&amp;#10;Recall_22.addData(&quot;Answer of Pax&quot;, Dis22.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Dis22.text)&amp;#10;Recall_22.addData('Answer of Pax', Dis22.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_51" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Ospan_new_2">
      <PolygonComponent name="Bck_23">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bck_23" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Stim23">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Stim23" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$S23" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ext_23">
        <Param name="allowedKeys" updates="constant" val="'1','0'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ext_23" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Remember_new_2">
      <PolygonComponent name="Bc_23">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bc_23" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Inst_23">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Inst_23" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Dis23">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Dis23" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ex_23">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ex_23" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_52">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Dis23.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Dis23.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Dis23.text = Dis23.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Dis23.text = Dis23.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Dis23.text = Dis23.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Dis23.text = Dis23.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Dis23.text = Dis23.text[:-1]&amp;#10;            Dis23.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Dis23.text = Dis23.text[:-1]&amp;#10;            Dis23.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Dis23.text = Dis23.text[:-1]&amp;#10;            Dis23.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Dis23.text = Dis23.text[:-1]&amp;#10;            Dis23.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Dis23.text = Dis23.text[:-1]&amp;#10;            Dis23.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Dis23.text = Dis23.text[:-1]&amp;#10;            Dis23.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Dis23.text = Dis23.text[:-1]&amp;#10;            Dis23.text+= (u'Л')&amp;#10;    elif 'x' in keys:&amp;#10;            Dis23.text = Dis23.text[:-1]&amp;#10;            Dis23.text+= (u'Ч')&amp;#10;    elif 'p' in keys:&amp;#10;            Dis23.text = Dis23.text[:-1]&amp;#10;            Dis23.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Dis23.text = Dis23.text[:-1]&amp;#10;            Dis23.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Dis23.text = Dis23.text[:-1]&amp;#10;            Dis23.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Dis23.text = Dis23.text[:-1]&amp;#10;            Dis23.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Dis23.text = Dis23.text[:-1]&amp;#10;            Dis23.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Dis23.text = Dis23.text[:-1]&amp;#10;            Dis23.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Dis23.text = Dis23.text[:-5]&amp;#10;            Dis23.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Dis23.text = Dis23.text[:-9]&amp;#10;            Dis23.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Dis23.text = Dis23.text[:-1]&amp;#10;            Dis23.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Dis23.text = Dis23.text[:-1]&amp;#10;            Dis23.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Dis23.text = Dis23.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Dis23.text = (Dis23.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Dis23.text = Dis23.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Dis23.text = (Dis23.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Dis23.text = (Dis23.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Dis23.text = Dis23.text.slice(0, (- 1));&amp;#10;        Dis23.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Dis23.text = Dis23.text.slice(0, (- 1));&amp;#10;            Dis23.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Dis23.text = Dis23.text.slice(0, (- 1));&amp;#10;                Dis23.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Dis23.text = Dis23.text.slice(0, (- 1));&amp;#10;                    Dis23.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Dis23.text = Dis23.text.slice(0, (- 1));&amp;#10;                        Dis23.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Dis23.text = Dis23.text.slice(0, (- 1));&amp;#10;                            Dis23.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Dis23.text = Dis23.text.slice(0, (- 1));&amp;#10;                                Dis23.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;x&quot;, keys)) {&amp;#10;                                    Dis23.text = Dis23.text.slice(0, (- 1));&amp;#10;                                    Dis23.text += &quot;\u0427&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                        Dis23.text = Dis23.text.slice(0, (- 1));&amp;#10;                                        Dis23.text += &quot;\u0417&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                            Dis23.text = Dis23.text.slice(0, (- 1));&amp;#10;                                            Dis23.text += &quot;\u0421&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                                Dis23.text = Dis23.text.slice(0, (- 1));&amp;#10;                                                Dis23.text += &quot;\u0422&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                    Dis23.text = Dis23.text.slice(0, (- 1));&amp;#10;                                                    Dis23.text += &quot;\u041f&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                        Dis23.text = Dis23.text.slice(0, (- 1));&amp;#10;                                                        Dis23.text += &quot;\u0414&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                            Dis23.text = Dis23.text.slice(0, (- 1));&amp;#10;                                                            Dis23.text += &quot;\u0424&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                                Dis23.text = Dis23.text.slice(0, (- 5));&amp;#10;                                                                Dis23.text += &quot;\u0411&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                    Dis23.text = Dis23.text.slice(0, (- 9));&amp;#10;                                                                    Dis23.text += &quot;\u0416&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                        Dis23.text = Dis23.text.slice(0, (- 1));&amp;#10;                                                                        Dis23.text += &quot;\u0426&quot;;&amp;#10;                                                                    } else {&amp;#10;                                                                        if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                            Dis23.text = Dis23.text.slice(0, (- 1));&amp;#10;                                                                            Dis23.text += &quot;\u0428&quot;;&amp;#10;                                                                        }&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Dis23.text);&amp;#10;Recall_23.addData(&quot;Answer of Pax&quot;, Dis23.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Dis23.text)&amp;#10;Recall_23.addData('Answer of Pax', Dis23.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_52" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Ospan_new_3">
      <PolygonComponent name="Bck_24">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bck_24" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Stim24">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Stim24" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$S24" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ext_24">
        <Param name="allowedKeys" updates="constant" val="'1','0'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ext_24" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="c" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Remember_new_3">
      <PolygonComponent name="Bc_24">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bc_24" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Inst_24">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Inst_24" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Dis24">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Dis24" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Ex_24">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Ex_24" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_53">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Dis24.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Dis24.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Dis24.text = Dis24.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Dis24.text = Dis24.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Dis24.text = Dis24.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Dis24.text = Dis24.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Dis24.text = Dis24.text[:-1]&amp;#10;            Dis24.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Dis24.text = Dis24.text[:-1]&amp;#10;            Dis24.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Dis24.text = Dis24.text[:-1]&amp;#10;            Dis24.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Dis24.text = Dis24.text[:-1]&amp;#10;            Dis24.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Dis24.text = Dis24.text[:-1]&amp;#10;            Dis24.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Dis24.text = Dis24.text[:-1]&amp;#10;            Dis24.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Dis24.text = Dis24.text[:-1]&amp;#10;            Dis24.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Dis24.text = Dis24.text[:-1]&amp;#10;            Dis24.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Dis24.text = Dis24.text[:-1]&amp;#10;            Dis24.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Dis24.text = Dis24.text[:-1]&amp;#10;            Dis24.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Dis24.text = Dis24.text[:-1]&amp;#10;            Dis24.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Dis24.text = Dis24.text[:-1]&amp;#10;            Dis24.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Dis24.text = Dis24.text[:-1]&amp;#10;            Dis24.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Dis24.text = Dis24.text[:-5]&amp;#10;            Dis24.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Dis24.text = Dis24.text[:-9]&amp;#10;            Dis24.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Dis24.text = Dis24.text[:-1]&amp;#10;            Dis24.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Dis24.text = Dis24.text[:-1]&amp;#10;            Dis24.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Dis24.text = Dis24.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Dis24.text = (Dis24.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Dis24.text = Dis24.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Dis24.text = (Dis24.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Dis24.text = (Dis24.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Dis24.text = Dis24.text.slice(0, (- 1));&amp;#10;        Dis24.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Dis24.text = Dis24.text.slice(0, (- 1));&amp;#10;            Dis24.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Dis24.text = Dis24.text.slice(0, (- 1));&amp;#10;                Dis24.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Dis24.text = Dis24.text.slice(0, (- 1));&amp;#10;                    Dis24.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Dis24.text = Dis24.text.slice(0, (- 1));&amp;#10;                        Dis24.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Dis24.text = Dis24.text.slice(0, (- 1));&amp;#10;                            Dis24.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Dis24.text = Dis24.text.slice(0, (- 1));&amp;#10;                                Dis24.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Dis24.text = Dis24.text.slice(0, (- 1));&amp;#10;                                    Dis24.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Dis24.text = Dis24.text.slice(0, (- 1));&amp;#10;                                        Dis24.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Dis24.text = Dis24.text.slice(0, (- 1));&amp;#10;                                            Dis24.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Dis24.text = Dis24.text.slice(0, (- 1));&amp;#10;                                                Dis24.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Dis24.text = Dis24.text.slice(0, (- 1));&amp;#10;                                                    Dis24.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Dis24.text = Dis24.text.slice(0, (- 1));&amp;#10;                                                        Dis24.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Dis24.text = Dis24.text.slice(0, (- 5));&amp;#10;                                                            Dis24.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Dis24.text = Dis24.text.slice(0, (- 9));&amp;#10;                                                                Dis24.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Dis24.text = Dis24.text.slice(0, (- 1));&amp;#10;                                                                    Dis24.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                        Dis24.text = Dis24.text.slice(0, (- 1));&amp;#10;                                                                        Dis24.text += &quot;\u0428&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Dis24.text);&amp;#10;Recall_24.addData(&quot;Answer of Pax&quot;, Dis24.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Dis24.text)&amp;#10;Recall_24.addData('Answer of Pax', Dis24.text)&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_53" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Practice_new_1">
      <PolygonComponent name="Bckg_7">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bckg_7" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Practice_7a">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Practice_7a" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$P7" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Exit_7">
        <Param name="allowedKeys" updates="constant" val="'0','1'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Exit_7" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="RT_list.append(Exit_7.rt);&amp;#10;Resp_list.append(Exit_7.keys);&amp;#10;console.log(Exit_7.rt);&amp;#10;console.log(Resp_list);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="RT_list.append(Exit_7.rt)&amp;#10;Resp_list.append(Exit_7.keys)&amp;#10;print(Exit_7.rt)&amp;#10;print(Resp_list)&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="PrRemember_new_1">
      <PolygonComponent name="Bckgr_7">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bckgr_7" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="I_7">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="I_7" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Display7">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Display7" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="E_7">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="E_7" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_18">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Display7.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Display7.text = ''&amp;#10;event.clearEvents('keyboard')" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Display7.text = Display7.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Display7.text = Display7.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Display7.text = Display7.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Display7.text = Display7.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Display7.text = Display7.text[:-1]&amp;#10;            Display7.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Display7.text = Display7.text[:-1]&amp;#10;            Display7.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Display7.text = Display7.text[:-1]&amp;#10;            Display7.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Display7.text = Display7.text[:-1]&amp;#10;            Display7.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Display7.text = Display7.text[:-1]&amp;#10;            Display7.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Display7.text = Display7.text[:-1]&amp;#10;            Display7.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Display7.text = Display7.text[:-1]&amp;#10;            Display7.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Display7.text = Display7.text[:-1]&amp;#10;            Display7.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Display7.text = Display7.text[:-1]&amp;#10;            Display7.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Display7.text = Display7.text[:-1]&amp;#10;            Display7.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Display7.text = Display7.text[:-1]&amp;#10;            Display7.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Display7.text = Display7.text[:-1]&amp;#10;            Display7.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Display7.text = Display7.text[:-1]&amp;#10;            Display7.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Display7.text = Display7.text[:-5]&amp;#10;            Display7.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Display7.text = Display7.text[:-9]&amp;#10;            Display7.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Display7.text = Display7.text[:-1]&amp;#10;            Display7.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Display7.text = Display7.text[:-1]&amp;#10;            Display7.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Display7.text = Display7.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Display7.text = (Display7.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Display7.text = Display7.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Display7.text = (Display7.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Display7.text = (Display7.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Display7.text = Display7.text.slice(0, (- 1));&amp;#10;        Display7.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Display7.text = Display7.text.slice(0, (- 1));&amp;#10;            Display7.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Display7.text = Display7.text.slice(0, (- 1));&amp;#10;                Display7.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Display7.text = Display7.text.slice(0, (- 1));&amp;#10;                    Display7.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Display7.text = Display7.text.slice(0, (- 1));&amp;#10;                        Display7.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Display7.text = Display7.text.slice(0, (- 1));&amp;#10;                            Display7.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Display7.text = Display7.text.slice(0, (- 1));&amp;#10;                                Display7.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Display7.text = Display7.text.slice(0, (- 1));&amp;#10;                                    Display7.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Display7.text = Display7.text.slice(0, (- 1));&amp;#10;                                        Display7.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Display7.text = Display7.text.slice(0, (- 1));&amp;#10;                                            Display7.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Display7.text = Display7.text.slice(0, (- 1));&amp;#10;                                                Display7.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Display7.text = Display7.text.slice(0, (- 1));&amp;#10;                                                    Display7.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Display7.text = Display7.text.slice(0, (- 1));&amp;#10;                                                        Display7.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Display7.text = Display7.text.slice(0, (- 5));&amp;#10;                                                            Display7.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Display7.text = Display7.text.slice(0, (- 9));&amp;#10;                                                                Display7.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Display7.text = Display7.text.slice(0, (- 1));&amp;#10;                                                                    Display7.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                        Display7.text = Display7.text.slice(0, (- 1));&amp;#10;                                                                        Display7.text += &quot;\u0428&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="PrRecall_7.addData(&quot;Answer of Pax&quot;, Display7.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="PrRecall_7.addData('Answer of Pax', Display7.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_18" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Practice_new_2">
      <PolygonComponent name="Bckgr_8">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bckgr_8" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Practice_8a">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Practice_8a" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$P8" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Exit_8">
        <Param name="allowedKeys" updates="constant" val="'0','1'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Exit_8" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_7">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="RT_list.append(Exit_8.rt);&amp;#10;Resp_list.append(Exit_8.keys);&amp;#10;console.log(Exit_8.rt);&amp;#10;console.log(Resp_list);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="RT_list.append(Exit_8.rt)&amp;#10;Resp_list.append(Exit_8.keys)&amp;#10;print(Exit_8.rt)&amp;#10;print(Resp_list)&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_7" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="PrRemember_new_2">
      <PolygonComponent name="Bckg_8">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bckg_8" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="I_8">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="I_8" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Display8">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Display8" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="E_8">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="E_8" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_19">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Display8.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Display8.text = ''&amp;#10;event.clearEvents('keyboard')" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Display8.text = Display8.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Display8.text = Display8.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Display8.text = Display8.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Display8.text = Display8.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Display8.text = Display8.text[:-1]&amp;#10;            Display8.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Display8.text = Display8.text[:-1]&amp;#10;            Display8.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Display8.text = Display8.text[:-1]&amp;#10;            Display8.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Display8.text = Display8.text[:-1]&amp;#10;            Display8.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Display8.text = Display8.text[:-1]&amp;#10;            Display8.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Display8.text = Display8.text[:-1]&amp;#10;            Display8.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Display8.text = Display8.text[:-1]&amp;#10;            Display8.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Display8.text = Display8.text[:-1]&amp;#10;            Display8.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Display8.text = Display8.text[:-1]&amp;#10;            Display8.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Display8.text = Display8.text[:-1]&amp;#10;            Display8.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Display8.text = Display8.text[:-1]&amp;#10;            Display8.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Display8.text = Display8.text[:-1]&amp;#10;            Display8.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Display8.text = Display8.text[:-1]&amp;#10;            Display8.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Display8.text = Display8.text[:-5]&amp;#10;            Display8.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Display8.text = Display8.text[:-9]&amp;#10;            Display8.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Display8.text = Display8.text[:-1]&amp;#10;            Display8.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Display8.text = Display8.text[:-1]&amp;#10;            Display8.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Display8.text = Display8.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Display8.text = (Display8.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Display8.text = Display8.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Display8.text = (Display8.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Display8.text = (Display8.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Display8.text = Display8.text.slice(0, (- 1));&amp;#10;        Display8.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Display8.text = Display8.text.slice(0, (- 1));&amp;#10;            Display8.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Display8.text = Display8.text.slice(0, (- 1));&amp;#10;                Display8.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Display8.text = Display8.text.slice(0, (- 1));&amp;#10;                    Display8.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Display8.text = Display8.text.slice(0, (- 1));&amp;#10;                        Display8.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Display8.text = Display8.text.slice(0, (- 1));&amp;#10;                            Display8.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Display8.text = Display8.text.slice(0, (- 1));&amp;#10;                                Display8.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Display8.text = Display8.text.slice(0, (- 1));&amp;#10;                                    Display8.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Display8.text = Display8.text.slice(0, (- 1));&amp;#10;                                        Display8.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Display8.text = Display8.text.slice(0, (- 1));&amp;#10;                                            Display8.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Display8.text = Display8.text.slice(0, (- 1));&amp;#10;                                                Display8.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Display8.text = Display8.text.slice(0, (- 1));&amp;#10;                                                    Display8.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Display8.text = Display8.text.slice(0, (- 1));&amp;#10;                                                        Display8.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Display8.text = Display8.text.slice(0, (- 5));&amp;#10;                                                            Display8.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Display8.text = Display8.text.slice(0, (- 9));&amp;#10;                                                                Display8.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Display8.text = Display8.text.slice(0, (- 1));&amp;#10;                                                                    Display8.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                        Display8.text = Display8.text.slice(0, (- 1));&amp;#10;                                                                        Display8.text += &quot;\u0428&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="PrRecall_8.addData(&quot;Answer of Pax&quot;, Display8.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="PrRecall_8.addData('Answer of Pax', Display8.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_19" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Practice_new_3">
      <PolygonComponent name="Bckgr_9">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bckgr_9" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Practice_9a">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Practice_9a" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$P9" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Exit_9">
        <Param name="allowedKeys" updates="constant" val="'0','1'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Exit_9" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_8">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="RT_list.append(Exit_9.rt);&amp;#10;Resp_list.append(Exit_9.keys);&amp;#10;console.log(Exit_9.rt);&amp;#10;console.log(Resp_list);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="RT_list.append(Exit_9.rt)&amp;#10;Resp_list.append(Exit_9.keys)&amp;#10;print(Exit_9.rt)&amp;#10;print(Resp_list)&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_8" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="PrRemember_new_3">
      <PolygonComponent name="Bckg_9">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bckg_9" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="I_9">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="I_9" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Display9">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Display9" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="E_9">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="E_9" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_20">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Display9.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Display9.text = ''&amp;#10;event.clearEvents('keyboard')" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Display9.text = Display9.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Display9.text = Display9.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Display9.text = Display9.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Display9.text = Display9.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Display9.text = Display9.text[:-1]&amp;#10;            Display9.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Display9.text = Display9.text[:-1]&amp;#10;            Display9.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Display9.text = Display9.text[:-1]&amp;#10;            Display9.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Display9.text = Display9.text[:-1]&amp;#10;            Display9.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Display9.text = Display9.text[:-1]&amp;#10;            Display9.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Display9.text = Display9.text[:-1]&amp;#10;            Display9.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Display9.text = Display9.text[:-1]&amp;#10;            Display9.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Display9.text = Display9.text[:-1]&amp;#10;            Display9.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Display9.text = Display9.text[:-1]&amp;#10;            Display9.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Display9.text = Display9.text[:-1]&amp;#10;            Display9.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Display9.text = Display9.text[:-1]&amp;#10;            Display9.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Display9.text = Display9.text[:-1]&amp;#10;            Display9.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Display9.text = Display9.text[:-1]&amp;#10;            Display9.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Display9.text = Display9.text[:-5]&amp;#10;            Display9.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Display9.text = Display9.text[:-9]&amp;#10;            Display9.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Display9.text = Display9.text[:-1]&amp;#10;            Display9.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Display9.text = Display9.text[:-1]&amp;#10;            Display9.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Display9.text = Display9.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Display9.text = (Display9.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Display9.text = Display9.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Display9.text = (Display9.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Display9.text = (Display9.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Display9.text = Display9.text.slice(0, (- 1));&amp;#10;        Display9.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Display9.text = Display9.text.slice(0, (- 1));&amp;#10;            Display9.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Display9.text = Display9.text.slice(0, (- 1));&amp;#10;                Display9.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Display9.text = Display9.text.slice(0, (- 1));&amp;#10;                    Display9.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Display9.text = Display9.text.slice(0, (- 1));&amp;#10;                        Display9.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Display9.text = Display9.text.slice(0, (- 1));&amp;#10;                            Display9.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Display9.text = Display9.text.slice(0, (- 1));&amp;#10;                                Display9.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Display9.text = Display9.text.slice(0, (- 1));&amp;#10;                                    Display9.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Display9.text = Display9.text.slice(0, (- 1));&amp;#10;                                        Display9.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Display9.text = Display9.text.slice(0, (- 1));&amp;#10;                                            Display9.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Display9.text = Display9.text.slice(0, (- 1));&amp;#10;                                                Display9.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Display9.text = Display9.text.slice(0, (- 1));&amp;#10;                                                    Display9.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Display9.text = Display9.text.slice(0, (- 1));&amp;#10;                                                        Display9.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Display9.text = Display9.text.slice(0, (- 5));&amp;#10;                                                            Display9.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Display9.text = Display9.text.slice(0, (- 9));&amp;#10;                                                                Display9.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Display9.text = Display9.text.slice(0, (- 1));&amp;#10;                                                                    Display9.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                        Display9.text = Display9.text.slice(0, (- 1));&amp;#10;                                                                        Display9.text += &quot;\u0428&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Display9.text);&amp;#10;PrRecall_9.addData(&quot;Answer of Pax&quot;, Display9.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Display9.text)&amp;#10;&amp;#10;PrRecall_9.addData('Answer of Pax', Display9.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_20" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Practice_new_4">
      <PolygonComponent name="bckgr_10">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="bckgr_10" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Practice_10a">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Practice_10a" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$P10" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Exit_10">
        <Param name="allowedKeys" updates="constant" val="'0','1'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Exit_10" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_9">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="RT_list.append(Exit_10.rt);&amp;#10;Resp_list.append(Exit_10.keys);&amp;#10;console.log(Exit_10.rt);&amp;#10;console.log(Resp_list);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="RT_list.append(Exit_10.rt)&amp;#10;Resp_list.append(Exit_10.keys)&amp;#10;print(Exit_10.rt)&amp;#10;print(Resp_list)&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_9" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="PrRemember_new_4">
      <PolygonComponent name="Bckg_10">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bckg_10" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="I_10">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="I_10" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Display10">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Display10" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="E_10">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="E_10" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_21">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Display10.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Display10.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Display10.text = Display10.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Display10.text = Display10.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Display10.text = Display10.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Display10.text = Display10.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Display10.text = Display10.text[:-1]&amp;#10;            Display10.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Display10.text = Display10.text[:-1]&amp;#10;            Display10.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Display10.text = Display10.text[:-1]&amp;#10;            Display10.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Display10.text = Display10.text[:-1]&amp;#10;            Display10.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Display10.text = Display10.text[:-1]&amp;#10;            Display10.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Display10.text = Display10.text[:-1]&amp;#10;            Display10.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Display10.text = Display10.text[:-1]&amp;#10;            Display10.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Display10.text = Display10.text[:-1]&amp;#10;            Display10.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Display10.text = Display10.text[:-1]&amp;#10;            Display10.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Display10.text = Display10.text[:-1]&amp;#10;            Display10.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Display10.text = Display10.text[:-1]&amp;#10;            Display10.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Display10.text = Display10.text[:-1]&amp;#10;            Display10.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Display10.text = Display10.text[:-1]&amp;#10;            Display10.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Display10.text = Display10.text[:-5]&amp;#10;            Display10.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Display10.text = Display10.text[:-9]&amp;#10;            Display10.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Display10.text = Display10.text[:-1]&amp;#10;            Display10.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Display10.text = Display10.text[:-1]&amp;#10;            Display10.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Display10.text = Display10.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Display10.text = (Display10.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Display10.text = Display10.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Display10.text = (Display10.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Display10.text = (Display10.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Display10.text = Display10.text.slice(0, (- 1));&amp;#10;        Display10.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Display10.text = Display10.text.slice(0, (- 1));&amp;#10;            Display10.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Display10.text = Display10.text.slice(0, (- 1));&amp;#10;                Display10.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Display10.text = Display10.text.slice(0, (- 1));&amp;#10;                    Display10.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Display10.text = Display10.text.slice(0, (- 1));&amp;#10;                        Display10.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Display10.text = Display10.text.slice(0, (- 1));&amp;#10;                            Display10.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Display10.text = Display10.text.slice(0, (- 1));&amp;#10;                                Display10.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Display10.text = Display10.text.slice(0, (- 1));&amp;#10;                                    Display10.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Display10.text = Display10.text.slice(0, (- 1));&amp;#10;                                        Display10.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Display10.text = Display10.text.slice(0, (- 1));&amp;#10;                                            Display10.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Display10.text = Display10.text.slice(0, (- 1));&amp;#10;                                                Display10.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Display10.text = Display10.text.slice(0, (- 1));&amp;#10;                                                    Display10.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Display10.text = Display10.text.slice(0, (- 1));&amp;#10;                                                        Display10.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Display10.text = Display10.text.slice(0, (- 5));&amp;#10;                                                            Display10.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Display10.text = Display10.text.slice(0, (- 9));&amp;#10;                                                                Display10.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Display10.text = Display10.text.slice(0, (- 1));&amp;#10;                                                                    Display10.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                        Display10.text = Display10.text.slice(0, (- 1));&amp;#10;                                                                        Display10.text += &quot;\u0428&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Display10.text);&amp;#10;PrRecall_10.addData(&quot;Answer of Pax&quot;, Display10.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Display10.text)&amp;#10;PrRecall_10.addData('Answer of Pax', Display10.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_21" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Practice_new_5">
      <PolygonComponent name="Bckgr_11">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bckgr_11" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Practice_11a">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Practice_11a" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$P11" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Exit_11">
        <Param name="allowedKeys" updates="constant" val="'0','1'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Exit_11" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_10">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="RT_list.append(Exit_11.rt);&amp;#10;Resp_list.append(Exit_11.keys);&amp;#10;console.log(Exit_11.rt);&amp;#10;console.log(Resp_list);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="RT_list.append(Exit_11.rt)&amp;#10;Resp_list.append(Exit_11.keys)&amp;#10;print(Exit_11.rt)&amp;#10;print(Resp_list)&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_10" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="PrRemember_new_5">
      <PolygonComponent name="Bckg_11">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bckg_11" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="I_11">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="I_11" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Display11">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Display11" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="E_11">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="E_11" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_22">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Display11.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Display11.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Display11.text = Display11.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Display11.text = Display11.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Display11.text = Display11.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Display11.text = Display11.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Display11.text = Display11.text[:-1]&amp;#10;            Display11.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Display11.text = Display11.text[:-1]&amp;#10;            Display11.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Display11.text = Display11.text[:-1]&amp;#10;            Display11.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Display11.text = Display11.text[:-1]&amp;#10;            Display11.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Display11.text = Display11.text[:-1]&amp;#10;            Display11.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Display11.text = Display11.text[:-1]&amp;#10;            Display11.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Display11.text = Display11.text[:-1]&amp;#10;            Display11.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Display11.text = Display11.text[:-1]&amp;#10;            Display11.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Display11.text = Display11.text[:-1]&amp;#10;            Display11.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Display11.text = Display11.text[:-1]&amp;#10;            Display11.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Display11.text = Display11.text[:-1]&amp;#10;            Display11.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Display11.text = Display11.text[:-1]&amp;#10;            Display11.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Display11.text = Display11.text[:-1]&amp;#10;            Display11.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Display11.text = Display11.text[:-5]&amp;#10;            Display11.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Display11.text = Display11.text[:-9]&amp;#10;            Display11.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Display11.text = Display11.text[:-1]&amp;#10;            Display11.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Display11.text = Display11.text[:-1]&amp;#10;            Display11.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Display11.text = Display11.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Display11.text = (Display11.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Display11.text = Display11.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Display11.text = (Display11.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Display11.text = (Display11.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Display11.text = Display11.text.slice(0, (- 1));&amp;#10;        Display11.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Display11.text = Display11.text.slice(0, (- 1));&amp;#10;            Display11.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Display11.text = Display11.text.slice(0, (- 1));&amp;#10;                Display11.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Display11.text = Display11.text.slice(0, (- 1));&amp;#10;                    Display11.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Display11.text = Display11.text.slice(0, (- 1));&amp;#10;                        Display11.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Display11.text = Display11.text.slice(0, (- 1));&amp;#10;                            Display11.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Display11.text = Display11.text.slice(0, (- 1));&amp;#10;                                Display11.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Display11.text = Display11.text.slice(0, (- 1));&amp;#10;                                    Display11.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Display11.text = Display11.text.slice(0, (- 1));&amp;#10;                                        Display11.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Display11.text = Display11.text.slice(0, (- 1));&amp;#10;                                            Display11.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Display11.text = Display11.text.slice(0, (- 1));&amp;#10;                                                Display11.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Display11.text = Display11.text.slice(0, (- 1));&amp;#10;                                                    Display11.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Display11.text = Display11.text.slice(0, (- 1));&amp;#10;                                                        Display11.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Display11.text = Display11.text.slice(0, (- 5));&amp;#10;                                                            Display11.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Display11.text = Display11.text.slice(0, (- 9));&amp;#10;                                                                Display11.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Display11.text = Display11.text.slice(0, (- 1));&amp;#10;                                                                    Display11.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                        Display11.text = Display11.text.slice(0, (- 1));&amp;#10;                                                                        Display11.text += &quot;\u0428&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Display11.text);&amp;#10;thisExp.addData(&quot;typedWord&quot;, Display11.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Display11.text)&amp;#10;thisExp.addData(&quot;typedWord&quot;, Display11.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_22" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Practice_new_6">
      <PolygonComponent name="Bckgr_12">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bckgr_12" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Practice_12a">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="Practice_12a" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$P12" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Exit_12">
        <Param name="allowedKeys" updates="constant" val="'0','1'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Exit_12" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_11">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="RT_list.append(Exit_12.rt);&amp;#10;Resp_list.append(Exit_12.keys);&amp;#10;console.log(Exit_12.rt);&amp;#10;console.log(Resp_list);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="RT_list.append(Exit_12.rt)&amp;#10;Resp_list.append(Exit_12.keys)&amp;#10;print(Exit_12.rt)&amp;#10;print(Resp_list)&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_11" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="PrRemember_new_6">
      <PolygonComponent name="Bckg_12">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Bckg_12" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="I_12">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="I_12" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вспомните показанные буквы:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Display12">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Display12" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="E_12">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="E_12" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_23">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;Display12.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;Display12.text = ''&amp;#10;event.clearEvents('keyboard')" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        Display12.text = Display12.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        Display12.text = Display12.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            Display12.text = Display12.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            Display12.text = Display12.text + keys[0]&amp;#10;&amp;#10;&amp;#10;if len(keys):&amp;#10;    if 'u' in keys:&amp;#10;            Display12.text = Display12.text[:-1]&amp;#10;            Display12.text+= (u'Г')&amp;#10;    elif 'v' in keys:&amp;#10;            Display12.text = Display12.text[:-1]&amp;#10;            Display12.text+= (u'М')&amp;#10;    elif 'y' in keys:&amp;#10;            Display12.text = Display12.text[:-1]&amp;#10;            Display12.text+= (u'Н')&amp;#10;    elif 'r' in keys:&amp;#10;            Display12.text = Display12.text[:-1]&amp;#10;            Display12.text+= (u'К')&amp;#10;    elif 'h' in keys:&amp;#10;            Display12.text = Display12.text[:-1]&amp;#10;            Display12.text+= (u'Р')&amp;#10;    elif 'd' in keys:&amp;#10;            Display12.text = Display12.text[:-1]&amp;#10;            Display12.text+= (u'В')&amp;#10;    elif 'k' in keys:&amp;#10;            Display12.text = Display12.text[:-1]&amp;#10;            Display12.text+= (u'Л')&amp;#10;    elif 'p' in keys:&amp;#10;            Display12.text = Display12.text[:-1]&amp;#10;            Display12.text+= (u'З')&amp;#10;    elif 'c' in keys:&amp;#10;            Display12.text = Display12.text[:-1]&amp;#10;            Display12.text+= (u'С')&amp;#10;    elif 'n' in keys:&amp;#10;            Display12.text = Display12.text[:-1]&amp;#10;            Display12.text+= (u'Т')&amp;#10;    elif 'g' in keys:&amp;#10;            Display12.text = Display12.text[:-1]&amp;#10;            Display12.text+= (u'П')&amp;#10;    elif 'l' in keys:&amp;#10;            Display12.text = Display12.text[:-1]&amp;#10;            Display12.text+= (u'Д')&amp;#10;    elif 'a' in keys:&amp;#10;            Display12.text = Display12.text[:-1]&amp;#10;            Display12.text+= (u'Ф')&amp;#10;    elif 'comma' in keys:&amp;#10;            Display12.text = Display12.text[:-5]&amp;#10;            Display12.text+= ('Б')&amp;#10;    elif 'semicolon' in keys:&amp;#10;            Display12.text = Display12.text[:-9]&amp;#10;            Display12.text+= ('Ж')&amp;#10;    elif 'w' in keys:&amp;#10;            Display12.text = Display12.text[:-1]&amp;#10;            Display12.text+= ('Ц')&amp;#10;    elif 'i' in keys:&amp;#10;            Display12.text = Display12.text[:-1]&amp;#10;            Display12.text+= ('Ш')&amp;#10;#    else:&amp;#10;#        Display12.text = Display12.text[:-1]&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        Display12.text = (Display12.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            Display12.text = Display12.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                    continueRoutine = false;&amp;#10;                } else {&amp;#10;                    if (modify) {&amp;#10;                        Display12.text = (Display12.text + keys[0].upper());&amp;#10;                        modify = false;&amp;#10;                    } else {&amp;#10;                        Display12.text = (Display12.text + keys[0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;u&quot;, keys)) {&amp;#10;        Display12.text = Display12.text.slice(0, (- 1));&amp;#10;        Display12.text += &quot;\u0413&quot;;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;v&quot;, keys)) {&amp;#10;            Display12.text = Display12.text.slice(0, (- 1));&amp;#10;            Display12.text += &quot;\u041c&quot;;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;y&quot;, keys)) {&amp;#10;                Display12.text = Display12.text.slice(0, (- 1));&amp;#10;                Display12.text += &quot;\u041d&quot;;&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;r&quot;, keys)) {&amp;#10;                    Display12.text = Display12.text.slice(0, (- 1));&amp;#10;                    Display12.text += &quot;\u041a&quot;;&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;h&quot;, keys)) {&amp;#10;                        Display12.text = Display12.text.slice(0, (- 1));&amp;#10;                        Display12.text += &quot;\u0420&quot;;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;d&quot;, keys)) {&amp;#10;                            Display12.text = Display12.text.slice(0, (- 1));&amp;#10;                            Display12.text += &quot;\u0412&quot;;&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;k&quot;, keys)) {&amp;#10;                                Display12.text = Display12.text.slice(0, (- 1));&amp;#10;                                Display12.text += &quot;\u041b&quot;;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;p&quot;, keys)) {&amp;#10;                                    Display12.text = Display12.text.slice(0, (- 1));&amp;#10;                                    Display12.text += &quot;\u0417&quot;;&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;c&quot;, keys)) {&amp;#10;                                        Display12.text = Display12.text.slice(0, (- 1));&amp;#10;                                        Display12.text += &quot;\u0421&quot;;&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;n&quot;, keys)) {&amp;#10;                                            Display12.text = Display12.text.slice(0, (- 1));&amp;#10;                                            Display12.text += &quot;\u0422&quot;;&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;g&quot;, keys)) {&amp;#10;                                                Display12.text = Display12.text.slice(0, (- 1));&amp;#10;                                                Display12.text += &quot;\u041f&quot;;&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;l&quot;, keys)) {&amp;#10;                                                    Display12.text = Display12.text.slice(0, (- 1));&amp;#10;                                                    Display12.text += &quot;\u0414&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;a&quot;, keys)) {&amp;#10;                                                        Display12.text = Display12.text.slice(0, (- 1));&amp;#10;                                                        Display12.text += &quot;\u0424&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                                                            Display12.text = Display12.text.slice(0, (- 5));&amp;#10;                                                            Display12.text += &quot;\u0411&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                Display12.text = Display12.text.slice(0, (- 9));&amp;#10;                                                                Display12.text += &quot;\u0416&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;w&quot;, keys)) {&amp;#10;                                                                    Display12.text = Display12.text.slice(0, (- 1));&amp;#10;                                                                    Display12.text += &quot;\u0426&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;i&quot;, keys)) {&amp;#10;                                                                        Display12.text = Display12.text.slice(0, (- 1));&amp;#10;                                                                        Display12.text += &quot;\u0428&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(Display12.text);&amp;#10;PrRecall_12.addData(&quot;Answer of Pax&quot;, Display12.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(Display12.text)&amp;#10;PrRecall_12.addData('Answer of Pax', Display12.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_23" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="warning">
      <PolygonComponent name="B1">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="B1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="Question">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="Question" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Вы готовы продолжить эксперимент?&amp;#10;Если готовы, нажмите &quot;enter&quot;.&amp;#10;&amp;#10;Помните, что в эксперименте важна и правильность решения задач, и количество букв, которые вы запомните. " valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Answer">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Answer" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Reminder">
      <PolygonComponent name="B3">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="B3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <KeyboardComponent name="Dec">
        <Param name="allowedKeys" updates="constant" val="'p','s'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Dec" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="I0">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="I0" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Помните, что при решении задачи: &amp;#10;клавиша &quot;1&quot; обозначает верное решение;&amp;#10;клавиша &quot;0&quot; - неверное.&amp;#10;&amp;#10;Перед началом каждого блока у вас будет время для того, чтобы подготовиться, удобно положить руки на клавиатуру. &amp;#10;&amp;#10;Если вы готовы продолжить, нажмите &quot;enter&quot;" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="E0">
        <Param name="allowedKeys" updates="constant" val="'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="E0" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="Hint_part">
        <Param name="Before Experiment" updates="constant" val="Correct_list = ['0','1','1','0','0','0','1','0','1','1','0','1','0','0','1','0','1','1','0','0','1','1','1','0','1','1','1','0','1','1','0','1','0','0','0','1','0','1','0','1','0','0','1','0','0','1','1','1','1','0','0','0','0','1']" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="Correct_list = [&quot;0&quot;, &quot;1&quot;, &quot;1&quot;, &quot;0&quot;, &quot;0&quot;, &quot;0&quot;, &quot;1&quot;, &quot;0&quot;, &quot;1&quot;, &quot;1&quot;, &quot;0&quot;, &quot;1&quot;, &quot;0&quot;, &quot;0&quot;, &quot;1&quot;, &quot;0&quot;, &quot;1&quot;, &quot;1&quot;, &quot;0&quot;, &quot;0&quot;, &quot;1&quot;, &quot;1&quot;, &quot;1&quot;, &quot;0&quot;, &quot;1&quot;, &quot;1&quot;, &quot;1&quot;, &quot;0&quot;, &quot;1&quot;, &quot;1&quot;, &quot;0&quot;, &quot;1&quot;, &quot;0&quot;, &quot;0&quot;, &quot;0&quot;, &quot;1&quot;, &quot;0&quot;, &quot;1&quot;, &quot;0&quot;, &quot;1&quot;, &quot;0&quot;, &quot;0&quot;, &quot;1&quot;, &quot;0&quot;, &quot;0&quot;, &quot;1&quot;, &quot;1&quot;, &quot;1&quot;, &quot;1&quot;, &quot;0&quot;, &quot;0&quot;, &quot;0&quot;, &quot;0&quot;, &quot;1&quot;];&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="DoP = 1&amp;#10;DoExp = 1" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="DoP = 1;&amp;#10;DoExp = 1;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if ((Dec.keys === &quot;s&quot;)) {&amp;#10;    DoP = 0;&amp;#10;    DoPrac = 0;&amp;#10;    c = 4;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="#if(Dec.keys == 'return'):&amp;#10;#    DoP = 1&amp;#10;&amp;#10;if(Dec.keys == 's'):&amp;#10;    DoP = 0&amp;#10;    DoPrac = 0&amp;#10;#    DoExp = 1&amp;#10;    c = 4&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="Hint_part" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Thank_2">
      <PolygonComponent name="polygon">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="polygon" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(5.5, 5.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="text_4">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Спасибо за ваше участие в нашем эксперименте. &amp;#10;Все полученные в эксперименте данные - анонимны. &amp;#10;&amp;#10;Если вы хотите закончить эксперимент, нажмите &quot;enter&quot;. " valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="Welcome_screen"/>
    <Routine name="Instruction_1"/>
    <Routine name="Instruction_1_1"/>
    <Routine name="Reminder"/>
    <Routine name="Blank100"/>
    <LoopInitiator loopType="TrialHandler" name="Practice_1">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="DoP" valType="code"/>
      <Param name="name" updates="None" val="Practice_1" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Codepart_2"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Practice__1">
      <Param name="Selected rows" updates="None" val=":2" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('P1', '(10 / 1) - 5 = 7 ? A'), ('P2', '(7 x 7) + 1 = 50 ? I'), ('P3', '(8 x 4) + 2 = 34 ? O'), ('P4', '(2 x 7) + 1 = 13 ? E'), ('P5', '(10 x 2) + 3 = 22 ? Y'), ('P6', '(2 x 3) + 5 = 10 ? U')]), OrderedDict([('P1', '(6 x 2) + 2 = 14 ? E'), ('P2', '(4 / 2) - 2 = 2 ? Y'), ('P3', '(9 / 1) + 5 = 14 ? U'), ('P4', '(3 x 7) - 2 = 21 ? A'), ('P5', '(2 / 1) + 7 = 9 ? I'), ('P6', '(5 x 2) + 1 = 12 ? O')]), OrderedDict([('P1', None), ('P2', None), ('P3', None), ('P4', '(9 / 3) + 3 = 6 ? O'), ('P5', '(8 / 4) + 2 = 4 ? U '), ('P6', '(7 / 1) + 6 = 13 ? I ')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Practise.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Practice__1" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Practice_2a_2"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Practice__1"/>
    <LoopInitiator loopType="TrialHandler" name="Recall_1">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Recall_1" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="PrRemember_2a"/>
    <LoopTerminator name="Recall_1"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Practice__2">
      <Param name="Selected rows" updates="None" val=":2" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('P1', '(10 / 1) - 5 = 7 ? A'), ('P2', '(7 x 7) + 1 = 50 ? I'), ('P3', '(8 x 4) + 2 = 34 ? O'), ('P4', '(2 x 7) + 1 = 13 ? E'), ('P5', '(10 x 2) + 3 = 22 ? Y'), ('P6', '(2 x 3) + 5 = 10 ? U')]), OrderedDict([('P1', '(6 x 2) + 2 = 14 ? E'), ('P2', '(4 / 2) - 2 = 2 ? Y'), ('P3', '(9 / 1) + 5 = 14 ? U'), ('P4', '(3 x 7) - 2 = 21 ? A'), ('P5', '(2 / 1) + 7 = 9 ? I'), ('P6', '(5 x 2) + 1 = 12 ? O')]), OrderedDict([('P1', None), ('P2', None), ('P3', None), ('P4', '(9 / 3) + 3 = 6 ? O'), ('P5', '(8 / 4) + 2 = 4 ? U '), ('P6', '(7 / 1) + 6 = 13 ? I ')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Practise.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Practice__2" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Practice_2b"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Practice__2"/>
    <LoopInitiator loopType="TrialHandler" name="Recall_2">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Recall_2" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="PrRemember_2b"/>
    <LoopTerminator name="Recall_2"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Practice__3">
      <Param name="Selected rows" updates="None" val=":3" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('P1', '(10 / 1) - 5 = 7 ? A'), ('P2', '(7 x 7) + 1 = 50 ? I'), ('P3', '(8 x 4) + 2 = 34 ? O'), ('P4', '(2 x 7) + 1 = 13 ? E'), ('P5', '(10 x 2) + 3 = 22 ? Y'), ('P6', '(2 x 3) + 5 = 10 ? U')]), OrderedDict([('P1', '(6 x 2) + 2 = 14 ? E'), ('P2', '(4 / 2) - 2 = 2 ? Y'), ('P3', '(9 / 1) + 5 = 14 ? U'), ('P4', '(3 x 7) - 2 = 21 ? A'), ('P5', '(2 / 1) + 7 = 9 ? I'), ('P6', '(5 x 2) + 1 = 12 ? O')]), OrderedDict([('P1', None), ('P2', None), ('P3', None), ('P4', '(9 / 3) + 3 = 6 ? O'), ('P5', '(8 / 4) + 2 = 4 ? U '), ('P6', '(7 / 1) + 6 = 13 ? I ')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Practise.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Practice__3" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Practice_2c"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Practice__3"/>
    <LoopInitiator loopType="TrialHandler" name="Recall_3">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Recall_3" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="PrRemember_2c"/>
    <LoopTerminator name="Recall_3"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Practice__4">
      <Param name="Selected rows" updates="None" val=":3" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('P1', '(10 / 1) - 5 = 7 ? A'), ('P2', '(7 x 7) + 1 = 50 ? I'), ('P3', '(8 x 4) + 2 = 34 ? O'), ('P4', '(2 x 7) + 1 = 13 ? E'), ('P5', '(10 x 2) + 3 = 22 ? Y'), ('P6', '(2 x 3) + 5 = 10 ? U')]), OrderedDict([('P1', '(6 x 2) + 2 = 14 ? E'), ('P2', '(4 / 2) - 2 = 2 ? Y'), ('P3', '(9 / 1) + 5 = 14 ? U'), ('P4', '(3 x 7) - 2 = 21 ? A'), ('P5', '(2 / 1) + 7 = 9 ? I'), ('P6', '(5 x 2) + 1 = 12 ? O')]), OrderedDict([('P1', None), ('P2', None), ('P3', None), ('P4', '(9 / 3) + 3 = 6 ? O'), ('P5', '(8 / 4) + 2 = 4 ? U '), ('P6', '(7 / 1) + 6 = 13 ? I ')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Practise.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Practice__4" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Practice_3a"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Practice__4"/>
    <LoopInitiator loopType="TrialHandler" name="Recall_4">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Recall_4" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="PrRemember_3a"/>
    <LoopTerminator name="Recall_4"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Practice__5">
      <Param name="Selected rows" updates="None" val=":4" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('P1', '(10 / 1) - 5 = 7 ? A'), ('P2', '(7 x 7) + 1 = 50 ? I'), ('P3', '(8 x 4) + 2 = 34 ? O'), ('P4', '(2 x 7) + 1 = 13 ? E'), ('P5', '(10 x 2) + 3 = 22 ? Y'), ('P6', '(2 x 3) + 5 = 10 ? U')]), OrderedDict([('P1', '(6 x 2) + 2 = 14 ? E'), ('P2', '(4 / 2) - 2 = 2 ? Y'), ('P3', '(9 / 1) + 5 = 14 ? U'), ('P4', '(3 x 7) - 2 = 21 ? A'), ('P5', '(2 / 1) + 7 = 9 ? I'), ('P6', '(5 x 2) + 1 = 12 ? O')]), OrderedDict([('P1', None), ('P2', None), ('P3', None), ('P4', '(9 / 3) + 3 = 6 ? O'), ('P5', '(8 / 4) + 2 = 4 ? U '), ('P6', '(7 / 1) + 6 = 13 ? I ')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Practise.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Practice__5" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Practice_3b"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Practice__5"/>
    <LoopInitiator loopType="TrialHandler" name="Recall_5">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Recall_5" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="PrRemember_3b"/>
    <LoopTerminator name="Recall_5"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Practice__6">
      <Param name="Selected rows" updates="None" val=":4" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('P1', '(10 / 1) - 5 = 7 ? A'), ('P2', '(7 x 7) + 1 = 50 ? I'), ('P3', '(8 x 4) + 2 = 34 ? O'), ('P4', '(2 x 7) + 1 = 13 ? E'), ('P5', '(10 x 2) + 3 = 22 ? Y'), ('P6', '(2 x 3) + 5 = 10 ? U')]), OrderedDict([('P1', '(6 x 2) + 2 = 14 ? E'), ('P2', '(4 / 2) - 2 = 2 ? Y'), ('P3', '(9 / 1) + 5 = 14 ? U'), ('P4', '(3 x 7) - 2 = 21 ? A'), ('P5', '(2 / 1) + 7 = 9 ? I'), ('P6', '(5 x 2) + 1 = 12 ? O')]), OrderedDict([('P1', None), ('P2', None), ('P3', None), ('P4', '(9 / 3) + 3 = 6 ? O'), ('P5', '(8 / 4) + 2 = 4 ? U '), ('P6', '(7 / 1) + 6 = 13 ? I ')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Practise.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Practice__6" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Practice_3c"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Practice__6"/>
    <LoopInitiator loopType="TrialHandler" name="Recall_6">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Recall_6" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="PrRemember_3c"/>
    <LoopTerminator name="Recall_6"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Practice_7">
      <Param name="Selected rows" updates="None" val=":5" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('P1', '(10 / 1) - 5 = 7 ? A'), ('P2', '(7 x 7) + 1 = 50 ? I'), ('P3', '(8 x 4) + 2 = 34 ? O'), ('P4', '(2 x 7) + 1 = 13 ? E'), ('P5', '(10 x 2) + 3 = 22 ? Y'), ('P6', '(2 x 3) + 5 = 10 ? U'), ('P7', '(10 / 1) - 5 = 7 ? R'), ('P8', '(7 x 7) + 1 = 50 ? I'), ('P9', '(8 x 4) + 2 = 34 ? Q'), ('P10', '(2 x 7) + 1 = 13 ? Z'), ('P11', '(10 x 2) + 3 = 22 P'), ('P12', '(2 x 3) + 5 = 10 ? T')]), OrderedDict([('P1', '(6 x 2) + 2 = 14 ? E'), ('P2', '(4 / 2) - 2 = 2 ? Y'), ('P3', '(9 / 1) + 5 = 14 ? U'), ('P4', '(3 x 7) - 2 = 21 ? A'), ('P5', '(2 / 1) + 7 = 9 ? I'), ('P6', '(5 x 2) + 1 = 12 ? O'), ('P7', '(6 x 2) + 2 = 14 ? T'), ('P8', '(4 / 2) - 2 = 2 ? Y'), ('P9', '(9 / 1) + 5 = 14 ? G'), ('P10', '(3 x 7) - 2 = 21 ? R'), ('P11', '(2 / 1) + 7 = 9 ? J'), ('P12', '(5 x 2) + 1 = 12 ? B')]), OrderedDict([('P1', None), ('P2', None), ('P3', None), ('P4', '(9 / 3) + 3 = 6 ? O'), ('P5', '(8 / 4) + 2 = 4 ? U '), ('P6', '(7 / 1) + 6 = 13 ? I '), ('P7', '(2 x 7) + 1 = 13 ? N'), ('P8', '(10 / 1) + 3 = 13 ? O'), ('P9', '(5 x 2) + 2 = 10 ? K'), ('P10', '(9 / 3) + 3 = 6 ? F'), ('P11', '(8 / 4) + 2 = 4 ? S'), ('P12', '(7 / 1) + 6 = 13 ? V')]), OrderedDict([('P1', None), ('P2', None), ('P3', None), ('P4', None), ('P5', None), ('P6', None), ('P7', '(4 / 2) - 2 = 2 ? V'), ('P8', '(6 x 2) + 2 = 14 ? E'), ('P9', '(3 / 1) + 1 = 4 ? P'), ('P10', '(7 x 2) + 3 = 17 ? M'), ('P11', '(9 / 1) + 1 = 10 ? N'), ('P12', '(8 x 3) - 1 = 22 ? Q')]), OrderedDict([('P1', None), ('P2', None), ('P3', None), ('P4', None), ('P5', None), ('P6', None), ('P7', None), ('P8', None), ('P9', None), ('P10', '(4 x 2) + 1 = 9 ? S'), ('P11', '(6 / 2) + 3 = 7 ? R'), ('P12', '(9 / 3) + 1 = 3 ? G')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Practise.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Practice_7" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Practice_new_1"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Practice_7"/>
    <LoopInitiator loopType="TrialHandler" name="PrRecall_7">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="PrRecall_7" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="PrRemember_new_1"/>
    <LoopTerminator name="PrRecall_7"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Practice_8">
      <Param name="Selected rows" updates="None" val=":5" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('P1', '(10 / 1) - 5 = 7 ? A'), ('P2', '(7 x 7) + 1 = 50 ? I'), ('P3', '(8 x 4) + 2 = 34 ? O'), ('P4', '(2 x 7) + 1 = 13 ? E'), ('P5', '(10 x 2) + 3 = 22 ? Y'), ('P6', '(2 x 3) + 5 = 10 ? U'), ('P7', '(10 / 1) - 5 = 7 ? R'), ('P8', '(7 x 7) + 1 = 50 ? I'), ('P9', '(8 x 4) + 2 = 34 ? Q'), ('P10', '(2 x 7) + 1 = 13 ? Z'), ('P11', '(10 x 2) + 3 = 22 P'), ('P12', '(2 x 3) + 5 = 10 ? T')]), OrderedDict([('P1', '(6 x 2) + 2 = 14 ? E'), ('P2', '(4 / 2) - 2 = 2 ? Y'), ('P3', '(9 / 1) + 5 = 14 ? U'), ('P4', '(3 x 7) - 2 = 21 ? A'), ('P5', '(2 / 1) + 7 = 9 ? I'), ('P6', '(5 x 2) + 1 = 12 ? O'), ('P7', '(6 x 2) + 2 = 14 ? T'), ('P8', '(4 / 2) - 2 = 2 ? Y'), ('P9', '(9 / 1) + 5 = 14 ? G'), ('P10', '(3 x 7) - 2 = 21 ? R'), ('P11', '(2 / 1) + 7 = 9 ? J'), ('P12', '(5 x 2) + 1 = 12 ? B')]), OrderedDict([('P1', None), ('P2', None), ('P3', None), ('P4', '(9 / 3) + 3 = 6 ? O'), ('P5', '(8 / 4) + 2 = 4 ? U '), ('P6', '(7 / 1) + 6 = 13 ? I '), ('P7', '(2 x 7) + 1 = 13 ? N'), ('P8', '(10 / 1) + 3 = 13 ? O'), ('P9', '(5 x 2) + 2 = 10 ? K'), ('P10', '(9 / 3) + 3 = 6 ? F'), ('P11', '(8 / 4) + 2 = 4 ? S'), ('P12', '(7 / 1) + 6 = 13 ? V')]), OrderedDict([('P1', None), ('P2', None), ('P3', None), ('P4', None), ('P5', None), ('P6', None), ('P7', '(4 / 2) - 2 = 2 ? V'), ('P8', '(6 x 2) + 2 = 14 ? E'), ('P9', '(3 / 1) + 1 = 4 ? P'), ('P10', '(7 x 2) + 3 = 17 ? M'), ('P11', '(9 / 1) + 1 = 10 ? N'), ('P12', '(8 x 3) - 1 = 22 ? Q')]), OrderedDict([('P1', None), ('P2', None), ('P3', None), ('P4', None), ('P5', None), ('P6', None), ('P7', None), ('P8', None), ('P9', None), ('P10', '(4 x 2) + 1 = 9 ? S'), ('P11', '(6 / 2) + 3 = 7 ? R'), ('P12', '(9 / 3) + 1 = 3 ? G')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Practise.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Practice_8" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Practice_new_2"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Practice_8"/>
    <LoopInitiator loopType="TrialHandler" name="PrRecall_8">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="PrRecall_8" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="PrRemember_new_2"/>
    <LoopTerminator name="PrRecall_8"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Practice_9">
      <Param name="Selected rows" updates="None" val=":6" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('P1', '(10 / 1) - 5 = 7 ? A'), ('P2', '(7 x 7) + 1 = 50 ? I'), ('P3', '(8 x 4) + 2 = 34 ? O'), ('P4', '(2 x 7) + 1 = 13 ? E'), ('P5', '(10 x 2) + 3 = 22 ? Y'), ('P6', '(2 x 3) + 5 = 10 ? U'), ('P7', '(10 / 1) - 5 = 7 ? R'), ('P8', '(7 x 7) + 1 = 50 ? I'), ('P9', '(8 x 4) + 2 = 34 ? Q'), ('P10', '(2 x 7) + 1 = 13 ? Z'), ('P11', '(10 x 2) + 3 = 22 P'), ('P12', '(2 x 3) + 5 = 10 ? T')]), OrderedDict([('P1', '(6 x 2) + 2 = 14 ? E'), ('P2', '(4 / 2) - 2 = 2 ? Y'), ('P3', '(9 / 1) + 5 = 14 ? U'), ('P4', '(3 x 7) - 2 = 21 ? A'), ('P5', '(2 / 1) + 7 = 9 ? I'), ('P6', '(5 x 2) + 1 = 12 ? O'), ('P7', '(6 x 2) + 2 = 14 ? T'), ('P8', '(4 / 2) - 2 = 2 ? Y'), ('P9', '(9 / 1) + 5 = 14 ? G'), ('P10', '(3 x 7) - 2 = 21 ? R'), ('P11', '(2 / 1) + 7 = 9 ? J'), ('P12', '(5 x 2) + 1 = 12 ? B')]), OrderedDict([('P1', None), ('P2', None), ('P3', None), ('P4', '(9 / 3) + 3 = 6 ? O'), ('P5', '(8 / 4) + 2 = 4 ? U '), ('P6', '(7 / 1) + 6 = 13 ? I '), ('P7', '(2 x 7) + 1 = 13 ? N'), ('P8', '(10 / 1) + 3 = 13 ? O'), ('P9', '(5 x 2) + 2 = 10 ? K'), ('P10', '(9 / 3) + 3 = 6 ? F'), ('P11', '(8 / 4) + 2 = 4 ? S'), ('P12', '(7 / 1) + 6 = 13 ? V')]), OrderedDict([('P1', None), ('P2', None), ('P3', None), ('P4', None), ('P5', None), ('P6', None), ('P7', '(4 / 2) - 2 = 2 ? V'), ('P8', '(6 x 2) + 2 = 14 ? E'), ('P9', '(3 / 1) + 1 = 4 ? P'), ('P10', '(7 x 2) + 3 = 17 ? M'), ('P11', '(9 / 1) + 1 = 10 ? N'), ('P12', '(8 x 3) - 1 = 22 ? Q')]), OrderedDict([('P1', None), ('P2', None), ('P3', None), ('P4', None), ('P5', None), ('P6', None), ('P7', None), ('P8', None), ('P9', None), ('P10', '(4 x 2) + 1 = 9 ? S'), ('P11', '(6 / 2) + 3 = 7 ? R'), ('P12', '(9 / 3) + 1 = 3 ? G')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Practise.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Practice_9" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Practice_new_3"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Practice_9"/>
    <LoopInitiator loopType="TrialHandler" name="PrRecall_9">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="PrRecall_9" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="PrRemember_new_3"/>
    <LoopTerminator name="PrRecall_9"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Practice_10">
      <Param name="Selected rows" updates="None" val=":6" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('P1', '(10 / 1) - 5 = 7 ? A'), ('P2', '(7 x 7) + 1 = 50 ? I'), ('P3', '(8 x 4) + 2 = 34 ? O'), ('P4', '(2 x 7) + 1 = 13 ? E'), ('P5', '(10 x 2) + 3 = 22 ? Y'), ('P6', '(2 x 3) + 5 = 10 ? U'), ('P7', '(10 / 1) - 5 = 7 ? R'), ('P8', '(7 x 7) + 1 = 50 ? I'), ('P9', '(8 x 4) + 2 = 34 ? Q'), ('P10', '(2 x 7) + 1 = 13 ? Z'), ('P11', '(10 x 2) + 3 = 22 P'), ('P12', '(2 x 3) + 5 = 10 ? T')]), OrderedDict([('P1', '(6 x 2) + 2 = 14 ? E'), ('P2', '(4 / 2) - 2 = 2 ? Y'), ('P3', '(9 / 1) + 5 = 14 ? U'), ('P4', '(3 x 7) - 2 = 21 ? A'), ('P5', '(2 / 1) + 7 = 9 ? I'), ('P6', '(5 x 2) + 1 = 12 ? O'), ('P7', '(6 x 2) + 2 = 14 ? T'), ('P8', '(4 / 2) - 2 = 2 ? Y'), ('P9', '(9 / 1) + 5 = 14 ? G'), ('P10', '(3 x 7) - 2 = 21 ? R'), ('P11', '(2 / 1) + 7 = 9 ? J'), ('P12', '(5 x 2) + 1 = 12 ? B')]), OrderedDict([('P1', None), ('P2', None), ('P3', None), ('P4', '(9 / 3) + 3 = 6 ? O'), ('P5', '(8 / 4) + 2 = 4 ? U '), ('P6', '(7 / 1) + 6 = 13 ? I '), ('P7', '(2 x 7) + 1 = 13 ? N'), ('P8', '(10 / 1) + 3 = 13 ? O'), ('P9', '(5 x 2) + 2 = 10 ? K'), ('P10', '(9 / 3) + 3 = 6 ? F'), ('P11', '(8 / 4) + 2 = 4 ? S'), ('P12', '(7 / 1) + 6 = 13 ? V')]), OrderedDict([('P1', None), ('P2', None), ('P3', None), ('P4', None), ('P5', None), ('P6', None), ('P7', '(4 / 2) - 2 = 2 ? V'), ('P8', '(6 x 2) + 2 = 14 ? E'), ('P9', '(3 / 1) + 1 = 4 ? P'), ('P10', '(7 x 2) + 3 = 17 ? M'), ('P11', '(9 / 1) + 1 = 10 ? N'), ('P12', '(8 x 3) - 1 = 22 ? Q')]), OrderedDict([('P1', None), ('P2', None), ('P3', None), ('P4', None), ('P5', None), ('P6', None), ('P7', None), ('P8', None), ('P9', None), ('P10', '(4 x 2) + 1 = 9 ? S'), ('P11', '(6 / 2) + 3 = 7 ? R'), ('P12', '(9 / 3) + 1 = 3 ? G')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Practise.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Practice_10" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Practice_new_4"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Practice_10"/>
    <LoopInitiator loopType="TrialHandler" name="PrRecall_10">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="PrRecall_10" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="PrRemember_new_4"/>
    <LoopTerminator name="PrRecall_10"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Practice_11">
      <Param name="Selected rows" updates="None" val=":7" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('P1', '(10 / 1) - 5 = 7 ? A'), ('P2', '(7 x 7) + 1 = 50 ? I'), ('P3', '(8 x 4) + 2 = 34 ? O'), ('P4', '(2 x 7) + 1 = 13 ? E'), ('P5', '(10 x 2) + 3 = 22 ? Y'), ('P6', '(2 x 3) + 5 = 10 ? U'), ('P7', '(10 / 1) - 5 = 7 ? R'), ('P8', '(7 x 7) + 1 = 50 ? I'), ('P9', '(8 x 4) + 2 = 34 ? Q'), ('P10', '(2 x 7) + 1 = 13 ? Z'), ('P11', '(10 x 2) + 3 = 22 P'), ('P12', '(2 x 3) + 5 = 10 ? T')]), OrderedDict([('P1', '(6 x 2) + 2 = 14 ? E'), ('P2', '(4 / 2) - 2 = 2 ? Y'), ('P3', '(9 / 1) + 5 = 14 ? U'), ('P4', '(3 x 7) - 2 = 21 ? A'), ('P5', '(2 / 1) + 7 = 9 ? I'), ('P6', '(5 x 2) + 1 = 12 ? O'), ('P7', '(6 x 2) + 2 = 14 ? T'), ('P8', '(4 / 2) - 2 = 2 ? Y'), ('P9', '(9 / 1) + 5 = 14 ? G'), ('P10', '(3 x 7) - 2 = 21 ? R'), ('P11', '(2 / 1) + 7 = 9 ? J'), ('P12', '(5 x 2) + 1 = 12 ? B')]), OrderedDict([('P1', None), ('P2', None), ('P3', None), ('P4', '(9 / 3) + 3 = 6 ? O'), ('P5', '(8 / 4) + 2 = 4 ? U '), ('P6', '(7 / 1) + 6 = 13 ? I '), ('P7', '(2 x 7) + 1 = 13 ? N'), ('P8', '(10 / 1) + 3 = 13 ? O'), ('P9', '(5 x 2) + 2 = 10 ? K'), ('P10', '(9 / 3) + 3 = 6 ? F'), ('P11', '(8 / 4) + 2 = 4 ? S'), ('P12', '(7 / 1) + 6 = 13 ? V')]), OrderedDict([('P1', None), ('P2', None), ('P3', None), ('P4', None), ('P5', None), ('P6', None), ('P7', '(4 / 2) - 2 = 2 ? V'), ('P8', '(6 x 2) + 2 = 14 ? E'), ('P9', '(3 / 1) + 1 = 4 ? P'), ('P10', '(7 x 2) + 3 = 17 ? M'), ('P11', '(9 / 1) + 1 = 10 ? N'), ('P12', '(8 x 3) - 1 = 22 ? Q')]), OrderedDict([('P1', None), ('P2', None), ('P3', None), ('P4', None), ('P5', None), ('P6', None), ('P7', None), ('P8', None), ('P9', None), ('P10', '(4 x 2) + 1 = 9 ? S'), ('P11', '(6 / 2) + 3 = 7 ? R'), ('P12', '(9 / 3) + 1 = 3 ? G')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Practise.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Practice_11" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Practice_new_5"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Practice_11"/>
    <LoopInitiator loopType="TrialHandler" name="PrRecall_11">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="PrRecall_11" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="PrRemember_new_5"/>
    <LoopTerminator name="PrRecall_11"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Practice_12">
      <Param name="Selected rows" updates="None" val=":7" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('P1', '(10 / 1) - 5 = 7 ? A'), ('P2', '(7 x 7) + 1 = 50 ? I'), ('P3', '(8 x 4) + 2 = 34 ? O'), ('P4', '(2 x 7) + 1 = 13 ? E'), ('P5', '(10 x 2) + 3 = 22 ? Y'), ('P6', '(2 x 3) + 5 = 10 ? U'), ('P7', '(10 / 1) - 5 = 7 ? R'), ('P8', '(7 x 7) + 1 = 50 ? I'), ('P9', '(8 x 4) + 2 = 34 ? Q'), ('P10', '(2 x 7) + 1 = 13 ? Z'), ('P11', '(10 x 2) + 3 = 22 P'), ('P12', '(2 x 3) + 5 = 10 ? T')]), OrderedDict([('P1', '(6 x 2) + 2 = 14 ? E'), ('P2', '(4 / 2) - 2 = 2 ? Y'), ('P3', '(9 / 1) + 5 = 14 ? U'), ('P4', '(3 x 7) - 2 = 21 ? A'), ('P5', '(2 / 1) + 7 = 9 ? I'), ('P6', '(5 x 2) + 1 = 12 ? O'), ('P7', '(6 x 2) + 2 = 14 ? T'), ('P8', '(4 / 2) - 2 = 2 ? Y'), ('P9', '(9 / 1) + 5 = 14 ? G'), ('P10', '(3 x 7) - 2 = 21 ? R'), ('P11', '(2 / 1) + 7 = 9 ? J'), ('P12', '(5 x 2) + 1 = 12 ? B')]), OrderedDict([('P1', None), ('P2', None), ('P3', None), ('P4', '(9 / 3) + 3 = 6 ? O'), ('P5', '(8 / 4) + 2 = 4 ? U '), ('P6', '(7 / 1) + 6 = 13 ? I '), ('P7', '(2 x 7) + 1 = 13 ? N'), ('P8', '(10 / 1) + 3 = 13 ? O'), ('P9', '(5 x 2) + 2 = 10 ? K'), ('P10', '(9 / 3) + 3 = 6 ? F'), ('P11', '(8 / 4) + 2 = 4 ? S'), ('P12', '(7 / 1) + 6 = 13 ? V')]), OrderedDict([('P1', None), ('P2', None), ('P3', None), ('P4', None), ('P5', None), ('P6', None), ('P7', '(4 / 2) - 2 = 2 ? V'), ('P8', '(6 x 2) + 2 = 14 ? E'), ('P9', '(3 / 1) + 1 = 4 ? P'), ('P10', '(7 x 2) + 3 = 17 ? M'), ('P11', '(9 / 1) + 1 = 10 ? N'), ('P12', '(8 x 3) - 1 = 22 ? Q')]), OrderedDict([('P1', None), ('P2', None), ('P3', None), ('P4', None), ('P5', None), ('P6', None), ('P7', None), ('P8', None), ('P9', None), ('P10', '(4 x 2) + 1 = 9 ? S'), ('P11', '(6 / 2) + 3 = 7 ? R'), ('P12', '(9 / 3) + 1 = 3 ? G')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Practise.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Practice_12" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Practice_new_6"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Practice_12"/>
    <LoopInitiator loopType="TrialHandler" name="PrRecall_12">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="PrRecall_12" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="PrRemember_new_6"/>
    <LoopTerminator name="PrRecall_12"/>
    <Routine name="Blank100"/>
    <Routine name="Instruction_2"/>
    <LoopTerminator name="Practice_1"/>
    <Routine name="Time_Calculation"/>
    <LoopInitiator loopType="TrialHandler" name="Practice_2">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="DoPrac" valType="code"/>
      <Param name="name" updates="None" val="Practice_2" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="CodePart"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Practice__1b">
      <Param name="Selected rows" updates="None" val=":2" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('P1', '(10 / 1) - 5 = 7 ? A'), ('P2', '(7 x 7) + 1 = 50 ? I'), ('P3', '(8 x 4) + 2 = 34 ? O'), ('P4', '(2 x 7) + 1 = 13 ? E'), ('P5', '(10 x 2) + 3 = 22 ? Y'), ('P6', '(2 x 3) + 5 = 10 ? U')]), OrderedDict([('P1', '(6 x 2) + 2 = 14 ? E'), ('P2', '(4 / 2) - 2 = 2 ? Y'), ('P3', '(9 / 1) + 5 = 14 ? U'), ('P4', '(3 x 7) - 2 = 21 ? A'), ('P5', '(2 / 1) + 7 = 9 ? I'), ('P6', '(5 x 2) + 1 = 12 ? O')]), OrderedDict([('P1', None), ('P2', None), ('P3', None), ('P4', '(9 / 3) + 3 = 6 ? O'), ('P5', '(8 / 4) + 2 = 4 ? U '), ('P6', '(7 / 1) + 6 = 13 ? I ')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Practise.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Practice__1b" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Practice_2a_2"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Practice__1b"/>
    <LoopInitiator loopType="TrialHandler" name="Recall__2a">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Recall__2a" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Pr_2_Remember_2a"/>
    <LoopTerminator name="Recall__2a"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Practice__2b">
      <Param name="Selected rows" updates="None" val=":2" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('P1', '(10 / 1) - 5 = 7 ? A'), ('P2', '(7 x 7) + 1 = 50 ? I'), ('P3', '(8 x 4) + 2 = 34 ? O'), ('P4', '(2 x 7) + 1 = 13 ? E'), ('P5', '(10 x 2) + 3 = 22 ? Y'), ('P6', '(2 x 3) + 5 = 10 ? U')]), OrderedDict([('P1', '(6 x 2) + 2 = 14 ? E'), ('P2', '(4 / 2) - 2 = 2 ? Y'), ('P3', '(9 / 1) + 5 = 14 ? U'), ('P4', '(3 x 7) - 2 = 21 ? A'), ('P5', '(2 / 1) + 7 = 9 ? I'), ('P6', '(5 x 2) + 1 = 12 ? O')]), OrderedDict([('P1', None), ('P2', None), ('P3', None), ('P4', '(9 / 3) + 3 = 6 ? O'), ('P5', '(8 / 4) + 2 = 4 ? U '), ('P6', '(7 / 1) + 6 = 13 ? I ')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Practise.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Practice__2b" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Practice_2b"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Practice__2b"/>
    <LoopInitiator loopType="TrialHandler" name="Recall__2b">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Recall__2b" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Pr_2_Rememember_2b"/>
    <LoopTerminator name="Recall__2b"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Practice__3b">
      <Param name="Selected rows" updates="None" val=":3" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('P1', '(10 / 1) - 5 = 7 ? A'), ('P2', '(7 x 7) + 1 = 50 ? I'), ('P3', '(8 x 4) + 2 = 34 ? O'), ('P4', '(2 x 7) + 1 = 13 ? E'), ('P5', '(10 x 2) + 3 = 22 ? Y'), ('P6', '(2 x 3) + 5 = 10 ? U')]), OrderedDict([('P1', '(6 x 2) + 2 = 14 ? E'), ('P2', '(4 / 2) - 2 = 2 ? Y'), ('P3', '(9 / 1) + 5 = 14 ? U'), ('P4', '(3 x 7) - 2 = 21 ? A'), ('P5', '(2 / 1) + 7 = 9 ? I'), ('P6', '(5 x 2) + 1 = 12 ? O')]), OrderedDict([('P1', None), ('P2', None), ('P3', None), ('P4', '(9 / 3) + 3 = 6 ? O'), ('P5', '(8 / 4) + 2 = 4 ? U '), ('P6', '(7 / 1) + 6 = 13 ? I ')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Practise.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Practice__3b" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Practice_2c"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Practice__3b"/>
    <LoopInitiator loopType="TrialHandler" name="Recall__2c">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Recall__2c" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Pr_2_Remember_2c"/>
    <LoopTerminator name="Recall__2c"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Practice__4b">
      <Param name="Selected rows" updates="None" val=":3" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('P1', '(10 / 1) - 5 = 7 ? A'), ('P2', '(7 x 7) + 1 = 50 ? I'), ('P3', '(8 x 4) + 2 = 34 ? O'), ('P4', '(2 x 7) + 1 = 13 ? E'), ('P5', '(10 x 2) + 3 = 22 ? Y'), ('P6', '(2 x 3) + 5 = 10 ? U')]), OrderedDict([('P1', '(6 x 2) + 2 = 14 ? E'), ('P2', '(4 / 2) - 2 = 2 ? Y'), ('P3', '(9 / 1) + 5 = 14 ? U'), ('P4', '(3 x 7) - 2 = 21 ? A'), ('P5', '(2 / 1) + 7 = 9 ? I'), ('P6', '(5 x 2) + 1 = 12 ? O')]), OrderedDict([('P1', None), ('P2', None), ('P3', None), ('P4', '(9 / 3) + 3 = 6 ? O'), ('P5', '(8 / 4) + 2 = 4 ? U '), ('P6', '(7 / 1) + 6 = 13 ? I ')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Practise.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Practice__4b" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Practice_3a"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Practice__4b"/>
    <LoopInitiator loopType="TrialHandler" name="Recall__3a">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Recall__3a" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Pr_2_Remember_3a"/>
    <LoopTerminator name="Recall__3a"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Practice__5b">
      <Param name="Selected rows" updates="None" val=":4" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('P1', '(10 / 1) - 5 = 7 ? A'), ('P2', '(7 x 7) + 1 = 50 ? I'), ('P3', '(8 x 4) + 2 = 34 ? O'), ('P4', '(2 x 7) + 1 = 13 ? E'), ('P5', '(10 x 2) + 3 = 22 ? Y'), ('P6', '(2 x 3) + 5 = 10 ? U')]), OrderedDict([('P1', '(6 x 2) + 2 = 14 ? E'), ('P2', '(4 / 2) - 2 = 2 ? Y'), ('P3', '(9 / 1) + 5 = 14 ? U'), ('P4', '(3 x 7) - 2 = 21 ? A'), ('P5', '(2 / 1) + 7 = 9 ? I'), ('P6', '(5 x 2) + 1 = 12 ? O')]), OrderedDict([('P1', None), ('P2', None), ('P3', None), ('P4', '(9 / 3) + 3 = 6 ? O'), ('P5', '(8 / 4) + 2 = 4 ? U '), ('P6', '(7 / 1) + 6 = 13 ? I ')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Practise.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Practice__5b" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Practice_3b"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Practice__5b"/>
    <LoopInitiator loopType="TrialHandler" name="Recall__3b">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Recall__3b" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Pr_2_Remember_3b"/>
    <LoopTerminator name="Recall__3b"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Practice__6b">
      <Param name="Selected rows" updates="None" val=":4" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('P1', '(10 / 1) - 5 = 7 ? A'), ('P2', '(7 x 7) + 1 = 50 ? I'), ('P3', '(8 x 4) + 2 = 34 ? O'), ('P4', '(2 x 7) + 1 = 13 ? E'), ('P5', '(10 x 2) + 3 = 22 ? Y'), ('P6', '(2 x 3) + 5 = 10 ? U')]), OrderedDict([('P1', '(6 x 2) + 2 = 14 ? E'), ('P2', '(4 / 2) - 2 = 2 ? Y'), ('P3', '(9 / 1) + 5 = 14 ? U'), ('P4', '(3 x 7) - 2 = 21 ? A'), ('P5', '(2 / 1) + 7 = 9 ? I'), ('P6', '(5 x 2) + 1 = 12 ? O')]), OrderedDict([('P1', None), ('P2', None), ('P3', None), ('P4', '(9 / 3) + 3 = 6 ? O'), ('P5', '(8 / 4) + 2 = 4 ? U '), ('P6', '(7 / 1) + 6 = 13 ? I ')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Practise.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Practice__6b" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Practice_3c"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Practice__6b"/>
    <LoopInitiator loopType="TrialHandler" name="Recall__3c">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Recall__3c" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Pr_2_Remember_3c"/>
    <LoopTerminator name="Recall__3c"/>
    <Routine name="Blank100"/>
    <Routine name="Instruction_3"/>
    <LoopTerminator name="Practice_2"/>
    <Routine name="Blank100"/>
    <Routine name="StartingExp"/>
    <Routine name="Blank100"/>
    <LoopInitiator loopType="TrialHandler" name="Experiment">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="DoExp" valType="code"/>
      <Param name="name" updates="None" val="Experiment" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Trial_1">
      <Param name="Selected rows" updates="None" val=":3" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('S1', '(10 / 1) - 9 = 3  ? R'), ('S2', '(3 / 1) + 4 = 9 ? M'), ('S3', '(4 x 3) - 6 = 8 ? W'), ('S4', '(5 x 1) + 1 = 6 ? Q'), ('S5', '(4 / 1) - 4 = 0 ? G'), ('S6', '(8 / 1) - 5 = 3 ? V'), ('S7', '(2 x 2) + 1 = 5 ? X'), ('S8', '(4 x 5) - 1 = 21 ? Q'), ('S9', '(5 x 5) + 3 = 28 ? M'), ('S10', '(6 / 2) + 1 = 4  ? S'), ('S11', '(5 x 4) + 1 = 23 ? B'), ('S12', '(2 x 4) + 1 = 9 ? N'), ('S13', '(6 x 1) + 9 = 16 ? Z'), ('S14', '(4 x 2) + 1 = 9 ? V'), ('S15', '(9 / 3) + 1 = 3 ? X'), ('S16', '(5 x 3) + 3 = 18 ? R'), ('S17', '(5 x 2) + 2 = 10 ? Z'), ('S18', '(4 / 1) + 4 = 6 ? G'), ('S19', '(4 x 2) - 2 = 7  ? B'), ('S20', '(10 x 1) + 5 = 15 ? N'), ('S21', '(3 / 1) - 2 = 3 ? S')]), OrderedDict([('S1', '(2 / 1) + 4 = 6  ? W'), ('S2', '(9 x 1) - 9 = 1  ? Z'), ('S3', '(9 x 1) - 7 = 2  ? T'), ('S4', '(10 / 2) - 4 = 3 ? B'), ('S5', '(10 x 1) + 9 = 19  ? Z'), ('S6', '(2 / 2) - 2 = 0 ? S'), ('S7', '(7 / 1) - 2 = 5 ? Q'), ('S8', '(8 x 2) - 4 = 13  ? M'), ('S9', '(3 x 2) - 1 = 6 ? T'), ('S10', '(7 / 1) + 2 = 9  ? Z'), ('S11', '(7 x 2) - 1 = 14 ? X'), ('S12', '(8 / 4) + 4 = 8 ? W'), ('S13', '(9 x 5) - 1 = 44  ? S'), ('S14', '(10 / 2) + 5 = 10 ? G'), ('S15', '(7 x 7) - 1 = 49  ? V'), ('S16', '(3 / 1) + 1 = 4 ? X'), ('S17', '(8 x 3) - 1 = 22 ? W'), ('S18', '(10 / 1) + 3 = 13  ? W'), ('S19', '(7 x 2) - 3 = 12 ? M'), ('S20', '(3 / 1) +7 = 10 ? Z'), ('S21', '(7 x 2) + 3 = 17 ? W')]), OrderedDict([('S1', '(8 / 1) - 6 = 4 ? N'), ('S2', '(6 x 4) + 1 = 25 ? R'), ('S3', '(3 x 4) + 2 = 14  ? Q'), ('S4', '(9 x 4) - 6 = 32  ? W'), ('S5', None), ('S6', '(5 / 1) - 1 = 6 ? G'), ('S7', '(8 / 2) - 4 = 0  ? T'), ('S8', None), ('S9', '(6 / 3) + 8 = 10  ? W'), ('S10', '(9 / 1) + 8 = 18  ? M'), ('S11', '(3 / 1) - 1 = 4  ? S'), ('S12', '(7 / 7) + 9 = 11  ? R'), ('S13', '(10 / 1) + 1 = 11  ? X'), ('S14', '(2 x 4) + 1 = 9 ? Z'), ('S15', None), ('S16', '(7 x 7) + 1 = 48  ? T'), ('S17', '(10 / 2) - 2 = 7 ? S'), ('S18', '(6 x 3) - 2 = 17  ? B'), ('S19', '(2 / 1) - 2 = 0  ? T'), ('S20', '(2 / 2) + 5 = 7  ? R'), ('S21', '(10 x 2) + 3 = 23  ? Q')]), OrderedDict([('S1', '(6 x 7) - 6 = 38 ? T'), ('S2', '(5 / 5) + 1 = 2 ? S'), ('S3', '(7 / 1) + 6 = 12  ? G'), ('S4', '(6 / 3) + 4 = 7  ? G'), ('S5', None), ('S6', '(10 x 2) + 4 = 22 ? T'), ('S7', '(9 x 2) - 1 = 18  ? V'), ('S8', None), ('S9', '(10 x 5) + 1 = 51  ? N'), ('S10', '(10 / 1) - 1 = 11 ? V'), ('S11', '(4 / 2) - 1 = 1 ? M'), ('S12', None), ('S13', None), ('S14', '(6 x 3) - 2 = 17  ? Q'), ('S15', None), ('S16', '(6 / 2) - 3 = 2  ? Z'), ('S17', '(7 x 2) + 3 = 16  ? N'), ('S18', '(3 x 2) - 2 = 5  ? N'), ('S19', None), ('S20', '(6 / 2) + 3 = 7  ? V'), ('S21', '(5 / 1) + 7 = 13 ? N')]), OrderedDict([('S1', None), ('S2', '(7 / 7) + 6 = 7  ? B'), ('S3', '(3 x 1) - 2 = 1 ? V'), ('S4', '(7 x 1) - 6 = 2  ? N'), ('S5', None), ('S6', '(6 x 1) - 6 = 0 ? B'), ('S7', '(3 / 1) + 3 = 6  ? B'), ('S8', None), ('S9', '(7 / 1) + 6 = 12  ? S'), ('S10', '(4 / 1) - 1 = 3  ? R'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 / 2) + 8 = 10  ? N'), ('S17', '(2 x 1) + 7 = 9 ? B'), ('S18', '(5 / 5) + 5 = 6 ? V'), ('S19', None), ('S20', '(8 x 1) + 5 = 13  ? M'), ('S21', '(4 / 2) + 3 = 7  ? B')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(8 / 4) - 2 = 2  ? Z'), ('S4', '(4 x 2) + 2 = 10 ? X'), ('S5', None), ('S6', '(3 x 3) - 2 = 7  ? W'), ('S7', None), ('S8', None), ('S9', '(2 x 1) + 1 = 4 ? V'), ('S10', '(8 / 2) + 4 = 6 ? X'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(9 / 1) + 1 = 10  ? G'), ('S17', '(3 x 3) - 2 = 7  ? R'), ('S18', None), ('S19', None), ('S20', '(8 x 1) + 8 = 16  ? G'), ('S21', '(2 x 3) + 5 = 10 ? X')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(2 / 2) + 2 = 3  ? M'), ('S4', None), ('S5', None), ('S6', '(9 / 1) - 7 = 4 ? R'), ('S7', None), ('S8', None), ('S9', '(8 x 4) + 3 = 33 ? Q'), ('S10', '(9 x 3) + 2 = 29 ? Q'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 x 4) + 1 = 17  ? S'), ('S17', '(5 / 1) + 4 = 9 ? T'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)]), OrderedDict([('S1', None), ('S2', None), ('S3', None), ('S4', None), ('S5', None), ('S6', '(5 / 1) + 3 = 9 ? Q'), ('S7', None), ('S8', None), ('S9', '(3 / 3) + 1 = 2  ? G'), ('S10', None), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', None), ('S17', '(6 / 3) + 2 = 4  ? X'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Condition.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Trial_1" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Ospan_4a"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Trial_1"/>
    <LoopInitiator loopType="TrialHandler" name="Remember_1">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Remember_1" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Remember_4a"/>
    <LoopTerminator name="Remember_1"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Trial_2">
      <Param name="Selected rows" updates="None" val=":7" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('S1', '(10 / 1) - 9 = 3  ? R'), ('S2', '(3 / 1) + 4 = 9 ? M'), ('S3', '(4 x 3) - 6 = 8 ? W'), ('S4', '(5 x 1) + 1 = 6 ? Q'), ('S5', '(4 / 1) - 4 = 0 ? G'), ('S6', '(8 / 1) - 5 = 3 ? V'), ('S7', '(2 x 2) + 1 = 5 ? X'), ('S8', '(4 x 5) - 1 = 21 ? Q'), ('S9', '(5 x 5) + 3 = 28 ? M'), ('S10', '(6 / 2) + 1 = 4  ? S'), ('S11', '(5 x 4) + 1 = 23 ? B'), ('S12', '(2 x 4) + 1 = 9 ? N'), ('S13', '(6 x 1) + 9 = 16 ? Z'), ('S14', '(4 x 2) + 1 = 9 ? V'), ('S15', '(9 / 3) + 1 = 3 ? X'), ('S16', '(5 x 3) + 3 = 18 ? R'), ('S17', '(5 x 2) + 2 = 10 ? Z'), ('S18', '(4 / 1) + 4 = 6 ? G'), ('S19', '(4 x 2) - 2 = 7  ? B'), ('S20', '(10 x 1) + 5 = 15 ? N'), ('S21', '(3 / 1) - 2 = 3 ? S')]), OrderedDict([('S1', '(2 / 1) + 4 = 6  ? W'), ('S2', '(9 x 1) - 9 = 1  ? Z'), ('S3', '(9 x 1) - 7 = 2  ? T'), ('S4', '(10 / 2) - 4 = 3 ? B'), ('S5', '(10 x 1) + 9 = 19  ? Z'), ('S6', '(2 / 2) - 2 = 0 ? S'), ('S7', '(7 / 1) - 2 = 5 ? Q'), ('S8', '(8 x 2) - 4 = 13  ? M'), ('S9', '(3 x 2) - 1 = 6 ? T'), ('S10', '(7 / 1) + 2 = 9  ? Z'), ('S11', '(7 x 2) - 1 = 14 ? X'), ('S12', '(8 / 4) + 4 = 8 ? W'), ('S13', '(9 x 5) - 1 = 44  ? S'), ('S14', '(10 / 2) + 5 = 10 ? G'), ('S15', '(7 x 7) - 1 = 49  ? V'), ('S16', '(3 / 1) + 1 = 4 ? X'), ('S17', '(8 x 3) - 1 = 22 ? W'), ('S18', '(10 / 1) + 3 = 13  ? W'), ('S19', '(7 x 2) - 3 = 12 ? M'), ('S20', '(3 / 1) +7 = 10 ? Z'), ('S21', '(7 x 2) + 3 = 17 ? W')]), OrderedDict([('S1', '(8 / 1) - 6 = 4 ? N'), ('S2', '(6 x 4) + 1 = 25 ? R'), ('S3', '(3 x 4) + 2 = 14  ? Q'), ('S4', '(9 x 4) - 6 = 32  ? W'), ('S5', None), ('S6', '(5 / 1) - 1 = 6 ? G'), ('S7', '(8 / 2) - 4 = 0  ? T'), ('S8', None), ('S9', '(6 / 3) + 8 = 10  ? W'), ('S10', '(9 / 1) + 8 = 18  ? M'), ('S11', '(3 / 1) - 1 = 4  ? S'), ('S12', '(7 / 7) + 9 = 11  ? R'), ('S13', '(10 / 1) + 1 = 11  ? X'), ('S14', '(2 x 4) + 1 = 9 ? Z'), ('S15', None), ('S16', '(7 x 7) + 1 = 48  ? T'), ('S17', '(10 / 2) - 2 = 7 ? S'), ('S18', '(6 x 3) - 2 = 17  ? B'), ('S19', '(2 / 1) - 2 = 0  ? T'), ('S20', '(2 / 2) + 5 = 7  ? R'), ('S21', '(10 x 2) + 3 = 23  ? Q')]), OrderedDict([('S1', '(6 x 7) - 6 = 38 ? T'), ('S2', '(5 / 5) + 1 = 2 ? S'), ('S3', '(7 / 1) + 6 = 12  ? G'), ('S4', '(6 / 3) + 4 = 7  ? G'), ('S5', None), ('S6', '(10 x 2) + 4 = 22 ? T'), ('S7', '(9 x 2) - 1 = 18  ? V'), ('S8', None), ('S9', '(10 x 5) + 1 = 51  ? N'), ('S10', '(10 / 1) - 1 = 11 ? V'), ('S11', '(4 / 2) - 1 = 1 ? M'), ('S12', None), ('S13', None), ('S14', '(6 x 3) - 2 = 17  ? Q'), ('S15', None), ('S16', '(6 / 2) - 3 = 2  ? Z'), ('S17', '(7 x 2) + 3 = 16  ? N'), ('S18', '(3 x 2) - 2 = 5  ? N'), ('S19', None), ('S20', '(6 / 2) + 3 = 7  ? V'), ('S21', '(5 / 1) + 7 = 13 ? N')]), OrderedDict([('S1', None), ('S2', '(7 / 7) + 6 = 7  ? B'), ('S3', '(3 x 1) - 2 = 1 ? V'), ('S4', '(7 x 1) - 6 = 2  ? N'), ('S5', None), ('S6', '(6 x 1) - 6 = 0 ? B'), ('S7', '(3 / 1) + 3 = 6  ? B'), ('S8', None), ('S9', '(7 / 1) + 6 = 12  ? S'), ('S10', '(4 / 1) - 1 = 3  ? R'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 / 2) + 8 = 10  ? N'), ('S17', '(2 x 1) + 7 = 9 ? B'), ('S18', '(5 / 5) + 5 = 6 ? V'), ('S19', None), ('S20', '(8 x 1) + 5 = 13  ? M'), ('S21', '(4 / 2) + 3 = 7  ? B')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(8 / 4) - 2 = 2  ? Z'), ('S4', '(4 x 2) + 2 = 10 ? X'), ('S5', None), ('S6', '(3 x 3) - 2 = 7  ? W'), ('S7', None), ('S8', None), ('S9', '(2 x 1) + 1 = 4 ? V'), ('S10', '(8 / 2) + 4 = 6 ? X'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(9 / 1) + 1 = 10  ? G'), ('S17', '(3 x 3) - 2 = 7  ? R'), ('S18', None), ('S19', None), ('S20', '(8 x 1) + 8 = 16  ? G'), ('S21', '(2 x 3) + 5 = 10 ? X')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(2 / 2) + 2 = 3  ? M'), ('S4', None), ('S5', None), ('S6', '(9 / 1) - 7 = 4 ? R'), ('S7', None), ('S8', None), ('S9', '(8 x 4) + 3 = 33 ? Q'), ('S10', '(9 x 3) + 2 = 29 ? Q'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 x 4) + 1 = 17  ? S'), ('S17', '(5 / 1) + 4 = 9 ? T'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)]), OrderedDict([('S1', None), ('S2', None), ('S3', None), ('S4', None), ('S5', None), ('S6', '(5 / 1) + 3 = 9 ? Q'), ('S7', None), ('S8', None), ('S9', '(3 / 3) + 1 = 2  ? G'), ('S10', None), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', None), ('S17', '(6 / 3) + 2 = 4  ? X'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Condition.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Trial_2" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Ospan_5a"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Trial_2"/>
    <LoopInitiator loopType="TrialHandler" name="Remember_2">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Remember_2" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Remember_5a"/>
    <LoopTerminator name="Remember_2"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Trial_3">
      <Param name="Selected rows" updates="None" val=":2" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('S1', '(10 / 1) - 9 = 3  ? R'), ('S2', '(3 / 1) + 4 = 9 ? M'), ('S3', '(4 x 3) - 6 = 8 ? W'), ('S4', '(5 x 1) + 1 = 6 ? Q'), ('S5', '(4 / 1) - 4 = 0 ? G'), ('S6', '(8 / 1) - 5 = 3 ? V'), ('S7', '(2 x 2) + 1 = 5 ? X'), ('S8', '(4 x 5) - 1 = 21 ? Q'), ('S9', '(5 x 5) + 3 = 28 ? M'), ('S10', '(6 / 2) + 1 = 4  ? S'), ('S11', '(5 x 4) + 1 = 23 ? B'), ('S12', '(2 x 4) + 1 = 9 ? N'), ('S13', '(6 x 1) + 9 = 16 ? Z'), ('S14', '(4 x 2) + 1 = 9 ? V'), ('S15', '(9 / 3) + 1 = 3 ? X'), ('S16', '(5 x 3) + 3 = 18 ? R'), ('S17', '(5 x 2) + 2 = 10 ? Z'), ('S18', '(4 / 1) + 4 = 6 ? G'), ('S19', '(4 x 2) - 2 = 7  ? B'), ('S20', '(10 x 1) + 5 = 15 ? N'), ('S21', '(3 / 1) - 2 = 3 ? S')]), OrderedDict([('S1', '(2 / 1) + 4 = 6  ? W'), ('S2', '(9 x 1) - 9 = 1  ? Z'), ('S3', '(9 x 1) - 7 = 2  ? T'), ('S4', '(10 / 2) - 4 = 3 ? B'), ('S5', '(10 x 1) + 9 = 19  ? Z'), ('S6', '(2 / 2) - 2 = 0 ? S'), ('S7', '(7 / 1) - 2 = 5 ? Q'), ('S8', '(8 x 2) - 4 = 13  ? M'), ('S9', '(3 x 2) - 1 = 6 ? T'), ('S10', '(7 / 1) + 2 = 9  ? Z'), ('S11', '(7 x 2) - 1 = 14 ? X'), ('S12', '(8 / 4) + 4 = 8 ? W'), ('S13', '(9 x 5) - 1 = 44  ? S'), ('S14', '(10 / 2) + 5 = 10 ? G'), ('S15', '(7 x 7) - 1 = 49  ? V'), ('S16', '(3 / 1) + 1 = 4 ? X'), ('S17', '(8 x 3) - 1 = 22 ? W'), ('S18', '(10 / 1) + 3 = 13  ? W'), ('S19', '(7 x 2) - 3 = 12 ? M'), ('S20', '(3 / 1) +7 = 10 ? Z'), ('S21', '(7 x 2) + 3 = 17 ? W')]), OrderedDict([('S1', '(8 / 1) - 6 = 4 ? N'), ('S2', '(6 x 4) + 1 = 25 ? R'), ('S3', '(3 x 4) + 2 = 14  ? Q'), ('S4', '(9 x 4) - 6 = 32  ? W'), ('S5', None), ('S6', '(5 / 1) - 1 = 6 ? G'), ('S7', '(8 / 2) - 4 = 0  ? T'), ('S8', None), ('S9', '(6 / 3) + 8 = 10  ? W'), ('S10', '(9 / 1) + 8 = 18  ? M'), ('S11', '(3 / 1) - 1 = 4  ? S'), ('S12', '(7 / 7) + 9 = 11  ? R'), ('S13', '(10 / 1) + 1 = 11  ? X'), ('S14', '(2 x 4) + 1 = 9 ? Z'), ('S15', None), ('S16', '(7 x 7) + 1 = 48  ? T'), ('S17', '(10 / 2) - 2 = 7 ? S'), ('S18', '(6 x 3) - 2 = 17  ? B'), ('S19', '(2 / 1) - 2 = 0  ? T'), ('S20', '(2 / 2) + 5 = 7  ? R'), ('S21', '(10 x 2) + 3 = 23  ? Q')]), OrderedDict([('S1', '(6 x 7) - 6 = 38 ? T'), ('S2', '(5 / 5) + 1 = 2 ? S'), ('S3', '(7 / 1) + 6 = 12  ? G'), ('S4', '(6 / 3) + 4 = 7  ? G'), ('S5', None), ('S6', '(10 x 2) + 4 = 22 ? T'), ('S7', '(9 x 2) - 1 = 18  ? V'), ('S8', None), ('S9', '(10 x 5) + 1 = 51  ? N'), ('S10', '(10 / 1) - 1 = 11 ? V'), ('S11', '(4 / 2) - 1 = 1 ? M'), ('S12', None), ('S13', None), ('S14', '(6 x 3) - 2 = 17  ? Q'), ('S15', None), ('S16', '(6 / 2) - 3 = 2  ? Z'), ('S17', '(7 x 2) + 3 = 16  ? N'), ('S18', '(3 x 2) - 2 = 5  ? N'), ('S19', None), ('S20', '(6 / 2) + 3 = 7  ? V'), ('S21', '(5 / 1) + 7 = 13 ? N')]), OrderedDict([('S1', None), ('S2', '(7 / 7) + 6 = 7  ? B'), ('S3', '(3 x 1) - 2 = 1 ? V'), ('S4', '(7 x 1) - 6 = 2  ? N'), ('S5', None), ('S6', '(6 x 1) - 6 = 0 ? B'), ('S7', '(3 / 1) + 3 = 6  ? B'), ('S8', None), ('S9', '(7 / 1) + 6 = 12  ? S'), ('S10', '(4 / 1) - 1 = 3  ? R'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 / 2) + 8 = 10  ? N'), ('S17', '(2 x 1) + 7 = 9 ? B'), ('S18', '(5 / 5) + 5 = 6 ? V'), ('S19', None), ('S20', '(8 x 1) + 5 = 13  ? M'), ('S21', '(4 / 2) + 3 = 7  ? B')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(8 / 4) - 2 = 2  ? Z'), ('S4', '(4 x 2) + 2 = 10 ? X'), ('S5', None), ('S6', '(3 x 3) - 2 = 7  ? W'), ('S7', None), ('S8', None), ('S9', '(2 x 1) + 1 = 4 ? V'), ('S10', '(8 / 2) + 4 = 6 ? X'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(9 / 1) + 1 = 10  ? G'), ('S17', '(3 x 3) - 2 = 7  ? R'), ('S18', None), ('S19', None), ('S20', '(8 x 1) + 8 = 16  ? G'), ('S21', '(2 x 3) + 5 = 10 ? X')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(2 / 2) + 2 = 3  ? M'), ('S4', None), ('S5', None), ('S6', '(9 / 1) - 7 = 4 ? R'), ('S7', None), ('S8', None), ('S9', '(8 x 4) + 3 = 33 ? Q'), ('S10', '(9 x 3) + 2 = 29 ? Q'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 x 4) + 1 = 17  ? S'), ('S17', '(5 / 1) + 4 = 9 ? T'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)]), OrderedDict([('S1', None), ('S2', None), ('S3', None), ('S4', None), ('S5', None), ('S6', '(5 / 1) + 3 = 9 ? Q'), ('S7', None), ('S8', None), ('S9', '(3 / 3) + 1 = 2  ? G'), ('S10', None), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', None), ('S17', '(6 / 3) + 2 = 4  ? X'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Condition.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Trial_3" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Ospan_7a"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Trial_3"/>
    <LoopInitiator loopType="TrialHandler" name="Remember_3">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Remember_3" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Remember_7a"/>
    <LoopTerminator name="Remember_3"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Trial_4">
      <Param name="Selected rows" updates="None" val=":4" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('S1', '(10 / 1) - 9 = 3  ? R'), ('S2', '(3 / 1) + 4 = 9 ? M'), ('S3', '(4 x 3) - 6 = 8 ? W'), ('S4', '(5 x 1) + 1 = 6 ? Q'), ('S5', '(4 / 1) - 4 = 0 ? G'), ('S6', '(8 / 1) - 5 = 3 ? V'), ('S7', '(2 x 2) + 1 = 5 ? X'), ('S8', '(4 x 5) - 1 = 21 ? Q'), ('S9', '(5 x 5) + 3 = 28 ? M'), ('S10', '(6 / 2) + 1 = 4  ? S'), ('S11', '(5 x 4) + 1 = 23 ? B'), ('S12', '(2 x 4) + 1 = 9 ? N'), ('S13', '(6 x 1) + 9 = 16 ? Z'), ('S14', '(4 x 2) + 1 = 9 ? V'), ('S15', '(9 / 3) + 1 = 3 ? X'), ('S16', '(5 x 3) + 3 = 18 ? R'), ('S17', '(5 x 2) + 2 = 10 ? Z'), ('S18', '(4 / 1) + 4 = 6 ? G'), ('S19', '(4 x 2) - 2 = 7  ? B'), ('S20', '(10 x 1) + 5 = 15 ? N'), ('S21', '(3 / 1) - 2 = 3 ? S')]), OrderedDict([('S1', '(2 / 1) + 4 = 6  ? W'), ('S2', '(9 x 1) - 9 = 1  ? Z'), ('S3', '(9 x 1) - 7 = 2  ? T'), ('S4', '(10 / 2) - 4 = 3 ? B'), ('S5', '(10 x 1) + 9 = 19  ? Z'), ('S6', '(2 / 2) - 2 = 0 ? S'), ('S7', '(7 / 1) - 2 = 5 ? Q'), ('S8', '(8 x 2) - 4 = 13  ? M'), ('S9', '(3 x 2) - 1 = 6 ? T'), ('S10', '(7 / 1) + 2 = 9  ? Z'), ('S11', '(7 x 2) - 1 = 14 ? X'), ('S12', '(8 / 4) + 4 = 8 ? W'), ('S13', '(9 x 5) - 1 = 44  ? S'), ('S14', '(10 / 2) + 5 = 10 ? G'), ('S15', '(7 x 7) - 1 = 49  ? V'), ('S16', '(3 / 1) + 1 = 4 ? X'), ('S17', '(8 x 3) - 1 = 22 ? W'), ('S18', '(10 / 1) + 3 = 13  ? W'), ('S19', '(7 x 2) - 3 = 12 ? M'), ('S20', '(3 / 1) +7 = 10 ? Z'), ('S21', '(7 x 2) + 3 = 17 ? W')]), OrderedDict([('S1', '(8 / 1) - 6 = 4 ? N'), ('S2', '(6 x 4) + 1 = 25 ? R'), ('S3', '(3 x 4) + 2 = 14  ? Q'), ('S4', '(9 x 4) - 6 = 32  ? W'), ('S5', None), ('S6', '(5 / 1) - 1 = 6 ? G'), ('S7', '(8 / 2) - 4 = 0  ? T'), ('S8', None), ('S9', '(6 / 3) + 8 = 10  ? W'), ('S10', '(9 / 1) + 8 = 18  ? M'), ('S11', '(3 / 1) - 1 = 4  ? S'), ('S12', '(7 / 7) + 9 = 11  ? R'), ('S13', '(10 / 1) + 1 = 11  ? X'), ('S14', '(2 x 4) + 1 = 9 ? Z'), ('S15', None), ('S16', '(7 x 7) + 1 = 48  ? T'), ('S17', '(10 / 2) - 2 = 7 ? S'), ('S18', '(6 x 3) - 2 = 17  ? B'), ('S19', '(2 / 1) - 2 = 0  ? T'), ('S20', '(2 / 2) + 5 = 7  ? R'), ('S21', '(10 x 2) + 3 = 23  ? Q')]), OrderedDict([('S1', '(6 x 7) - 6 = 38 ? T'), ('S2', '(5 / 5) + 1 = 2 ? S'), ('S3', '(7 / 1) + 6 = 12  ? G'), ('S4', '(6 / 3) + 4 = 7  ? G'), ('S5', None), ('S6', '(10 x 2) + 4 = 22 ? T'), ('S7', '(9 x 2) - 1 = 18  ? V'), ('S8', None), ('S9', '(10 x 5) + 1 = 51  ? N'), ('S10', '(10 / 1) - 1 = 11 ? V'), ('S11', '(4 / 2) - 1 = 1 ? M'), ('S12', None), ('S13', None), ('S14', '(6 x 3) - 2 = 17  ? Q'), ('S15', None), ('S16', '(6 / 2) - 3 = 2  ? Z'), ('S17', '(7 x 2) + 3 = 16  ? N'), ('S18', '(3 x 2) - 2 = 5  ? N'), ('S19', None), ('S20', '(6 / 2) + 3 = 7  ? V'), ('S21', '(5 / 1) + 7 = 13 ? N')]), OrderedDict([('S1', None), ('S2', '(7 / 7) + 6 = 7  ? B'), ('S3', '(3 x 1) - 2 = 1 ? V'), ('S4', '(7 x 1) - 6 = 2  ? N'), ('S5', None), ('S6', '(6 x 1) - 6 = 0 ? B'), ('S7', '(3 / 1) + 3 = 6  ? B'), ('S8', None), ('S9', '(7 / 1) + 6 = 12  ? S'), ('S10', '(4 / 1) - 1 = 3  ? R'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 / 2) + 8 = 10  ? N'), ('S17', '(2 x 1) + 7 = 9 ? B'), ('S18', '(5 / 5) + 5 = 6 ? V'), ('S19', None), ('S20', '(8 x 1) + 5 = 13  ? M'), ('S21', '(4 / 2) + 3 = 7  ? B')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(8 / 4) - 2 = 2  ? Z'), ('S4', '(4 x 2) + 2 = 10 ? X'), ('S5', None), ('S6', '(3 x 3) - 2 = 7  ? W'), ('S7', None), ('S8', None), ('S9', '(2 x 1) + 1 = 4 ? V'), ('S10', '(8 / 2) + 4 = 6 ? X'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(9 / 1) + 1 = 10  ? G'), ('S17', '(3 x 3) - 2 = 7  ? R'), ('S18', None), ('S19', None), ('S20', '(8 x 1) + 8 = 16  ? G'), ('S21', '(2 x 3) + 5 = 10 ? X')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(2 / 2) + 2 = 3  ? M'), ('S4', None), ('S5', None), ('S6', '(9 / 1) - 7 = 4 ? R'), ('S7', None), ('S8', None), ('S9', '(8 x 4) + 3 = 33 ? Q'), ('S10', '(9 x 3) + 2 = 29 ? Q'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 x 4) + 1 = 17  ? S'), ('S17', '(5 / 1) + 4 = 9 ? T'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)]), OrderedDict([('S1', None), ('S2', None), ('S3', None), ('S4', None), ('S5', None), ('S6', '(5 / 1) + 3 = 9 ? Q'), ('S7', None), ('S8', None), ('S9', '(3 / 3) + 1 = 2  ? G'), ('S10', None), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', None), ('S17', '(6 / 3) + 2 = 4  ? X'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Condition.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Trial_4" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Ospan_6a"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Trial_4"/>
    <LoopInitiator loopType="TrialHandler" name="Remember_4">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Remember_4" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Remember_6a"/>
    <LoopTerminator name="Remember_4"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Trial_5">
      <Param name="Selected rows" updates="None" val=":7" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('S1', '(10 / 1) - 9 = 3  ? R'), ('S2', '(3 / 1) + 4 = 9 ? M'), ('S3', '(4 x 3) - 6 = 8 ? W'), ('S4', '(5 x 1) + 1 = 6 ? Q'), ('S5', '(4 / 1) - 4 = 0 ? G'), ('S6', '(8 / 1) - 5 = 3 ? V'), ('S7', '(2 x 2) + 1 = 5 ? X'), ('S8', '(4 x 5) - 1 = 21 ? Q'), ('S9', '(5 x 5) + 3 = 28 ? M'), ('S10', '(6 / 2) + 1 = 4  ? S'), ('S11', '(5 x 4) + 1 = 23 ? B'), ('S12', '(2 x 4) + 1 = 9 ? N'), ('S13', '(6 x 1) + 9 = 16 ? Z'), ('S14', '(4 x 2) + 1 = 9 ? V'), ('S15', '(9 / 3) + 1 = 3 ? X'), ('S16', '(5 x 3) + 3 = 18 ? R'), ('S17', '(5 x 2) + 2 = 10 ? Z'), ('S18', '(4 / 1) + 4 = 6 ? G'), ('S19', '(4 x 2) - 2 = 7  ? B'), ('S20', '(10 x 1) + 5 = 15 ? N'), ('S21', '(3 / 1) - 2 = 3 ? S')]), OrderedDict([('S1', '(2 / 1) + 4 = 6  ? W'), ('S2', '(9 x 1) - 9 = 1  ? Z'), ('S3', '(9 x 1) - 7 = 2  ? T'), ('S4', '(10 / 2) - 4 = 3 ? B'), ('S5', '(10 x 1) + 9 = 19  ? Z'), ('S6', '(2 / 2) - 2 = 0 ? S'), ('S7', '(7 / 1) - 2 = 5 ? Q'), ('S8', '(8 x 2) - 4 = 13  ? M'), ('S9', '(3 x 2) - 1 = 6 ? T'), ('S10', '(7 / 1) + 2 = 9  ? Z'), ('S11', '(7 x 2) - 1 = 14 ? X'), ('S12', '(8 / 4) + 4 = 8 ? W'), ('S13', '(9 x 5) - 1 = 44  ? S'), ('S14', '(10 / 2) + 5 = 10 ? G'), ('S15', '(7 x 7) - 1 = 49  ? V'), ('S16', '(3 / 1) + 1 = 4 ? X'), ('S17', '(8 x 3) - 1 = 22 ? W'), ('S18', '(10 / 1) + 3 = 13  ? W'), ('S19', '(7 x 2) - 3 = 12 ? M'), ('S20', '(3 / 1) +7 = 10 ? Z'), ('S21', '(7 x 2) + 3 = 17 ? W')]), OrderedDict([('S1', '(8 / 1) - 6 = 4 ? N'), ('S2', '(6 x 4) + 1 = 25 ? R'), ('S3', '(3 x 4) + 2 = 14  ? Q'), ('S4', '(9 x 4) - 6 = 32  ? W'), ('S5', None), ('S6', '(5 / 1) - 1 = 6 ? G'), ('S7', '(8 / 2) - 4 = 0  ? T'), ('S8', None), ('S9', '(6 / 3) + 8 = 10  ? W'), ('S10', '(9 / 1) + 8 = 18  ? M'), ('S11', '(3 / 1) - 1 = 4  ? S'), ('S12', '(7 / 7) + 9 = 11  ? R'), ('S13', '(10 / 1) + 1 = 11  ? X'), ('S14', '(2 x 4) + 1 = 9 ? Z'), ('S15', None), ('S16', '(7 x 7) + 1 = 48  ? T'), ('S17', '(10 / 2) - 2 = 7 ? S'), ('S18', '(6 x 3) - 2 = 17  ? B'), ('S19', '(2 / 1) - 2 = 0  ? T'), ('S20', '(2 / 2) + 5 = 7  ? R'), ('S21', '(10 x 2) + 3 = 23  ? Q')]), OrderedDict([('S1', '(6 x 7) - 6 = 38 ? T'), ('S2', '(5 / 5) + 1 = 2 ? S'), ('S3', '(7 / 1) + 6 = 12  ? G'), ('S4', '(6 / 3) + 4 = 7  ? G'), ('S5', None), ('S6', '(10 x 2) + 4 = 22 ? T'), ('S7', '(9 x 2) - 1 = 18  ? V'), ('S8', None), ('S9', '(10 x 5) + 1 = 51  ? N'), ('S10', '(10 / 1) - 1 = 11 ? V'), ('S11', '(4 / 2) - 1 = 1 ? M'), ('S12', None), ('S13', None), ('S14', '(6 x 3) - 2 = 17  ? Q'), ('S15', None), ('S16', '(6 / 2) - 3 = 2  ? Z'), ('S17', '(7 x 2) + 3 = 16  ? N'), ('S18', '(3 x 2) - 2 = 5  ? N'), ('S19', None), ('S20', '(6 / 2) + 3 = 7  ? V'), ('S21', '(5 / 1) + 7 = 13 ? N')]), OrderedDict([('S1', None), ('S2', '(7 / 7) + 6 = 7  ? B'), ('S3', '(3 x 1) - 2 = 1 ? V'), ('S4', '(7 x 1) - 6 = 2  ? N'), ('S5', None), ('S6', '(6 x 1) - 6 = 0 ? B'), ('S7', '(3 / 1) + 3 = 6  ? B'), ('S8', None), ('S9', '(7 / 1) + 6 = 12  ? S'), ('S10', '(4 / 1) - 1 = 3  ? R'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 / 2) + 8 = 10  ? N'), ('S17', '(2 x 1) + 7 = 9 ? B'), ('S18', '(5 / 5) + 5 = 6 ? V'), ('S19', None), ('S20', '(8 x 1) + 5 = 13  ? M'), ('S21', '(4 / 2) + 3 = 7  ? B')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(8 / 4) - 2 = 2  ? Z'), ('S4', '(4 x 2) + 2 = 10 ? X'), ('S5', None), ('S6', '(3 x 3) - 2 = 7  ? W'), ('S7', None), ('S8', None), ('S9', '(2 x 1) + 1 = 4 ? V'), ('S10', '(8 / 2) + 4 = 6 ? X'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(9 / 1) + 1 = 10  ? G'), ('S17', '(3 x 3) - 2 = 7  ? R'), ('S18', None), ('S19', None), ('S20', '(8 x 1) + 8 = 16  ? G'), ('S21', '(2 x 3) + 5 = 10 ? X')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(2 / 2) + 2 = 3  ? M'), ('S4', None), ('S5', None), ('S6', '(9 / 1) - 7 = 4 ? R'), ('S7', None), ('S8', None), ('S9', '(8 x 4) + 3 = 33 ? Q'), ('S10', '(9 x 3) + 2 = 29 ? Q'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 x 4) + 1 = 17  ? S'), ('S17', '(5 / 1) + 4 = 9 ? T'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)]), OrderedDict([('S1', None), ('S2', None), ('S3', None), ('S4', None), ('S5', None), ('S6', '(5 / 1) + 3 = 9 ? Q'), ('S7', None), ('S8', None), ('S9', '(3 / 3) + 1 = 2  ? G'), ('S10', None), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', None), ('S17', '(6 / 3) + 2 = 4  ? X'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Condition.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Trial_5" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Ospan_2a"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Trial_5"/>
    <LoopInitiator loopType="TrialHandler" name="Remember_5">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Remember_5" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Remember_2a"/>
    <LoopTerminator name="Remember_5"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Trial_6">
      <Param name="Selected rows" updates="None" val=":6" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('S1', '(10 / 1) - 9 = 3  ? R'), ('S2', '(3 / 1) + 4 = 9 ? M'), ('S3', '(4 x 3) - 6 = 8 ? W'), ('S4', '(5 x 1) + 1 = 6 ? Q'), ('S5', '(4 / 1) - 4 = 0 ? G'), ('S6', '(8 / 1) - 5 = 3 ? V'), ('S7', '(2 x 2) + 1 = 5 ? X'), ('S8', '(4 x 5) - 1 = 21 ? Q'), ('S9', '(5 x 5) + 3 = 28 ? M'), ('S10', '(6 / 2) + 1 = 4  ? S'), ('S11', '(5 x 4) + 1 = 23 ? B'), ('S12', '(2 x 4) + 1 = 9 ? N'), ('S13', '(6 x 1) + 9 = 16 ? Z'), ('S14', '(4 x 2) + 1 = 9 ? V'), ('S15', '(9 / 3) + 1 = 3 ? X'), ('S16', '(5 x 3) + 3 = 18 ? R'), ('S17', '(5 x 2) + 2 = 10 ? Z'), ('S18', '(4 / 1) + 4 = 6 ? G'), ('S19', '(4 x 2) - 2 = 7  ? B'), ('S20', '(10 x 1) + 5 = 15 ? N'), ('S21', '(3 / 1) - 2 = 3 ? S')]), OrderedDict([('S1', '(2 / 1) + 4 = 6  ? W'), ('S2', '(9 x 1) - 9 = 1  ? Z'), ('S3', '(9 x 1) - 7 = 2  ? T'), ('S4', '(10 / 2) - 4 = 3 ? B'), ('S5', '(10 x 1) + 9 = 19  ? Z'), ('S6', '(2 / 2) - 2 = 0 ? S'), ('S7', '(7 / 1) - 2 = 5 ? Q'), ('S8', '(8 x 2) - 4 = 13  ? M'), ('S9', '(3 x 2) - 1 = 6 ? T'), ('S10', '(7 / 1) + 2 = 9  ? Z'), ('S11', '(7 x 2) - 1 = 14 ? X'), ('S12', '(8 / 4) + 4 = 8 ? W'), ('S13', '(9 x 5) - 1 = 44  ? S'), ('S14', '(10 / 2) + 5 = 10 ? G'), ('S15', '(7 x 7) - 1 = 49  ? V'), ('S16', '(3 / 1) + 1 = 4 ? X'), ('S17', '(8 x 3) - 1 = 22 ? W'), ('S18', '(10 / 1) + 3 = 13  ? W'), ('S19', '(7 x 2) - 3 = 12 ? M'), ('S20', '(3 / 1) +7 = 10 ? Z'), ('S21', '(7 x 2) + 3 = 17 ? W')]), OrderedDict([('S1', '(8 / 1) - 6 = 4 ? N'), ('S2', '(6 x 4) + 1 = 25 ? R'), ('S3', '(3 x 4) + 2 = 14  ? Q'), ('S4', '(9 x 4) - 6 = 32  ? W'), ('S5', None), ('S6', '(5 / 1) - 1 = 6 ? G'), ('S7', '(8 / 2) - 4 = 0  ? T'), ('S8', None), ('S9', '(6 / 3) + 8 = 10  ? W'), ('S10', '(9 / 1) + 8 = 18  ? M'), ('S11', '(3 / 1) - 1 = 4  ? S'), ('S12', '(7 / 7) + 9 = 11  ? R'), ('S13', '(10 / 1) + 1 = 11  ? X'), ('S14', '(2 x 4) + 1 = 9 ? Z'), ('S15', None), ('S16', '(7 x 7) + 1 = 48  ? T'), ('S17', '(10 / 2) - 2 = 7 ? S'), ('S18', '(6 x 3) - 2 = 17  ? B'), ('S19', '(2 / 1) - 2 = 0  ? T'), ('S20', '(2 / 2) + 5 = 7  ? R'), ('S21', '(10 x 2) + 3 = 23  ? Q')]), OrderedDict([('S1', '(6 x 7) - 6 = 38 ? T'), ('S2', '(5 / 5) + 1 = 2 ? S'), ('S3', '(7 / 1) + 6 = 12  ? G'), ('S4', '(6 / 3) + 4 = 7  ? G'), ('S5', None), ('S6', '(10 x 2) + 4 = 22 ? T'), ('S7', '(9 x 2) - 1 = 18  ? V'), ('S8', None), ('S9', '(10 x 5) + 1 = 51  ? N'), ('S10', '(10 / 1) - 1 = 11 ? V'), ('S11', '(4 / 2) - 1 = 1 ? M'), ('S12', None), ('S13', None), ('S14', '(6 x 3) - 2 = 17  ? Q'), ('S15', None), ('S16', '(6 / 2) - 3 = 2  ? Z'), ('S17', '(7 x 2) + 3 = 16  ? N'), ('S18', '(3 x 2) - 2 = 5  ? N'), ('S19', None), ('S20', '(6 / 2) + 3 = 7  ? V'), ('S21', '(5 / 1) + 7 = 13 ? N')]), OrderedDict([('S1', None), ('S2', '(7 / 7) + 6 = 7  ? B'), ('S3', '(3 x 1) - 2 = 1 ? V'), ('S4', '(7 x 1) - 6 = 2  ? N'), ('S5', None), ('S6', '(6 x 1) - 6 = 0 ? B'), ('S7', '(3 / 1) + 3 = 6  ? B'), ('S8', None), ('S9', '(7 / 1) + 6 = 12  ? S'), ('S10', '(4 / 1) - 1 = 3  ? R'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 / 2) + 8 = 10  ? N'), ('S17', '(2 x 1) + 7 = 9 ? B'), ('S18', '(5 / 5) + 5 = 6 ? V'), ('S19', None), ('S20', '(8 x 1) + 5 = 13  ? M'), ('S21', '(4 / 2) + 3 = 7  ? B')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(8 / 4) - 2 = 2  ? Z'), ('S4', '(4 x 2) + 2 = 10 ? X'), ('S5', None), ('S6', '(3 x 3) - 2 = 7  ? W'), ('S7', None), ('S8', None), ('S9', '(2 x 1) + 1 = 4 ? V'), ('S10', '(8 / 2) + 4 = 6 ? X'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(9 / 1) + 1 = 10  ? G'), ('S17', '(3 x 3) - 2 = 7  ? R'), ('S18', None), ('S19', None), ('S20', '(8 x 1) + 8 = 16  ? G'), ('S21', '(2 x 3) + 5 = 10 ? X')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(2 / 2) + 2 = 3  ? M'), ('S4', None), ('S5', None), ('S6', '(9 / 1) - 7 = 4 ? R'), ('S7', None), ('S8', None), ('S9', '(8 x 4) + 3 = 33 ? Q'), ('S10', '(9 x 3) + 2 = 29 ? Q'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 x 4) + 1 = 17  ? S'), ('S17', '(5 / 1) + 4 = 9 ? T'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)]), OrderedDict([('S1', None), ('S2', None), ('S3', None), ('S4', None), ('S5', None), ('S6', '(5 / 1) + 3 = 9 ? Q'), ('S7', None), ('S8', None), ('S9', '(3 / 3) + 1 = 2  ? G'), ('S10', None), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', None), ('S17', '(6 / 3) + 2 = 4  ? X'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Condition.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Trial_6" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Ospan_8a"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Trial_6"/>
    <LoopInitiator loopType="TrialHandler" name="Remember_6">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Remember_6" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Remember_8a"/>
    <LoopTerminator name="Remember_6"/>
    <Routine name="Blank100"/>
    <Routine name="Relax"/>
    <Routine name="Blank100"/>
    <Routine name="warning"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Trial_7">
      <Param name="Selected rows" updates="None" val=":5" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('S1', '(10 / 1) - 9 = 3  ? R'), ('S2', '(3 / 1) + 4 = 9 ? M'), ('S3', '(4 x 3) - 6 = 8 ? W'), ('S4', '(5 x 1) + 1 = 6 ? Q'), ('S5', '(4 / 1) - 4 = 0 ? G'), ('S6', '(8 / 1) - 5 = 3 ? V'), ('S7', '(2 x 2) + 1 = 5 ? X'), ('S8', '(4 x 5) - 1 = 21 ? Q'), ('S9', '(5 x 5) + 3 = 28 ? M'), ('S10', '(6 / 2) + 1 = 4  ? S'), ('S11', '(5 x 4) + 1 = 23 ? B'), ('S12', '(2 x 4) + 1 = 9 ? N'), ('S13', '(6 x 1) + 9 = 16 ? Z'), ('S14', '(4 x 2) + 1 = 9 ? V'), ('S15', '(9 / 3) + 1 = 3 ? X'), ('S16', '(5 x 3) + 3 = 18 ? R'), ('S17', '(5 x 2) + 2 = 10 ? Z'), ('S18', '(4 / 1) + 4 = 6 ? G'), ('S19', '(4 x 2) - 2 = 7  ? B'), ('S20', '(10 x 1) + 5 = 15 ? N'), ('S21', '(3 / 1) - 2 = 3 ? S')]), OrderedDict([('S1', '(2 / 1) + 4 = 6  ? W'), ('S2', '(9 x 1) - 9 = 1  ? Z'), ('S3', '(9 x 1) - 7 = 2  ? T'), ('S4', '(10 / 2) - 4 = 3 ? B'), ('S5', '(10 x 1) + 9 = 19  ? Z'), ('S6', '(2 / 2) - 2 = 0 ? S'), ('S7', '(7 / 1) - 2 = 5 ? Q'), ('S8', '(8 x 2) - 4 = 13  ? M'), ('S9', '(3 x 2) - 1 = 6 ? T'), ('S10', '(7 / 1) + 2 = 9  ? Z'), ('S11', '(7 x 2) - 1 = 14 ? X'), ('S12', '(8 / 4) + 4 = 8 ? W'), ('S13', '(9 x 5) - 1 = 44  ? S'), ('S14', '(10 / 2) + 5 = 10 ? G'), ('S15', '(7 x 7) - 1 = 49  ? V'), ('S16', '(3 / 1) + 1 = 4 ? X'), ('S17', '(8 x 3) - 1 = 22 ? W'), ('S18', '(10 / 1) + 3 = 13  ? W'), ('S19', '(7 x 2) - 3 = 12 ? M'), ('S20', '(3 / 1) +7 = 10 ? Z'), ('S21', '(7 x 2) + 3 = 17 ? W')]), OrderedDict([('S1', '(8 / 1) - 6 = 4 ? N'), ('S2', '(6 x 4) + 1 = 25 ? R'), ('S3', '(3 x 4) + 2 = 14  ? Q'), ('S4', '(9 x 4) - 6 = 32  ? W'), ('S5', None), ('S6', '(5 / 1) - 1 = 6 ? G'), ('S7', '(8 / 2) - 4 = 0  ? T'), ('S8', None), ('S9', '(6 / 3) + 8 = 10  ? W'), ('S10', '(9 / 1) + 8 = 18  ? M'), ('S11', '(3 / 1) - 1 = 4  ? S'), ('S12', '(7 / 7) + 9 = 11  ? R'), ('S13', '(10 / 1) + 1 = 11  ? X'), ('S14', '(2 x 4) + 1 = 9 ? Z'), ('S15', None), ('S16', '(7 x 7) + 1 = 48  ? T'), ('S17', '(10 / 2) - 2 = 7 ? S'), ('S18', '(6 x 3) - 2 = 17  ? B'), ('S19', '(2 / 1) - 2 = 0  ? T'), ('S20', '(2 / 2) + 5 = 7  ? R'), ('S21', '(10 x 2) + 3 = 23  ? Q')]), OrderedDict([('S1', '(6 x 7) - 6 = 38 ? T'), ('S2', '(5 / 5) + 1 = 2 ? S'), ('S3', '(7 / 1) + 6 = 12  ? G'), ('S4', '(6 / 3) + 4 = 7  ? G'), ('S5', None), ('S6', '(10 x 2) + 4 = 22 ? T'), ('S7', '(9 x 2) - 1 = 18  ? V'), ('S8', None), ('S9', '(10 x 5) + 1 = 51  ? N'), ('S10', '(10 / 1) - 1 = 11 ? V'), ('S11', '(4 / 2) - 1 = 1 ? M'), ('S12', None), ('S13', None), ('S14', '(6 x 3) - 2 = 17  ? Q'), ('S15', None), ('S16', '(6 / 2) - 3 = 2  ? Z'), ('S17', '(7 x 2) + 3 = 16  ? N'), ('S18', '(3 x 2) - 2 = 5  ? N'), ('S19', None), ('S20', '(6 / 2) + 3 = 7  ? V'), ('S21', '(5 / 1) + 7 = 13 ? N')]), OrderedDict([('S1', None), ('S2', '(7 / 7) + 6 = 7  ? B'), ('S3', '(3 x 1) - 2 = 1 ? V'), ('S4', '(7 x 1) - 6 = 2  ? N'), ('S5', None), ('S6', '(6 x 1) - 6 = 0 ? B'), ('S7', '(3 / 1) + 3 = 6  ? B'), ('S8', None), ('S9', '(7 / 1) + 6 = 12  ? S'), ('S10', '(4 / 1) - 1 = 3  ? R'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 / 2) + 8 = 10  ? N'), ('S17', '(2 x 1) + 7 = 9 ? B'), ('S18', '(5 / 5) + 5 = 6 ? V'), ('S19', None), ('S20', '(8 x 1) + 5 = 13  ? M'), ('S21', '(4 / 2) + 3 = 7  ? B')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(8 / 4) - 2 = 2  ? Z'), ('S4', '(4 x 2) + 2 = 10 ? X'), ('S5', None), ('S6', '(3 x 3) - 2 = 7  ? W'), ('S7', None), ('S8', None), ('S9', '(2 x 1) + 1 = 4 ? V'), ('S10', '(8 / 2) + 4 = 6 ? X'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(9 / 1) + 1 = 10  ? G'), ('S17', '(3 x 3) - 2 = 7  ? R'), ('S18', None), ('S19', None), ('S20', '(8 x 1) + 8 = 16  ? G'), ('S21', '(2 x 3) + 5 = 10 ? X')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(2 / 2) + 2 = 3  ? M'), ('S4', None), ('S5', None), ('S6', '(9 / 1) - 7 = 4 ? R'), ('S7', None), ('S8', None), ('S9', '(8 x 4) + 3 = 33 ? Q'), ('S10', '(9 x 3) + 2 = 29 ? Q'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 x 4) + 1 = 17  ? S'), ('S17', '(5 / 1) + 4 = 9 ? T'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)]), OrderedDict([('S1', None), ('S2', None), ('S3', None), ('S4', None), ('S5', None), ('S6', '(5 / 1) + 3 = 9 ? Q'), ('S7', None), ('S8', None), ('S9', '(3 / 3) + 1 = 2  ? G'), ('S10', None), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', None), ('S17', '(6 / 3) + 2 = 4  ? X'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Condition.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Trial_7" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Ospan_5b"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Trial_7"/>
    <LoopInitiator loopType="TrialHandler" name="Remember_7">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Remember_7" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Remember_5b"/>
    <LoopTerminator name="Remember_7"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Trial_8">
      <Param name="Selected rows" updates="None" val=":2" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('S1', '(10 / 1) - 9 = 3  ? R'), ('S2', '(3 / 1) + 4 = 9 ? M'), ('S3', '(4 x 3) - 6 = 8 ? W'), ('S4', '(5 x 1) + 1 = 6 ? Q'), ('S5', '(4 / 1) - 4 = 0 ? G'), ('S6', '(8 / 1) - 5 = 3 ? V'), ('S7', '(2 x 2) + 1 = 5 ? X'), ('S8', '(4 x 5) - 1 = 21 ? Q'), ('S9', '(5 x 5) + 3 = 28 ? M'), ('S10', '(6 / 2) + 1 = 4  ? S'), ('S11', '(5 x 4) + 1 = 23 ? B'), ('S12', '(2 x 4) + 1 = 9 ? N'), ('S13', '(6 x 1) + 9 = 16 ? Z'), ('S14', '(4 x 2) + 1 = 9 ? V'), ('S15', '(9 / 3) + 1 = 3 ? X'), ('S16', '(5 x 3) + 3 = 18 ? R'), ('S17', '(5 x 2) + 2 = 10 ? Z'), ('S18', '(4 / 1) + 4 = 6 ? G'), ('S19', '(4 x 2) - 2 = 7  ? B'), ('S20', '(10 x 1) + 5 = 15 ? N'), ('S21', '(3 / 1) - 2 = 3 ? S')]), OrderedDict([('S1', '(2 / 1) + 4 = 6  ? W'), ('S2', '(9 x 1) - 9 = 1  ? Z'), ('S3', '(9 x 1) - 7 = 2  ? T'), ('S4', '(10 / 2) - 4 = 3 ? B'), ('S5', '(10 x 1) + 9 = 19  ? Z'), ('S6', '(2 / 2) - 2 = 0 ? S'), ('S7', '(7 / 1) - 2 = 5 ? Q'), ('S8', '(8 x 2) - 4 = 13  ? M'), ('S9', '(3 x 2) - 1 = 6 ? T'), ('S10', '(7 / 1) + 2 = 9  ? Z'), ('S11', '(7 x 2) - 1 = 14 ? X'), ('S12', '(8 / 4) + 4 = 8 ? W'), ('S13', '(9 x 5) - 1 = 44  ? S'), ('S14', '(10 / 2) + 5 = 10 ? G'), ('S15', '(7 x 7) - 1 = 49  ? V'), ('S16', '(3 / 1) + 1 = 4 ? X'), ('S17', '(8 x 3) - 1 = 22 ? W'), ('S18', '(10 / 1) + 3 = 13  ? W'), ('S19', '(7 x 2) - 3 = 12 ? M'), ('S20', '(3 / 1) +7 = 10 ? Z'), ('S21', '(7 x 2) + 3 = 17 ? W')]), OrderedDict([('S1', '(8 / 1) - 6 = 4 ? N'), ('S2', '(6 x 4) + 1 = 25 ? R'), ('S3', '(3 x 4) + 2 = 14  ? Q'), ('S4', '(9 x 4) - 6 = 32  ? W'), ('S5', None), ('S6', '(5 / 1) - 1 = 6 ? G'), ('S7', '(8 / 2) - 4 = 0  ? T'), ('S8', None), ('S9', '(6 / 3) + 8 = 10  ? W'), ('S10', '(9 / 1) + 8 = 18  ? M'), ('S11', '(3 / 1) - 1 = 4  ? S'), ('S12', '(7 / 7) + 9 = 11  ? R'), ('S13', '(10 / 1) + 1 = 11  ? X'), ('S14', '(2 x 4) + 1 = 9 ? Z'), ('S15', None), ('S16', '(7 x 7) + 1 = 48  ? T'), ('S17', '(10 / 2) - 2 = 7 ? S'), ('S18', '(6 x 3) - 2 = 17  ? B'), ('S19', '(2 / 1) - 2 = 0  ? T'), ('S20', '(2 / 2) + 5 = 7  ? R'), ('S21', '(10 x 2) + 3 = 23  ? Q')]), OrderedDict([('S1', '(6 x 7) - 6 = 38 ? T'), ('S2', '(5 / 5) + 1 = 2 ? S'), ('S3', '(7 / 1) + 6 = 12  ? G'), ('S4', '(6 / 3) + 4 = 7  ? G'), ('S5', None), ('S6', '(10 x 2) + 4 = 22 ? T'), ('S7', '(9 x 2) - 1 = 18  ? V'), ('S8', None), ('S9', '(10 x 5) + 1 = 51  ? N'), ('S10', '(10 / 1) - 1 = 11 ? V'), ('S11', '(4 / 2) - 1 = 1 ? M'), ('S12', None), ('S13', None), ('S14', '(6 x 3) - 2 = 17  ? Q'), ('S15', None), ('S16', '(6 / 2) - 3 = 2  ? Z'), ('S17', '(7 x 2) + 3 = 16  ? N'), ('S18', '(3 x 2) - 2 = 5  ? N'), ('S19', None), ('S20', '(6 / 2) + 3 = 7  ? V'), ('S21', '(5 / 1) + 7 = 13 ? N')]), OrderedDict([('S1', None), ('S2', '(7 / 7) + 6 = 7  ? B'), ('S3', '(3 x 1) - 2 = 1 ? V'), ('S4', '(7 x 1) - 6 = 2  ? N'), ('S5', None), ('S6', '(6 x 1) - 6 = 0 ? B'), ('S7', '(3 / 1) + 3 = 6  ? B'), ('S8', None), ('S9', '(7 / 1) + 6 = 12  ? S'), ('S10', '(4 / 1) - 1 = 3  ? R'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 / 2) + 8 = 10  ? N'), ('S17', '(2 x 1) + 7 = 9 ? B'), ('S18', '(5 / 5) + 5 = 6 ? V'), ('S19', None), ('S20', '(8 x 1) + 5 = 13  ? M'), ('S21', '(4 / 2) + 3 = 7  ? B')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(8 / 4) - 2 = 2  ? Z'), ('S4', '(4 x 2) + 2 = 10 ? X'), ('S5', None), ('S6', '(3 x 3) - 2 = 7  ? W'), ('S7', None), ('S8', None), ('S9', '(2 x 1) + 1 = 4 ? V'), ('S10', '(8 / 2) + 4 = 6 ? X'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(9 / 1) + 1 = 10  ? G'), ('S17', '(3 x 3) - 2 = 7  ? R'), ('S18', None), ('S19', None), ('S20', '(8 x 1) + 8 = 16  ? G'), ('S21', '(2 x 3) + 5 = 10 ? X')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(2 / 2) + 2 = 3  ? M'), ('S4', None), ('S5', None), ('S6', '(9 / 1) - 7 = 4 ? R'), ('S7', None), ('S8', None), ('S9', '(8 x 4) + 3 = 33 ? Q'), ('S10', '(9 x 3) + 2 = 29 ? Q'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 x 4) + 1 = 17  ? S'), ('S17', '(5 / 1) + 4 = 9 ? T'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)]), OrderedDict([('S1', None), ('S2', None), ('S3', None), ('S4', None), ('S5', None), ('S6', '(5 / 1) + 3 = 9 ? Q'), ('S7', None), ('S8', None), ('S9', '(3 / 3) + 1 = 2  ? G'), ('S10', None), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', None), ('S17', '(6 / 3) + 2 = 4  ? X'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Condition.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Trial_8" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Ospan_2b"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Trial_8"/>
    <LoopInitiator loopType="TrialHandler" name="Remember_8">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Remember_8" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Remember_2b"/>
    <LoopTerminator name="Remember_8"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Trial_9">
      <Param name="Selected rows" updates="None" val=":3" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('S1', '(10 / 1) - 9 = 3  ? R'), ('S2', '(3 / 1) + 4 = 9 ? M'), ('S3', '(4 x 3) - 6 = 8 ? W'), ('S4', '(5 x 1) + 1 = 6 ? Q'), ('S5', '(4 / 1) - 4 = 0 ? G'), ('S6', '(8 / 1) - 5 = 3 ? V'), ('S7', '(2 x 2) + 1 = 5 ? X'), ('S8', '(4 x 5) - 1 = 21 ? Q'), ('S9', '(5 x 5) + 3 = 28 ? M'), ('S10', '(6 / 2) + 1 = 4  ? S'), ('S11', '(5 x 4) + 1 = 23 ? B'), ('S12', '(2 x 4) + 1 = 9 ? N'), ('S13', '(6 x 1) + 9 = 16 ? Z'), ('S14', '(4 x 2) + 1 = 9 ? V'), ('S15', '(9 / 3) + 1 = 3 ? X'), ('S16', '(5 x 3) + 3 = 18 ? R'), ('S17', '(5 x 2) + 2 = 10 ? Z'), ('S18', '(4 / 1) + 4 = 6 ? G'), ('S19', '(4 x 2) - 2 = 7  ? B'), ('S20', '(10 x 1) + 5 = 15 ? N'), ('S21', '(3 / 1) - 2 = 3 ? S')]), OrderedDict([('S1', '(2 / 1) + 4 = 6  ? W'), ('S2', '(9 x 1) - 9 = 1  ? Z'), ('S3', '(9 x 1) - 7 = 2  ? T'), ('S4', '(10 / 2) - 4 = 3 ? B'), ('S5', '(10 x 1) + 9 = 19  ? Z'), ('S6', '(2 / 2) - 2 = 0 ? S'), ('S7', '(7 / 1) - 2 = 5 ? Q'), ('S8', '(8 x 2) - 4 = 13  ? M'), ('S9', '(3 x 2) - 1 = 6 ? T'), ('S10', '(7 / 1) + 2 = 9  ? Z'), ('S11', '(7 x 2) - 1 = 14 ? X'), ('S12', '(8 / 4) + 4 = 8 ? W'), ('S13', '(9 x 5) - 1 = 44  ? S'), ('S14', '(10 / 2) + 5 = 10 ? G'), ('S15', '(7 x 7) - 1 = 49  ? V'), ('S16', '(3 / 1) + 1 = 4 ? X'), ('S17', '(8 x 3) - 1 = 22 ? W'), ('S18', '(10 / 1) + 3 = 13  ? W'), ('S19', '(7 x 2) - 3 = 12 ? M'), ('S20', '(3 / 1) +7 = 10 ? Z'), ('S21', '(7 x 2) + 3 = 17 ? W')]), OrderedDict([('S1', '(8 / 1) - 6 = 4 ? N'), ('S2', '(6 x 4) + 1 = 25 ? R'), ('S3', '(3 x 4) + 2 = 14  ? Q'), ('S4', '(9 x 4) - 6 = 32  ? W'), ('S5', None), ('S6', '(5 / 1) - 1 = 6 ? G'), ('S7', '(8 / 2) - 4 = 0  ? T'), ('S8', None), ('S9', '(6 / 3) + 8 = 10  ? W'), ('S10', '(9 / 1) + 8 = 18  ? M'), ('S11', '(3 / 1) - 1 = 4  ? S'), ('S12', '(7 / 7) + 9 = 11  ? R'), ('S13', '(10 / 1) + 1 = 11  ? X'), ('S14', '(2 x 4) + 1 = 9 ? Z'), ('S15', None), ('S16', '(7 x 7) + 1 = 48  ? T'), ('S17', '(10 / 2) - 2 = 7 ? S'), ('S18', '(6 x 3) - 2 = 17  ? B'), ('S19', '(2 / 1) - 2 = 0  ? T'), ('S20', '(2 / 2) + 5 = 7  ? R'), ('S21', '(10 x 2) + 3 = 23  ? Q')]), OrderedDict([('S1', '(6 x 7) - 6 = 38 ? T'), ('S2', '(5 / 5) + 1 = 2 ? S'), ('S3', '(7 / 1) + 6 = 12  ? G'), ('S4', '(6 / 3) + 4 = 7  ? G'), ('S5', None), ('S6', '(10 x 2) + 4 = 22 ? T'), ('S7', '(9 x 2) - 1 = 18  ? V'), ('S8', None), ('S9', '(10 x 5) + 1 = 51  ? N'), ('S10', '(10 / 1) - 1 = 11 ? V'), ('S11', '(4 / 2) - 1 = 1 ? M'), ('S12', None), ('S13', None), ('S14', '(6 x 3) - 2 = 17  ? Q'), ('S15', None), ('S16', '(6 / 2) - 3 = 2  ? Z'), ('S17', '(7 x 2) + 3 = 16  ? N'), ('S18', '(3 x 2) - 2 = 5  ? N'), ('S19', None), ('S20', '(6 / 2) + 3 = 7  ? V'), ('S21', '(5 / 1) + 7 = 13 ? N')]), OrderedDict([('S1', None), ('S2', '(7 / 7) + 6 = 7  ? B'), ('S3', '(3 x 1) - 2 = 1 ? V'), ('S4', '(7 x 1) - 6 = 2  ? N'), ('S5', None), ('S6', '(6 x 1) - 6 = 0 ? B'), ('S7', '(3 / 1) + 3 = 6  ? B'), ('S8', None), ('S9', '(7 / 1) + 6 = 12  ? S'), ('S10', '(4 / 1) - 1 = 3  ? R'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 / 2) + 8 = 10  ? N'), ('S17', '(2 x 1) + 7 = 9 ? B'), ('S18', '(5 / 5) + 5 = 6 ? V'), ('S19', None), ('S20', '(8 x 1) + 5 = 13  ? M'), ('S21', '(4 / 2) + 3 = 7  ? B')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(8 / 4) - 2 = 2  ? Z'), ('S4', '(4 x 2) + 2 = 10 ? X'), ('S5', None), ('S6', '(3 x 3) - 2 = 7  ? W'), ('S7', None), ('S8', None), ('S9', '(2 x 1) + 1 = 4 ? V'), ('S10', '(8 / 2) + 4 = 6 ? X'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(9 / 1) + 1 = 10  ? G'), ('S17', '(3 x 3) - 2 = 7  ? R'), ('S18', None), ('S19', None), ('S20', '(8 x 1) + 8 = 16  ? G'), ('S21', '(2 x 3) + 5 = 10 ? X')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(2 / 2) + 2 = 3  ? M'), ('S4', None), ('S5', None), ('S6', '(9 / 1) - 7 = 4 ? R'), ('S7', None), ('S8', None), ('S9', '(8 x 4) + 3 = 33 ? Q'), ('S10', '(9 x 3) + 2 = 29 ? Q'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 x 4) + 1 = 17  ? S'), ('S17', '(5 / 1) + 4 = 9 ? T'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)]), OrderedDict([('S1', None), ('S2', None), ('S3', None), ('S4', None), ('S5', None), ('S6', '(5 / 1) + 3 = 9 ? Q'), ('S7', None), ('S8', None), ('S9', '(3 / 3) + 1 = 2  ? G'), ('S10', None), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', None), ('S17', '(6 / 3) + 2 = 4  ? X'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Condition.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Trial_9" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Ospan_8b"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Trial_9"/>
    <LoopInitiator loopType="TrialHandler" name="Remember_9">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Remember_9" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Remember_8b"/>
    <LoopTerminator name="Remember_9"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Trial_10">
      <Param name="Selected rows" updates="None" val=":2" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('S1', '(10 / 1) - 9 = 3  ? R'), ('S2', '(3 / 1) + 4 = 9 ? M'), ('S3', '(4 x 3) - 6 = 8 ? W'), ('S4', '(5 x 1) + 1 = 6 ? Q'), ('S5', '(4 / 1) - 4 = 0 ? G'), ('S6', '(8 / 1) - 5 = 3 ? V'), ('S7', '(2 x 2) + 1 = 5 ? X'), ('S8', '(4 x 5) - 1 = 21 ? Q'), ('S9', '(5 x 5) + 3 = 28 ? M'), ('S10', '(6 / 2) + 1 = 4  ? S'), ('S11', '(5 x 4) + 1 = 23 ? B'), ('S12', '(2 x 4) + 1 = 9 ? N'), ('S13', '(6 x 1) + 9 = 16 ? Z'), ('S14', '(4 x 2) + 1 = 9 ? V'), ('S15', '(9 / 3) + 1 = 3 ? X'), ('S16', '(5 x 3) + 3 = 18 ? R'), ('S17', '(5 x 2) + 2 = 10 ? Z'), ('S18', '(4 / 1) + 4 = 6 ? G'), ('S19', '(4 x 2) - 2 = 7  ? B'), ('S20', '(10 x 1) + 5 = 15 ? N'), ('S21', '(3 / 1) - 2 = 3 ? S')]), OrderedDict([('S1', '(2 / 1) + 4 = 6  ? W'), ('S2', '(9 x 1) - 9 = 1  ? Z'), ('S3', '(9 x 1) - 7 = 2  ? T'), ('S4', '(10 / 2) - 4 = 3 ? B'), ('S5', '(10 x 1) + 9 = 19  ? Z'), ('S6', '(2 / 2) - 2 = 0 ? S'), ('S7', '(7 / 1) - 2 = 5 ? Q'), ('S8', '(8 x 2) - 4 = 13  ? M'), ('S9', '(3 x 2) - 1 = 6 ? T'), ('S10', '(7 / 1) + 2 = 9  ? Z'), ('S11', '(7 x 2) - 1 = 14 ? X'), ('S12', '(8 / 4) + 4 = 8 ? W'), ('S13', '(9 x 5) - 1 = 44  ? S'), ('S14', '(10 / 2) + 5 = 10 ? G'), ('S15', '(7 x 7) - 1 = 49  ? V'), ('S16', '(3 / 1) + 1 = 4 ? X'), ('S17', '(8 x 3) - 1 = 22 ? W'), ('S18', '(10 / 1) + 3 = 13  ? W'), ('S19', '(7 x 2) - 3 = 12 ? M'), ('S20', '(3 / 1) +7 = 10 ? Z'), ('S21', '(7 x 2) + 3 = 17 ? W')]), OrderedDict([('S1', '(8 / 1) - 6 = 4 ? N'), ('S2', '(6 x 4) + 1 = 25 ? R'), ('S3', '(3 x 4) + 2 = 14  ? Q'), ('S4', '(9 x 4) - 6 = 32  ? W'), ('S5', None), ('S6', '(5 / 1) - 1 = 6 ? G'), ('S7', '(8 / 2) - 4 = 0  ? T'), ('S8', None), ('S9', '(6 / 3) + 8 = 10  ? W'), ('S10', '(9 / 1) + 8 = 18  ? M'), ('S11', '(3 / 1) - 1 = 4  ? S'), ('S12', '(7 / 7) + 9 = 11  ? R'), ('S13', '(10 / 1) + 1 = 11  ? X'), ('S14', '(2 x 4) + 1 = 9 ? Z'), ('S15', None), ('S16', '(7 x 7) + 1 = 48  ? T'), ('S17', '(10 / 2) - 2 = 7 ? S'), ('S18', '(6 x 3) - 2 = 17  ? B'), ('S19', '(2 / 1) - 2 = 0  ? T'), ('S20', '(2 / 2) + 5 = 7  ? R'), ('S21', '(10 x 2) + 3 = 23  ? Q')]), OrderedDict([('S1', '(6 x 7) - 6 = 38 ? T'), ('S2', '(5 / 5) + 1 = 2 ? S'), ('S3', '(7 / 1) + 6 = 12  ? G'), ('S4', '(6 / 3) + 4 = 7  ? G'), ('S5', None), ('S6', '(10 x 2) + 4 = 22 ? T'), ('S7', '(9 x 2) - 1 = 18  ? V'), ('S8', None), ('S9', '(10 x 5) + 1 = 51  ? N'), ('S10', '(10 / 1) - 1 = 11 ? V'), ('S11', '(4 / 2) - 1 = 1 ? M'), ('S12', None), ('S13', None), ('S14', '(6 x 3) - 2 = 17  ? Q'), ('S15', None), ('S16', '(6 / 2) - 3 = 2  ? Z'), ('S17', '(7 x 2) + 3 = 16  ? N'), ('S18', '(3 x 2) - 2 = 5  ? N'), ('S19', None), ('S20', '(6 / 2) + 3 = 7  ? V'), ('S21', '(5 / 1) + 7 = 13 ? N')]), OrderedDict([('S1', None), ('S2', '(7 / 7) + 6 = 7  ? B'), ('S3', '(3 x 1) - 2 = 1 ? V'), ('S4', '(7 x 1) - 6 = 2  ? N'), ('S5', None), ('S6', '(6 x 1) - 6 = 0 ? B'), ('S7', '(3 / 1) + 3 = 6  ? B'), ('S8', None), ('S9', '(7 / 1) + 6 = 12  ? S'), ('S10', '(4 / 1) - 1 = 3  ? R'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 / 2) + 8 = 10  ? N'), ('S17', '(2 x 1) + 7 = 9 ? B'), ('S18', '(5 / 5) + 5 = 6 ? V'), ('S19', None), ('S20', '(8 x 1) + 5 = 13  ? M'), ('S21', '(4 / 2) + 3 = 7  ? B')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(8 / 4) - 2 = 2  ? Z'), ('S4', '(4 x 2) + 2 = 10 ? X'), ('S5', None), ('S6', '(3 x 3) - 2 = 7  ? W'), ('S7', None), ('S8', None), ('S9', '(2 x 1) + 1 = 4 ? V'), ('S10', '(8 / 2) + 4 = 6 ? X'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(9 / 1) + 1 = 10  ? G'), ('S17', '(3 x 3) - 2 = 7  ? R'), ('S18', None), ('S19', None), ('S20', '(8 x 1) + 8 = 16  ? G'), ('S21', '(2 x 3) + 5 = 10 ? X')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(2 / 2) + 2 = 3  ? M'), ('S4', None), ('S5', None), ('S6', '(9 / 1) - 7 = 4 ? R'), ('S7', None), ('S8', None), ('S9', '(8 x 4) + 3 = 33 ? Q'), ('S10', '(9 x 3) + 2 = 29 ? Q'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 x 4) + 1 = 17  ? S'), ('S17', '(5 / 1) + 4 = 9 ? T'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)]), OrderedDict([('S1', None), ('S2', None), ('S3', None), ('S4', None), ('S5', None), ('S6', '(5 / 1) + 3 = 9 ? Q'), ('S7', None), ('S8', None), ('S9', '(3 / 3) + 1 = 2  ? G'), ('S10', None), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', None), ('S17', '(6 / 3) + 2 = 4  ? X'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Condition.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Trial_10" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Ospan_7b"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Trial_10"/>
    <LoopInitiator loopType="TrialHandler" name="Remember_10">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Remember_10" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Remember_7b"/>
    <LoopTerminator name="Remember_10"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Trial_11">
      <Param name="Selected rows" updates="None" val=":4" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('S1', '(10 / 1) - 9 = 3  ? R'), ('S2', '(3 / 1) + 4 = 9 ? M'), ('S3', '(4 x 3) - 6 = 8 ? W'), ('S4', '(5 x 1) + 1 = 6 ? Q'), ('S5', '(4 / 1) - 4 = 0 ? G'), ('S6', '(8 / 1) - 5 = 3 ? V'), ('S7', '(2 x 2) + 1 = 5 ? X'), ('S8', '(4 x 5) - 1 = 21 ? Q'), ('S9', '(5 x 5) + 3 = 28 ? M'), ('S10', '(6 / 2) + 1 = 4  ? S'), ('S11', '(5 x 4) + 1 = 23 ? B'), ('S12', '(2 x 4) + 1 = 9 ? N'), ('S13', '(6 x 1) + 9 = 16 ? Z'), ('S14', '(4 x 2) + 1 = 9 ? V'), ('S15', '(9 / 3) + 1 = 3 ? X'), ('S16', '(5 x 3) + 3 = 18 ? R'), ('S17', '(5 x 2) + 2 = 10 ? Z'), ('S18', '(4 / 1) + 4 = 6 ? G'), ('S19', '(4 x 2) - 2 = 7  ? B'), ('S20', '(10 x 1) + 5 = 15 ? N'), ('S21', '(3 / 1) - 2 = 3 ? S')]), OrderedDict([('S1', '(2 / 1) + 4 = 6  ? W'), ('S2', '(9 x 1) - 9 = 1  ? Z'), ('S3', '(9 x 1) - 7 = 2  ? T'), ('S4', '(10 / 2) - 4 = 3 ? B'), ('S5', '(10 x 1) + 9 = 19  ? Z'), ('S6', '(2 / 2) - 2 = 0 ? S'), ('S7', '(7 / 1) - 2 = 5 ? Q'), ('S8', '(8 x 2) - 4 = 13  ? M'), ('S9', '(3 x 2) - 1 = 6 ? T'), ('S10', '(7 / 1) + 2 = 9  ? Z'), ('S11', '(7 x 2) - 1 = 14 ? X'), ('S12', '(8 / 4) + 4 = 8 ? W'), ('S13', '(9 x 5) - 1 = 44  ? S'), ('S14', '(10 / 2) + 5 = 10 ? G'), ('S15', '(7 x 7) - 1 = 49  ? V'), ('S16', '(3 / 1) + 1 = 4 ? X'), ('S17', '(8 x 3) - 1 = 22 ? W'), ('S18', '(10 / 1) + 3 = 13  ? W'), ('S19', '(7 x 2) - 3 = 12 ? M'), ('S20', '(3 / 1) +7 = 10 ? Z'), ('S21', '(7 x 2) + 3 = 17 ? W')]), OrderedDict([('S1', '(8 / 1) - 6 = 4 ? N'), ('S2', '(6 x 4) + 1 = 25 ? R'), ('S3', '(3 x 4) + 2 = 14  ? Q'), ('S4', '(9 x 4) - 6 = 32  ? W'), ('S5', None), ('S6', '(5 / 1) - 1 = 6 ? G'), ('S7', '(8 / 2) - 4 = 0  ? T'), ('S8', None), ('S9', '(6 / 3) + 8 = 10  ? W'), ('S10', '(9 / 1) + 8 = 18  ? M'), ('S11', '(3 / 1) - 1 = 4  ? S'), ('S12', '(7 / 7) + 9 = 11  ? R'), ('S13', '(10 / 1) + 1 = 11  ? X'), ('S14', '(2 x 4) + 1 = 9 ? Z'), ('S15', None), ('S16', '(7 x 7) + 1 = 48  ? T'), ('S17', '(10 / 2) - 2 = 7 ? S'), ('S18', '(6 x 3) - 2 = 17  ? B'), ('S19', '(2 / 1) - 2 = 0  ? T'), ('S20', '(2 / 2) + 5 = 7  ? R'), ('S21', '(10 x 2) + 3 = 23  ? Q')]), OrderedDict([('S1', '(6 x 7) - 6 = 38 ? T'), ('S2', '(5 / 5) + 1 = 2 ? S'), ('S3', '(7 / 1) + 6 = 12  ? G'), ('S4', '(6 / 3) + 4 = 7  ? G'), ('S5', None), ('S6', '(10 x 2) + 4 = 22 ? T'), ('S7', '(9 x 2) - 1 = 18  ? V'), ('S8', None), ('S9', '(10 x 5) + 1 = 51  ? N'), ('S10', '(10 / 1) - 1 = 11 ? V'), ('S11', '(4 / 2) - 1 = 1 ? M'), ('S12', None), ('S13', None), ('S14', '(6 x 3) - 2 = 17  ? Q'), ('S15', None), ('S16', '(6 / 2) - 3 = 2  ? Z'), ('S17', '(7 x 2) + 3 = 16  ? N'), ('S18', '(3 x 2) - 2 = 5  ? N'), ('S19', None), ('S20', '(6 / 2) + 3 = 7  ? V'), ('S21', '(5 / 1) + 7 = 13 ? N')]), OrderedDict([('S1', None), ('S2', '(7 / 7) + 6 = 7  ? B'), ('S3', '(3 x 1) - 2 = 1 ? V'), ('S4', '(7 x 1) - 6 = 2  ? N'), ('S5', None), ('S6', '(6 x 1) - 6 = 0 ? B'), ('S7', '(3 / 1) + 3 = 6  ? B'), ('S8', None), ('S9', '(7 / 1) + 6 = 12  ? S'), ('S10', '(4 / 1) - 1 = 3  ? R'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 / 2) + 8 = 10  ? N'), ('S17', '(2 x 1) + 7 = 9 ? B'), ('S18', '(5 / 5) + 5 = 6 ? V'), ('S19', None), ('S20', '(8 x 1) + 5 = 13  ? M'), ('S21', '(4 / 2) + 3 = 7  ? B')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(8 / 4) - 2 = 2  ? Z'), ('S4', '(4 x 2) + 2 = 10 ? X'), ('S5', None), ('S6', '(3 x 3) - 2 = 7  ? W'), ('S7', None), ('S8', None), ('S9', '(2 x 1) + 1 = 4 ? V'), ('S10', '(8 / 2) + 4 = 6 ? X'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(9 / 1) + 1 = 10  ? G'), ('S17', '(3 x 3) - 2 = 7  ? R'), ('S18', None), ('S19', None), ('S20', '(8 x 1) + 8 = 16  ? G'), ('S21', '(2 x 3) + 5 = 10 ? X')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(2 / 2) + 2 = 3  ? M'), ('S4', None), ('S5', None), ('S6', '(9 / 1) - 7 = 4 ? R'), ('S7', None), ('S8', None), ('S9', '(8 x 4) + 3 = 33 ? Q'), ('S10', '(9 x 3) + 2 = 29 ? Q'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 x 4) + 1 = 17  ? S'), ('S17', '(5 / 1) + 4 = 9 ? T'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)]), OrderedDict([('S1', None), ('S2', None), ('S3', None), ('S4', None), ('S5', None), ('S6', '(5 / 1) + 3 = 9 ? Q'), ('S7', None), ('S8', None), ('S9', '(3 / 3) + 1 = 2  ? G'), ('S10', None), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', None), ('S17', '(6 / 3) + 2 = 4  ? X'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Condition.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Trial_11" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Ospan_4b"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Trial_11"/>
    <LoopInitiator loopType="TrialHandler" name="Remember_11">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Remember_11" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Remember_4b"/>
    <LoopTerminator name="Remember_11"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Trial_12">
      <Param name="Selected rows" updates="None" val=":5" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('S1', '(10 / 1) - 9 = 3  ? R'), ('S2', '(3 / 1) + 4 = 9 ? M'), ('S3', '(4 x 3) - 6 = 8 ? W'), ('S4', '(5 x 1) + 1 = 6 ? Q'), ('S5', '(4 / 1) - 4 = 0 ? G'), ('S6', '(8 / 1) - 5 = 3 ? V'), ('S7', '(2 x 2) + 1 = 5 ? X'), ('S8', '(4 x 5) - 1 = 21 ? Q'), ('S9', '(5 x 5) + 3 = 28 ? M'), ('S10', '(6 / 2) + 1 = 4  ? S'), ('S11', '(5 x 4) + 1 = 23 ? B'), ('S12', '(2 x 4) + 1 = 9 ? N'), ('S13', '(6 x 1) + 9 = 16 ? Z'), ('S14', '(4 x 2) + 1 = 9 ? V'), ('S15', '(9 / 3) + 1 = 3 ? X'), ('S16', '(5 x 3) + 3 = 18 ? R'), ('S17', '(5 x 2) + 2 = 10 ? Z'), ('S18', '(4 / 1) + 4 = 6 ? G'), ('S19', '(4 x 2) - 2 = 7  ? B'), ('S20', '(10 x 1) + 5 = 15 ? N'), ('S21', '(3 / 1) - 2 = 3 ? S')]), OrderedDict([('S1', '(2 / 1) + 4 = 6  ? W'), ('S2', '(9 x 1) - 9 = 1  ? Z'), ('S3', '(9 x 1) - 7 = 2  ? T'), ('S4', '(10 / 2) - 4 = 3 ? B'), ('S5', '(10 x 1) + 9 = 19  ? Z'), ('S6', '(2 / 2) - 2 = 0 ? S'), ('S7', '(7 / 1) - 2 = 5 ? Q'), ('S8', '(8 x 2) - 4 = 13  ? M'), ('S9', '(3 x 2) - 1 = 6 ? T'), ('S10', '(7 / 1) + 2 = 9  ? Z'), ('S11', '(7 x 2) - 1 = 14 ? X'), ('S12', '(8 / 4) + 4 = 8 ? W'), ('S13', '(9 x 5) - 1 = 44  ? S'), ('S14', '(10 / 2) + 5 = 10 ? G'), ('S15', '(7 x 7) - 1 = 49  ? V'), ('S16', '(3 / 1) + 1 = 4 ? X'), ('S17', '(8 x 3) - 1 = 22 ? W'), ('S18', '(10 / 1) + 3 = 13  ? W'), ('S19', '(7 x 2) - 3 = 12 ? M'), ('S20', '(3 / 1) +7 = 10 ? Z'), ('S21', '(7 x 2) + 3 = 17 ? W')]), OrderedDict([('S1', '(8 / 1) - 6 = 4 ? N'), ('S2', '(6 x 4) + 1 = 25 ? R'), ('S3', '(3 x 4) + 2 = 14  ? Q'), ('S4', '(9 x 4) - 6 = 32  ? W'), ('S5', None), ('S6', '(5 / 1) - 1 = 6 ? G'), ('S7', '(8 / 2) - 4 = 0  ? T'), ('S8', None), ('S9', '(6 / 3) + 8 = 10  ? W'), ('S10', '(9 / 1) + 8 = 18  ? M'), ('S11', '(3 / 1) - 1 = 4  ? S'), ('S12', '(7 / 7) + 9 = 11  ? R'), ('S13', '(10 / 1) + 1 = 11  ? X'), ('S14', '(2 x 4) + 1 = 9 ? Z'), ('S15', None), ('S16', '(7 x 7) + 1 = 48  ? T'), ('S17', '(10 / 2) - 2 = 7 ? S'), ('S18', '(6 x 3) - 2 = 17  ? B'), ('S19', '(2 / 1) - 2 = 0  ? T'), ('S20', '(2 / 2) + 5 = 7  ? R'), ('S21', '(10 x 2) + 3 = 23  ? Q')]), OrderedDict([('S1', '(6 x 7) - 6 = 38 ? T'), ('S2', '(5 / 5) + 1 = 2 ? S'), ('S3', '(7 / 1) + 6 = 12  ? G'), ('S4', '(6 / 3) + 4 = 7  ? G'), ('S5', None), ('S6', '(10 x 2) + 4 = 22 ? T'), ('S7', '(9 x 2) - 1 = 18  ? V'), ('S8', None), ('S9', '(10 x 5) + 1 = 51  ? N'), ('S10', '(10 / 1) - 1 = 11 ? V'), ('S11', '(4 / 2) - 1 = 1 ? M'), ('S12', None), ('S13', None), ('S14', '(6 x 3) - 2 = 17  ? Q'), ('S15', None), ('S16', '(6 / 2) - 3 = 2  ? Z'), ('S17', '(7 x 2) + 3 = 16  ? N'), ('S18', '(3 x 2) - 2 = 5  ? N'), ('S19', None), ('S20', '(6 / 2) + 3 = 7  ? V'), ('S21', '(5 / 1) + 7 = 13 ? N')]), OrderedDict([('S1', None), ('S2', '(7 / 7) + 6 = 7  ? B'), ('S3', '(3 x 1) - 2 = 1 ? V'), ('S4', '(7 x 1) - 6 = 2  ? N'), ('S5', None), ('S6', '(6 x 1) - 6 = 0 ? B'), ('S7', '(3 / 1) + 3 = 6  ? B'), ('S8', None), ('S9', '(7 / 1) + 6 = 12  ? S'), ('S10', '(4 / 1) - 1 = 3  ? R'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 / 2) + 8 = 10  ? N'), ('S17', '(2 x 1) + 7 = 9 ? B'), ('S18', '(5 / 5) + 5 = 6 ? V'), ('S19', None), ('S20', '(8 x 1) + 5 = 13  ? M'), ('S21', '(4 / 2) + 3 = 7  ? B')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(8 / 4) - 2 = 2  ? Z'), ('S4', '(4 x 2) + 2 = 10 ? X'), ('S5', None), ('S6', '(3 x 3) - 2 = 7  ? W'), ('S7', None), ('S8', None), ('S9', '(2 x 1) + 1 = 4 ? V'), ('S10', '(8 / 2) + 4 = 6 ? X'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(9 / 1) + 1 = 10  ? G'), ('S17', '(3 x 3) - 2 = 7  ? R'), ('S18', None), ('S19', None), ('S20', '(8 x 1) + 8 = 16  ? G'), ('S21', '(2 x 3) + 5 = 10 ? X')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(2 / 2) + 2 = 3  ? M'), ('S4', None), ('S5', None), ('S6', '(9 / 1) - 7 = 4 ? R'), ('S7', None), ('S8', None), ('S9', '(8 x 4) + 3 = 33 ? Q'), ('S10', '(9 x 3) + 2 = 29 ? Q'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 x 4) + 1 = 17  ? S'), ('S17', '(5 / 1) + 4 = 9 ? T'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)]), OrderedDict([('S1', None), ('S2', None), ('S3', None), ('S4', None), ('S5', None), ('S6', '(5 / 1) + 3 = 9 ? Q'), ('S7', None), ('S8', None), ('S9', '(3 / 3) + 1 = 2  ? G'), ('S10', None), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', None), ('S17', '(6 / 3) + 2 = 4  ? X'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Condition.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Trial_12" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Ospan_3a"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Trial_12"/>
    <LoopInitiator loopType="TrialHandler" name="Remember_12">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Remember_12" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Remember_3a"/>
    <LoopTerminator name="Remember_12"/>
    <Routine name="Blank100"/>
    <Routine name="Relax"/>
    <Routine name="Blank100"/>
    <Routine name="warning"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Trial_13">
      <Param name="Selected rows" updates="None" val=":7" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('S1', '(10 / 1) - 9 = 3  ? R'), ('S2', '(3 / 1) + 4 = 9 ? M'), ('S3', '(4 x 3) - 6 = 8 ? W'), ('S4', '(5 x 1) + 1 = 6 ? Q'), ('S5', '(4 / 1) - 4 = 0 ? G'), ('S6', '(8 / 1) - 5 = 3 ? V'), ('S7', '(2 x 2) + 1 = 5 ? X'), ('S8', '(4 x 5) - 1 = 21 ? Q'), ('S9', '(5 x 5) + 3 = 28 ? M'), ('S10', '(6 / 2) + 1 = 4  ? S'), ('S11', '(5 x 4) + 1 = 23 ? B'), ('S12', '(2 x 4) + 1 = 9 ? N'), ('S13', '(6 x 1) + 9 = 16 ? Z'), ('S14', '(4 x 2) + 1 = 9 ? V'), ('S15', '(9 / 3) + 1 = 3 ? X'), ('S16', '(5 x 3) + 3 = 18 ? R'), ('S17', '(5 x 2) + 2 = 10 ? Z'), ('S18', '(4 / 1) + 4 = 6 ? G'), ('S19', '(4 x 2) - 2 = 7  ? B'), ('S20', '(10 x 1) + 5 = 15 ? N'), ('S21', '(3 / 1) - 2 = 3 ? S')]), OrderedDict([('S1', '(2 / 1) + 4 = 6  ? W'), ('S2', '(9 x 1) - 9 = 1  ? Z'), ('S3', '(9 x 1) - 7 = 2  ? T'), ('S4', '(10 / 2) - 4 = 3 ? B'), ('S5', '(10 x 1) + 9 = 19  ? Z'), ('S6', '(2 / 2) - 2 = 0 ? S'), ('S7', '(7 / 1) - 2 = 5 ? Q'), ('S8', '(8 x 2) - 4 = 13  ? M'), ('S9', '(3 x 2) - 1 = 6 ? T'), ('S10', '(7 / 1) + 2 = 9  ? Z'), ('S11', '(7 x 2) - 1 = 14 ? X'), ('S12', '(8 / 4) + 4 = 8 ? W'), ('S13', '(9 x 5) - 1 = 44  ? S'), ('S14', '(10 / 2) + 5 = 10 ? G'), ('S15', '(7 x 7) - 1 = 49  ? V'), ('S16', '(3 / 1) + 1 = 4 ? X'), ('S17', '(8 x 3) - 1 = 22 ? W'), ('S18', '(10 / 1) + 3 = 13  ? W'), ('S19', '(7 x 2) - 3 = 12 ? M'), ('S20', '(3 / 1) +7 = 10 ? Z'), ('S21', '(7 x 2) + 3 = 17 ? W')]), OrderedDict([('S1', '(8 / 1) - 6 = 4 ? N'), ('S2', '(6 x 4) + 1 = 25 ? R'), ('S3', '(3 x 4) + 2 = 14  ? Q'), ('S4', '(9 x 4) - 6 = 32  ? W'), ('S5', None), ('S6', '(5 / 1) - 1 = 6 ? G'), ('S7', '(8 / 2) - 4 = 0  ? T'), ('S8', None), ('S9', '(6 / 3) + 8 = 10  ? W'), ('S10', '(9 / 1) + 8 = 18  ? M'), ('S11', '(3 / 1) - 1 = 4  ? S'), ('S12', '(7 / 7) + 9 = 11  ? R'), ('S13', '(10 / 1) + 1 = 11  ? X'), ('S14', '(2 x 4) + 1 = 9 ? Z'), ('S15', None), ('S16', '(7 x 7) + 1 = 48  ? T'), ('S17', '(10 / 2) - 2 = 7 ? S'), ('S18', '(6 x 3) - 2 = 17  ? B'), ('S19', '(2 / 1) - 2 = 0  ? T'), ('S20', '(2 / 2) + 5 = 7  ? R'), ('S21', '(10 x 2) + 3 = 23  ? Q')]), OrderedDict([('S1', '(6 x 7) - 6 = 38 ? T'), ('S2', '(5 / 5) + 1 = 2 ? S'), ('S3', '(7 / 1) + 6 = 12  ? G'), ('S4', '(6 / 3) + 4 = 7  ? G'), ('S5', None), ('S6', '(10 x 2) + 4 = 22 ? T'), ('S7', '(9 x 2) - 1 = 18  ? V'), ('S8', None), ('S9', '(10 x 5) + 1 = 51  ? N'), ('S10', '(10 / 1) - 1 = 11 ? V'), ('S11', '(4 / 2) - 1 = 1 ? M'), ('S12', None), ('S13', None), ('S14', '(6 x 3) - 2 = 17  ? Q'), ('S15', None), ('S16', '(6 / 2) - 3 = 2  ? Z'), ('S17', '(7 x 2) + 3 = 16  ? N'), ('S18', '(3 x 2) - 2 = 5  ? N'), ('S19', None), ('S20', '(6 / 2) + 3 = 7  ? V'), ('S21', '(5 / 1) + 7 = 13 ? N')]), OrderedDict([('S1', None), ('S2', '(7 / 7) + 6 = 7  ? B'), ('S3', '(3 x 1) - 2 = 1 ? V'), ('S4', '(7 x 1) - 6 = 2  ? N'), ('S5', None), ('S6', '(6 x 1) - 6 = 0 ? B'), ('S7', '(3 / 1) + 3 = 6  ? B'), ('S8', None), ('S9', '(7 / 1) + 6 = 12  ? S'), ('S10', '(4 / 1) - 1 = 3  ? R'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 / 2) + 8 = 10  ? N'), ('S17', '(2 x 1) + 7 = 9 ? B'), ('S18', '(5 / 5) + 5 = 6 ? V'), ('S19', None), ('S20', '(8 x 1) + 5 = 13  ? M'), ('S21', '(4 / 2) + 3 = 7  ? B')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(8 / 4) - 2 = 2  ? Z'), ('S4', '(4 x 2) + 2 = 10 ? X'), ('S5', None), ('S6', '(3 x 3) - 2 = 7  ? W'), ('S7', None), ('S8', None), ('S9', '(2 x 1) + 1 = 4 ? V'), ('S10', '(8 / 2) + 4 = 6 ? X'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(9 / 1) + 1 = 10  ? G'), ('S17', '(3 x 3) - 2 = 7  ? R'), ('S18', None), ('S19', None), ('S20', '(8 x 1) + 8 = 16  ? G'), ('S21', '(2 x 3) + 5 = 10 ? X')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(2 / 2) + 2 = 3  ? M'), ('S4', None), ('S5', None), ('S6', '(9 / 1) - 7 = 4 ? R'), ('S7', None), ('S8', None), ('S9', '(8 x 4) + 3 = 33 ? Q'), ('S10', '(9 x 3) + 2 = 29 ? Q'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 x 4) + 1 = 17  ? S'), ('S17', '(5 / 1) + 4 = 9 ? T'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)]), OrderedDict([('S1', None), ('S2', None), ('S3', None), ('S4', None), ('S5', None), ('S6', '(5 / 1) + 3 = 9 ? Q'), ('S7', None), ('S8', None), ('S9', '(3 / 3) + 1 = 2  ? G'), ('S10', None), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', None), ('S17', '(6 / 3) + 2 = 4  ? X'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Condition.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Trial_13" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Ospan_3b"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Trial_13"/>
    <LoopInitiator loopType="TrialHandler" name="Remember_13">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Remember_13" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Remember_3b"/>
    <LoopTerminator name="Remember_13"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Trial_14">
      <Param name="Selected rows" updates="None" val=":6" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('S1', '(10 / 1) - 9 = 3  ? R'), ('S2', '(3 / 1) + 4 = 9 ? M'), ('S3', '(4 x 3) - 6 = 8 ? W'), ('S4', '(5 x 1) + 1 = 6 ? Q'), ('S5', '(4 / 1) - 4 = 0 ? G'), ('S6', '(8 / 1) - 5 = 3 ? V'), ('S7', '(2 x 2) + 1 = 5 ? X'), ('S8', '(4 x 5) - 1 = 21 ? Q'), ('S9', '(5 x 5) + 3 = 28 ? M'), ('S10', '(6 / 2) + 1 = 4  ? S'), ('S11', '(5 x 4) + 1 = 23 ? B'), ('S12', '(2 x 4) + 1 = 9 ? N'), ('S13', '(6 x 1) + 9 = 16 ? Z'), ('S14', '(4 x 2) + 1 = 9 ? V'), ('S15', '(9 / 3) + 1 = 3 ? X'), ('S16', '(5 x 3) + 3 = 18 ? R'), ('S17', '(5 x 2) + 2 = 10 ? Z'), ('S18', '(4 / 1) + 4 = 6 ? G'), ('S19', '(4 x 2) - 2 = 7  ? B'), ('S20', '(10 x 1) + 5 = 15 ? N'), ('S21', '(3 / 1) - 2 = 3 ? S')]), OrderedDict([('S1', '(2 / 1) + 4 = 6  ? W'), ('S2', '(9 x 1) - 9 = 1  ? Z'), ('S3', '(9 x 1) - 7 = 2  ? T'), ('S4', '(10 / 2) - 4 = 3 ? B'), ('S5', '(10 x 1) + 9 = 19  ? Z'), ('S6', '(2 / 2) - 2 = 0 ? S'), ('S7', '(7 / 1) - 2 = 5 ? Q'), ('S8', '(8 x 2) - 4 = 13  ? M'), ('S9', '(3 x 2) - 1 = 6 ? T'), ('S10', '(7 / 1) + 2 = 9  ? Z'), ('S11', '(7 x 2) - 1 = 14 ? X'), ('S12', '(8 / 4) + 4 = 8 ? W'), ('S13', '(9 x 5) - 1 = 44  ? S'), ('S14', '(10 / 2) + 5 = 10 ? G'), ('S15', '(7 x 7) - 1 = 49  ? V'), ('S16', '(3 / 1) + 1 = 4 ? X'), ('S17', '(8 x 3) - 1 = 22 ? W'), ('S18', '(10 / 1) + 3 = 13  ? W'), ('S19', '(7 x 2) - 3 = 12 ? M'), ('S20', '(3 / 1) +7 = 10 ? Z'), ('S21', '(7 x 2) + 3 = 17 ? W')]), OrderedDict([('S1', '(8 / 1) - 6 = 4 ? N'), ('S2', '(6 x 4) + 1 = 25 ? R'), ('S3', '(3 x 4) + 2 = 14  ? Q'), ('S4', '(9 x 4) - 6 = 32  ? W'), ('S5', None), ('S6', '(5 / 1) - 1 = 6 ? G'), ('S7', '(8 / 2) - 4 = 0  ? T'), ('S8', None), ('S9', '(6 / 3) + 8 = 10  ? W'), ('S10', '(9 / 1) + 8 = 18  ? M'), ('S11', '(3 / 1) - 1 = 4  ? S'), ('S12', '(7 / 7) + 9 = 11  ? R'), ('S13', '(10 / 1) + 1 = 11  ? X'), ('S14', '(2 x 4) + 1 = 9 ? Z'), ('S15', None), ('S16', '(7 x 7) + 1 = 48  ? T'), ('S17', '(10 / 2) - 2 = 7 ? S'), ('S18', '(6 x 3) - 2 = 17  ? B'), ('S19', '(2 / 1) - 2 = 0  ? T'), ('S20', '(2 / 2) + 5 = 7  ? R'), ('S21', '(10 x 2) + 3 = 23  ? Q')]), OrderedDict([('S1', '(6 x 7) - 6 = 38 ? T'), ('S2', '(5 / 5) + 1 = 2 ? S'), ('S3', '(7 / 1) + 6 = 12  ? G'), ('S4', '(6 / 3) + 4 = 7  ? G'), ('S5', None), ('S6', '(10 x 2) + 4 = 22 ? T'), ('S7', '(9 x 2) - 1 = 18  ? V'), ('S8', None), ('S9', '(10 x 5) + 1 = 51  ? N'), ('S10', '(10 / 1) - 1 = 11 ? V'), ('S11', '(4 / 2) - 1 = 1 ? M'), ('S12', None), ('S13', None), ('S14', '(6 x 3) - 2 = 17  ? Q'), ('S15', None), ('S16', '(6 / 2) - 3 = 2  ? Z'), ('S17', '(7 x 2) + 3 = 16  ? N'), ('S18', '(3 x 2) - 2 = 5  ? N'), ('S19', None), ('S20', '(6 / 2) + 3 = 7  ? V'), ('S21', '(5 / 1) + 7 = 13 ? N')]), OrderedDict([('S1', None), ('S2', '(7 / 7) + 6 = 7  ? B'), ('S3', '(3 x 1) - 2 = 1 ? V'), ('S4', '(7 x 1) - 6 = 2  ? N'), ('S5', None), ('S6', '(6 x 1) - 6 = 0 ? B'), ('S7', '(3 / 1) + 3 = 6  ? B'), ('S8', None), ('S9', '(7 / 1) + 6 = 12  ? S'), ('S10', '(4 / 1) - 1 = 3  ? R'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 / 2) + 8 = 10  ? N'), ('S17', '(2 x 1) + 7 = 9 ? B'), ('S18', '(5 / 5) + 5 = 6 ? V'), ('S19', None), ('S20', '(8 x 1) + 5 = 13  ? M'), ('S21', '(4 / 2) + 3 = 7  ? B')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(8 / 4) - 2 = 2  ? Z'), ('S4', '(4 x 2) + 2 = 10 ? X'), ('S5', None), ('S6', '(3 x 3) - 2 = 7  ? W'), ('S7', None), ('S8', None), ('S9', '(2 x 1) + 1 = 4 ? V'), ('S10', '(8 / 2) + 4 = 6 ? X'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(9 / 1) + 1 = 10  ? G'), ('S17', '(3 x 3) - 2 = 7  ? R'), ('S18', None), ('S19', None), ('S20', '(8 x 1) + 8 = 16  ? G'), ('S21', '(2 x 3) + 5 = 10 ? X')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(2 / 2) + 2 = 3  ? M'), ('S4', None), ('S5', None), ('S6', '(9 / 1) - 7 = 4 ? R'), ('S7', None), ('S8', None), ('S9', '(8 x 4) + 3 = 33 ? Q'), ('S10', '(9 x 3) + 2 = 29 ? Q'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 x 4) + 1 = 17  ? S'), ('S17', '(5 / 1) + 4 = 9 ? T'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)]), OrderedDict([('S1', None), ('S2', None), ('S3', None), ('S4', None), ('S5', None), ('S6', '(5 / 1) + 3 = 9 ? Q'), ('S7', None), ('S8', None), ('S9', '(3 / 3) + 1 = 2  ? G'), ('S10', None), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', None), ('S17', '(6 / 3) + 2 = 4  ? X'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Condition.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Trial_14" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Ospan_4c"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Trial_14"/>
    <LoopInitiator loopType="TrialHandler" name="Remember_14">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Remember_14" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Remember_4c"/>
    <LoopTerminator name="Remember_14"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Trial_15">
      <Param name="Selected rows" updates="None" val=":7" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('S1', '(10 / 1) - 9 = 3  ? R'), ('S2', '(3 / 1) + 4 = 9 ? M'), ('S3', '(4 x 3) - 6 = 8 ? W'), ('S4', '(5 x 1) + 1 = 6 ? Q'), ('S5', '(4 / 1) - 4 = 0 ? G'), ('S6', '(8 / 1) - 5 = 3 ? V'), ('S7', '(2 x 2) + 1 = 5 ? X'), ('S8', '(4 x 5) - 1 = 21 ? Q'), ('S9', '(5 x 5) + 3 = 28 ? M'), ('S10', '(6 / 2) + 1 = 4  ? S'), ('S11', '(5 x 4) + 1 = 23 ? B'), ('S12', '(2 x 4) + 1 = 9 ? N'), ('S13', '(6 x 1) + 9 = 16 ? Z'), ('S14', '(4 x 2) + 1 = 9 ? V'), ('S15', '(9 / 3) + 1 = 3 ? X'), ('S16', '(5 x 3) + 3 = 18 ? R'), ('S17', '(5 x 2) + 2 = 10 ? Z'), ('S18', '(4 / 1) + 4 = 6 ? G'), ('S19', '(4 x 2) - 2 = 7  ? B'), ('S20', '(10 x 1) + 5 = 15 ? N'), ('S21', '(3 / 1) - 2 = 3 ? S')]), OrderedDict([('S1', '(2 / 1) + 4 = 6  ? W'), ('S2', '(9 x 1) - 9 = 1  ? Z'), ('S3', '(9 x 1) - 7 = 2  ? T'), ('S4', '(10 / 2) - 4 = 3 ? B'), ('S5', '(10 x 1) + 9 = 19  ? Z'), ('S6', '(2 / 2) - 2 = 0 ? S'), ('S7', '(7 / 1) - 2 = 5 ? Q'), ('S8', '(8 x 2) - 4 = 13  ? M'), ('S9', '(3 x 2) - 1 = 6 ? T'), ('S10', '(7 / 1) + 2 = 9  ? Z'), ('S11', '(7 x 2) - 1 = 14 ? X'), ('S12', '(8 / 4) + 4 = 8 ? W'), ('S13', '(9 x 5) - 1 = 44  ? S'), ('S14', '(10 / 2) + 5 = 10 ? G'), ('S15', '(7 x 7) - 1 = 49  ? V'), ('S16', '(3 / 1) + 1 = 4 ? X'), ('S17', '(8 x 3) - 1 = 22 ? W'), ('S18', '(10 / 1) + 3 = 13  ? W'), ('S19', '(7 x 2) - 3 = 12 ? M'), ('S20', '(3 / 1) +7 = 10 ? Z'), ('S21', '(7 x 2) + 3 = 17 ? W')]), OrderedDict([('S1', '(8 / 1) - 6 = 4 ? N'), ('S2', '(6 x 4) + 1 = 25 ? R'), ('S3', '(3 x 4) + 2 = 14  ? Q'), ('S4', '(9 x 4) - 6 = 32  ? W'), ('S5', None), ('S6', '(5 / 1) - 1 = 6 ? G'), ('S7', '(8 / 2) - 4 = 0  ? T'), ('S8', None), ('S9', '(6 / 3) + 8 = 10  ? W'), ('S10', '(9 / 1) + 8 = 18  ? M'), ('S11', '(3 / 1) - 1 = 4  ? S'), ('S12', '(7 / 7) + 9 = 11  ? R'), ('S13', '(10 / 1) + 1 = 11  ? X'), ('S14', '(2 x 4) + 1 = 9 ? Z'), ('S15', None), ('S16', '(7 x 7) + 1 = 48  ? T'), ('S17', '(10 / 2) - 2 = 7 ? S'), ('S18', '(6 x 3) - 2 = 17  ? B'), ('S19', '(2 / 1) - 2 = 0  ? T'), ('S20', '(2 / 2) + 5 = 7  ? R'), ('S21', '(10 x 2) + 3 = 23  ? Q')]), OrderedDict([('S1', '(6 x 7) - 6 = 38 ? T'), ('S2', '(5 / 5) + 1 = 2 ? S'), ('S3', '(7 / 1) + 6 = 12  ? G'), ('S4', '(6 / 3) + 4 = 7  ? G'), ('S5', None), ('S6', '(10 x 2) + 4 = 22 ? T'), ('S7', '(9 x 2) - 1 = 18  ? V'), ('S8', None), ('S9', '(10 x 5) + 1 = 51  ? N'), ('S10', '(10 / 1) - 1 = 11 ? V'), ('S11', '(4 / 2) - 1 = 1 ? M'), ('S12', None), ('S13', None), ('S14', '(6 x 3) - 2 = 17  ? Q'), ('S15', None), ('S16', '(6 / 2) - 3 = 2  ? Z'), ('S17', '(7 x 2) + 3 = 16  ? N'), ('S18', '(3 x 2) - 2 = 5  ? N'), ('S19', None), ('S20', '(6 / 2) + 3 = 7  ? V'), ('S21', '(5 / 1) + 7 = 13 ? N')]), OrderedDict([('S1', None), ('S2', '(7 / 7) + 6 = 7  ? B'), ('S3', '(3 x 1) - 2 = 1 ? V'), ('S4', '(7 x 1) - 6 = 2  ? N'), ('S5', None), ('S6', '(6 x 1) - 6 = 0 ? B'), ('S7', '(3 / 1) + 3 = 6  ? B'), ('S8', None), ('S9', '(7 / 1) + 6 = 12  ? S'), ('S10', '(4 / 1) - 1 = 3  ? R'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 / 2) + 8 = 10  ? N'), ('S17', '(2 x 1) + 7 = 9 ? B'), ('S18', '(5 / 5) + 5 = 6 ? V'), ('S19', None), ('S20', '(8 x 1) + 5 = 13  ? M'), ('S21', '(4 / 2) + 3 = 7  ? B')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(8 / 4) - 2 = 2  ? Z'), ('S4', '(4 x 2) + 2 = 10 ? X'), ('S5', None), ('S6', '(3 x 3) - 2 = 7  ? W'), ('S7', None), ('S8', None), ('S9', '(2 x 1) + 1 = 4 ? V'), ('S10', '(8 / 2) + 4 = 6 ? X'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(9 / 1) + 1 = 10  ? G'), ('S17', '(3 x 3) - 2 = 7  ? R'), ('S18', None), ('S19', None), ('S20', '(8 x 1) + 8 = 16  ? G'), ('S21', '(2 x 3) + 5 = 10 ? X')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(2 / 2) + 2 = 3  ? M'), ('S4', None), ('S5', None), ('S6', '(9 / 1) - 7 = 4 ? R'), ('S7', None), ('S8', None), ('S9', '(8 x 4) + 3 = 33 ? Q'), ('S10', '(9 x 3) + 2 = 29 ? Q'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 x 4) + 1 = 17  ? S'), ('S17', '(5 / 1) + 4 = 9 ? T'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)]), OrderedDict([('S1', None), ('S2', None), ('S3', None), ('S4', None), ('S5', None), ('S6', '(5 / 1) + 3 = 9 ? Q'), ('S7', None), ('S8', None), ('S9', '(3 / 3) + 1 = 2  ? G'), ('S10', None), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', None), ('S17', '(6 / 3) + 2 = 4  ? X'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Condition.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Trial_15" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Ospan_2c"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Trial_15"/>
    <LoopInitiator loopType="TrialHandler" name="Remember_15">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Remember_15" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Remember_2c"/>
    <LoopTerminator name="Remember_15"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Trial_16">
      <Param name="Selected rows" updates="None" val=":5" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('S1', '(10 / 1) - 9 = 3  ? R'), ('S2', '(3 / 1) + 4 = 9 ? M'), ('S3', '(4 x 3) - 6 = 8 ? W'), ('S4', '(5 x 1) + 1 = 6 ? Q'), ('S5', '(4 / 1) - 4 = 0 ? G'), ('S6', '(8 / 1) - 5 = 3 ? V'), ('S7', '(2 x 2) + 1 = 5 ? X'), ('S8', '(4 x 5) - 1 = 21 ? Q'), ('S9', '(5 x 5) + 3 = 28 ? M'), ('S10', '(6 / 2) + 1 = 4  ? S'), ('S11', '(5 x 4) + 1 = 23 ? B'), ('S12', '(2 x 4) + 1 = 9 ? N'), ('S13', '(6 x 1) + 9 = 16 ? Z'), ('S14', '(4 x 2) + 1 = 9 ? V'), ('S15', '(9 / 3) + 1 = 3 ? X'), ('S16', '(5 x 3) + 3 = 18 ? R'), ('S17', '(5 x 2) + 2 = 10 ? Z'), ('S18', '(4 / 1) + 4 = 6 ? G'), ('S19', '(4 x 2) - 2 = 7  ? B'), ('S20', '(10 x 1) + 5 = 15 ? N'), ('S21', '(3 / 1) - 2 = 3 ? S')]), OrderedDict([('S1', '(2 / 1) + 4 = 6  ? W'), ('S2', '(9 x 1) - 9 = 1  ? Z'), ('S3', '(9 x 1) - 7 = 2  ? T'), ('S4', '(10 / 2) - 4 = 3 ? B'), ('S5', '(10 x 1) + 9 = 19  ? Z'), ('S6', '(2 / 2) - 2 = 0 ? S'), ('S7', '(7 / 1) - 2 = 5 ? Q'), ('S8', '(8 x 2) - 4 = 13  ? M'), ('S9', '(3 x 2) - 1 = 6 ? T'), ('S10', '(7 / 1) + 2 = 9  ? Z'), ('S11', '(7 x 2) - 1 = 14 ? X'), ('S12', '(8 / 4) + 4 = 8 ? W'), ('S13', '(9 x 5) - 1 = 44  ? S'), ('S14', '(10 / 2) + 5 = 10 ? G'), ('S15', '(7 x 7) - 1 = 49  ? V'), ('S16', '(3 / 1) + 1 = 4 ? X'), ('S17', '(8 x 3) - 1 = 22 ? W'), ('S18', '(10 / 1) + 3 = 13  ? W'), ('S19', '(7 x 2) - 3 = 12 ? M'), ('S20', '(3 / 1) +7 = 10 ? Z'), ('S21', '(7 x 2) + 3 = 17 ? W')]), OrderedDict([('S1', '(8 / 1) - 6 = 4 ? N'), ('S2', '(6 x 4) + 1 = 25 ? R'), ('S3', '(3 x 4) + 2 = 14  ? Q'), ('S4', '(9 x 4) - 6 = 32  ? W'), ('S5', None), ('S6', '(5 / 1) - 1 = 6 ? G'), ('S7', '(8 / 2) - 4 = 0  ? T'), ('S8', None), ('S9', '(6 / 3) + 8 = 10  ? W'), ('S10', '(9 / 1) + 8 = 18  ? M'), ('S11', '(3 / 1) - 1 = 4  ? S'), ('S12', '(7 / 7) + 9 = 11  ? R'), ('S13', '(10 / 1) + 1 = 11  ? X'), ('S14', '(2 x 4) + 1 = 9 ? Z'), ('S15', None), ('S16', '(7 x 7) + 1 = 48  ? T'), ('S17', '(10 / 2) - 2 = 7 ? S'), ('S18', '(6 x 3) - 2 = 17  ? B'), ('S19', '(2 / 1) - 2 = 0  ? T'), ('S20', '(2 / 2) + 5 = 7  ? R'), ('S21', '(10 x 2) + 3 = 23  ? Q')]), OrderedDict([('S1', '(6 x 7) - 6 = 38 ? T'), ('S2', '(5 / 5) + 1 = 2 ? S'), ('S3', '(7 / 1) + 6 = 12  ? G'), ('S4', '(6 / 3) + 4 = 7  ? G'), ('S5', None), ('S6', '(10 x 2) + 4 = 22 ? T'), ('S7', '(9 x 2) - 1 = 18  ? V'), ('S8', None), ('S9', '(10 x 5) + 1 = 51  ? N'), ('S10', '(10 / 1) - 1 = 11 ? V'), ('S11', '(4 / 2) - 1 = 1 ? M'), ('S12', None), ('S13', None), ('S14', '(6 x 3) - 2 = 17  ? Q'), ('S15', None), ('S16', '(6 / 2) - 3 = 2  ? Z'), ('S17', '(7 x 2) + 3 = 16  ? N'), ('S18', '(3 x 2) - 2 = 5  ? N'), ('S19', None), ('S20', '(6 / 2) + 3 = 7  ? V'), ('S21', '(5 / 1) + 7 = 13 ? N')]), OrderedDict([('S1', None), ('S2', '(7 / 7) + 6 = 7  ? B'), ('S3', '(3 x 1) - 2 = 1 ? V'), ('S4', '(7 x 1) - 6 = 2  ? N'), ('S5', None), ('S6', '(6 x 1) - 6 = 0 ? B'), ('S7', '(3 / 1) + 3 = 6  ? B'), ('S8', None), ('S9', '(7 / 1) + 6 = 12  ? S'), ('S10', '(4 / 1) - 1 = 3  ? R'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 / 2) + 8 = 10  ? N'), ('S17', '(2 x 1) + 7 = 9 ? B'), ('S18', '(5 / 5) + 5 = 6 ? V'), ('S19', None), ('S20', '(8 x 1) + 5 = 13  ? M'), ('S21', '(4 / 2) + 3 = 7  ? B')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(8 / 4) - 2 = 2  ? Z'), ('S4', '(4 x 2) + 2 = 10 ? X'), ('S5', None), ('S6', '(3 x 3) - 2 = 7  ? W'), ('S7', None), ('S8', None), ('S9', '(2 x 1) + 1 = 4 ? V'), ('S10', '(8 / 2) + 4 = 6 ? X'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(9 / 1) + 1 = 10  ? G'), ('S17', '(3 x 3) - 2 = 7  ? R'), ('S18', None), ('S19', None), ('S20', '(8 x 1) + 8 = 16  ? G'), ('S21', '(2 x 3) + 5 = 10 ? X')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(2 / 2) + 2 = 3  ? M'), ('S4', None), ('S5', None), ('S6', '(9 / 1) - 7 = 4 ? R'), ('S7', None), ('S8', None), ('S9', '(8 x 4) + 3 = 33 ? Q'), ('S10', '(9 x 3) + 2 = 29 ? Q'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 x 4) + 1 = 17  ? S'), ('S17', '(5 / 1) + 4 = 9 ? T'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)]), OrderedDict([('S1', None), ('S2', None), ('S3', None), ('S4', None), ('S5', None), ('S6', '(5 / 1) + 3 = 9 ? Q'), ('S7', None), ('S8', None), ('S9', '(3 / 3) + 1 = 2  ? G'), ('S10', None), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', None), ('S17', '(6 / 3) + 2 = 4  ? X'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Condition.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Trial_16" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Ospan_7c"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Trial_16"/>
    <LoopInitiator loopType="TrialHandler" name="Remember_16">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Remember_16" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Remember_7c"/>
    <LoopTerminator name="Remember_16"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Trial_17">
      <Param name="Selected rows" updates="None" val=":4" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('S1', '(10 / 1) - 9 = 3  ? R'), ('S2', '(3 / 1) + 4 = 9 ? M'), ('S3', '(4 x 3) - 6 = 8 ? W'), ('S4', '(5 x 1) + 1 = 6 ? Q'), ('S5', '(4 / 1) - 4 = 0 ? G'), ('S6', '(8 / 1) - 5 = 3 ? V'), ('S7', '(2 x 2) + 1 = 5 ? X'), ('S8', '(4 x 5) - 1 = 21 ? Q'), ('S9', '(5 x 5) + 3 = 28 ? M'), ('S10', '(6 / 2) + 1 = 4  ? S'), ('S11', '(5 x 4) + 1 = 23 ? B'), ('S12', '(2 x 4) + 1 = 9 ? N'), ('S13', '(6 x 1) + 9 = 16 ? Z'), ('S14', '(4 x 2) + 1 = 9 ? V'), ('S15', '(9 / 3) + 1 = 3 ? X'), ('S16', '(5 x 3) + 3 = 18 ? R'), ('S17', '(5 x 2) + 2 = 10 ? Z'), ('S18', '(4 / 1) + 4 = 6 ? G'), ('S19', '(4 x 2) - 2 = 7  ? B'), ('S20', '(10 x 1) + 5 = 15 ? N'), ('S21', '(3 / 1) - 2 = 3 ? S')]), OrderedDict([('S1', '(2 / 1) + 4 = 6  ? W'), ('S2', '(9 x 1) - 9 = 1  ? Z'), ('S3', '(9 x 1) - 7 = 2  ? T'), ('S4', '(10 / 2) - 4 = 3 ? B'), ('S5', '(10 x 1) + 9 = 19  ? Z'), ('S6', '(2 / 2) - 2 = 0 ? S'), ('S7', '(7 / 1) - 2 = 5 ? Q'), ('S8', '(8 x 2) - 4 = 13  ? M'), ('S9', '(3 x 2) - 1 = 6 ? T'), ('S10', '(7 / 1) + 2 = 9  ? Z'), ('S11', '(7 x 2) - 1 = 14 ? X'), ('S12', '(8 / 4) + 4 = 8 ? W'), ('S13', '(9 x 5) - 1 = 44  ? S'), ('S14', '(10 / 2) + 5 = 10 ? G'), ('S15', '(7 x 7) - 1 = 49  ? V'), ('S16', '(3 / 1) + 1 = 4 ? X'), ('S17', '(8 x 3) - 1 = 22 ? W'), ('S18', '(10 / 1) + 3 = 13  ? W'), ('S19', '(7 x 2) - 3 = 12 ? M'), ('S20', '(3 / 1) +7 = 10 ? Z'), ('S21', '(7 x 2) + 3 = 17 ? W')]), OrderedDict([('S1', '(8 / 1) - 6 = 4 ? N'), ('S2', '(6 x 4) + 1 = 25 ? R'), ('S3', '(3 x 4) + 2 = 14  ? Q'), ('S4', '(9 x 4) - 6 = 32  ? W'), ('S5', None), ('S6', '(5 / 1) - 1 = 6 ? G'), ('S7', '(8 / 2) - 4 = 0  ? T'), ('S8', None), ('S9', '(6 / 3) + 8 = 10  ? W'), ('S10', '(9 / 1) + 8 = 18  ? M'), ('S11', '(3 / 1) - 1 = 4  ? S'), ('S12', '(7 / 7) + 9 = 11  ? R'), ('S13', '(10 / 1) + 1 = 11  ? X'), ('S14', '(2 x 4) + 1 = 9 ? Z'), ('S15', None), ('S16', '(7 x 7) + 1 = 48  ? T'), ('S17', '(10 / 2) - 2 = 7 ? S'), ('S18', '(6 x 3) - 2 = 17  ? B'), ('S19', '(2 / 1) - 2 = 0  ? T'), ('S20', '(2 / 2) + 5 = 7  ? R'), ('S21', '(10 x 2) + 3 = 23  ? Q')]), OrderedDict([('S1', '(6 x 7) - 6 = 38 ? T'), ('S2', '(5 / 5) + 1 = 2 ? S'), ('S3', '(7 / 1) + 6 = 12  ? G'), ('S4', '(6 / 3) + 4 = 7  ? G'), ('S5', None), ('S6', '(10 x 2) + 4 = 22 ? T'), ('S7', '(9 x 2) - 1 = 18  ? V'), ('S8', None), ('S9', '(10 x 5) + 1 = 51  ? N'), ('S10', '(10 / 1) - 1 = 11 ? V'), ('S11', '(4 / 2) - 1 = 1 ? M'), ('S12', None), ('S13', None), ('S14', '(6 x 3) - 2 = 17  ? Q'), ('S15', None), ('S16', '(6 / 2) - 3 = 2  ? Z'), ('S17', '(7 x 2) + 3 = 16  ? N'), ('S18', '(3 x 2) - 2 = 5  ? N'), ('S19', None), ('S20', '(6 / 2) + 3 = 7  ? V'), ('S21', '(5 / 1) + 7 = 13 ? N')]), OrderedDict([('S1', None), ('S2', '(7 / 7) + 6 = 7  ? B'), ('S3', '(3 x 1) - 2 = 1 ? V'), ('S4', '(7 x 1) - 6 = 2  ? N'), ('S5', None), ('S6', '(6 x 1) - 6 = 0 ? B'), ('S7', '(3 / 1) + 3 = 6  ? B'), ('S8', None), ('S9', '(7 / 1) + 6 = 12  ? S'), ('S10', '(4 / 1) - 1 = 3  ? R'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 / 2) + 8 = 10  ? N'), ('S17', '(2 x 1) + 7 = 9 ? B'), ('S18', '(5 / 5) + 5 = 6 ? V'), ('S19', None), ('S20', '(8 x 1) + 5 = 13  ? M'), ('S21', '(4 / 2) + 3 = 7  ? B')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(8 / 4) - 2 = 2  ? Z'), ('S4', '(4 x 2) + 2 = 10 ? X'), ('S5', None), ('S6', '(3 x 3) - 2 = 7  ? W'), ('S7', None), ('S8', None), ('S9', '(2 x 1) + 1 = 4 ? V'), ('S10', '(8 / 2) + 4 = 6 ? X'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(9 / 1) + 1 = 10  ? G'), ('S17', '(3 x 3) - 2 = 7  ? R'), ('S18', None), ('S19', None), ('S20', '(8 x 1) + 8 = 16  ? G'), ('S21', '(2 x 3) + 5 = 10 ? X')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(2 / 2) + 2 = 3  ? M'), ('S4', None), ('S5', None), ('S6', '(9 / 1) - 7 = 4 ? R'), ('S7', None), ('S8', None), ('S9', '(8 x 4) + 3 = 33 ? Q'), ('S10', '(9 x 3) + 2 = 29 ? Q'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 x 4) + 1 = 17  ? S'), ('S17', '(5 / 1) + 4 = 9 ? T'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)]), OrderedDict([('S1', None), ('S2', None), ('S3', None), ('S4', None), ('S5', None), ('S6', '(5 / 1) + 3 = 9 ? Q'), ('S7', None), ('S8', None), ('S9', '(3 / 3) + 1 = 2  ? G'), ('S10', None), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', None), ('S17', '(6 / 3) + 2 = 4  ? X'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Condition.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Trial_17" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Ospan_8c"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Trial_17"/>
    <LoopInitiator loopType="TrialHandler" name="Remember_17">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Remember_17" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Remember_8c"/>
    <LoopTerminator name="Remember_17"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Trial_18">
      <Param name="Selected rows" updates="None" val=":6" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('S1', '(10 / 1) - 9 = 3  ? R'), ('S2', '(3 / 1) + 4 = 9 ? M'), ('S3', '(4 x 3) - 6 = 8 ? W'), ('S4', '(5 x 1) + 1 = 6 ? Q'), ('S5', '(4 / 1) - 4 = 0 ? G'), ('S6', '(8 / 1) - 5 = 3 ? V'), ('S7', '(2 x 2) + 1 = 5 ? X'), ('S8', '(4 x 5) - 1 = 21 ? Q'), ('S9', '(5 x 5) + 3 = 28 ? M'), ('S10', '(6 / 2) + 1 = 4  ? S'), ('S11', '(5 x 4) + 1 = 23 ? B'), ('S12', '(2 x 4) + 1 = 9 ? N'), ('S13', '(6 x 1) + 9 = 16 ? Z'), ('S14', '(4 x 2) + 1 = 9 ? V'), ('S15', '(9 / 3) + 1 = 3 ? X'), ('S16', '(5 x 3) + 3 = 18 ? R'), ('S17', '(5 x 2) + 2 = 10 ? Z'), ('S18', '(4 / 1) + 4 = 6 ? G'), ('S19', '(4 x 2) - 2 = 7  ? B'), ('S20', '(10 x 1) + 5 = 15 ? N'), ('S21', '(3 / 1) - 2 = 3 ? S')]), OrderedDict([('S1', '(2 / 1) + 4 = 6  ? W'), ('S2', '(9 x 1) - 9 = 1  ? Z'), ('S3', '(9 x 1) - 7 = 2  ? T'), ('S4', '(10 / 2) - 4 = 3 ? B'), ('S5', '(10 x 1) + 9 = 19  ? Z'), ('S6', '(2 / 2) - 2 = 0 ? S'), ('S7', '(7 / 1) - 2 = 5 ? Q'), ('S8', '(8 x 2) - 4 = 13  ? M'), ('S9', '(3 x 2) - 1 = 6 ? T'), ('S10', '(7 / 1) + 2 = 9  ? Z'), ('S11', '(7 x 2) - 1 = 14 ? X'), ('S12', '(8 / 4) + 4 = 8 ? W'), ('S13', '(9 x 5) - 1 = 44  ? S'), ('S14', '(10 / 2) + 5 = 10 ? G'), ('S15', '(7 x 7) - 1 = 49  ? V'), ('S16', '(3 / 1) + 1 = 4 ? X'), ('S17', '(8 x 3) - 1 = 22 ? W'), ('S18', '(10 / 1) + 3 = 13  ? W'), ('S19', '(7 x 2) - 3 = 12 ? M'), ('S20', '(3 / 1) +7 = 10 ? Z'), ('S21', '(7 x 2) + 3 = 17 ? W')]), OrderedDict([('S1', '(8 / 1) - 6 = 4 ? N'), ('S2', '(6 x 4) + 1 = 25 ? R'), ('S3', '(3 x 4) + 2 = 14  ? Q'), ('S4', '(9 x 4) - 6 = 32  ? W'), ('S5', None), ('S6', '(5 / 1) - 1 = 6 ? G'), ('S7', '(8 / 2) - 4 = 0  ? T'), ('S8', None), ('S9', '(6 / 3) + 8 = 10  ? W'), ('S10', '(9 / 1) + 8 = 18  ? M'), ('S11', '(3 / 1) - 1 = 4  ? S'), ('S12', '(7 / 7) + 9 = 11  ? R'), ('S13', '(10 / 1) + 1 = 11  ? X'), ('S14', '(2 x 4) + 1 = 9 ? Z'), ('S15', None), ('S16', '(7 x 7) + 1 = 48  ? T'), ('S17', '(10 / 2) - 2 = 7 ? S'), ('S18', '(6 x 3) - 2 = 17  ? B'), ('S19', '(2 / 1) - 2 = 0  ? T'), ('S20', '(2 / 2) + 5 = 7  ? R'), ('S21', '(10 x 2) + 3 = 23  ? Q')]), OrderedDict([('S1', '(6 x 7) - 6 = 38 ? T'), ('S2', '(5 / 5) + 1 = 2 ? S'), ('S3', '(7 / 1) + 6 = 12  ? G'), ('S4', '(6 / 3) + 4 = 7  ? G'), ('S5', None), ('S6', '(10 x 2) + 4 = 22 ? T'), ('S7', '(9 x 2) - 1 = 18  ? V'), ('S8', None), ('S9', '(10 x 5) + 1 = 51  ? N'), ('S10', '(10 / 1) - 1 = 11 ? V'), ('S11', '(4 / 2) - 1 = 1 ? M'), ('S12', None), ('S13', None), ('S14', '(6 x 3) - 2 = 17  ? Q'), ('S15', None), ('S16', '(6 / 2) - 3 = 2  ? Z'), ('S17', '(7 x 2) + 3 = 16  ? N'), ('S18', '(3 x 2) - 2 = 5  ? N'), ('S19', None), ('S20', '(6 / 2) + 3 = 7  ? V'), ('S21', '(5 / 1) + 7 = 13 ? N')]), OrderedDict([('S1', None), ('S2', '(7 / 7) + 6 = 7  ? B'), ('S3', '(3 x 1) - 2 = 1 ? V'), ('S4', '(7 x 1) - 6 = 2  ? N'), ('S5', None), ('S6', '(6 x 1) - 6 = 0 ? B'), ('S7', '(3 / 1) + 3 = 6  ? B'), ('S8', None), ('S9', '(7 / 1) + 6 = 12  ? S'), ('S10', '(4 / 1) - 1 = 3  ? R'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 / 2) + 8 = 10  ? N'), ('S17', '(2 x 1) + 7 = 9 ? B'), ('S18', '(5 / 5) + 5 = 6 ? V'), ('S19', None), ('S20', '(8 x 1) + 5 = 13  ? M'), ('S21', '(4 / 2) + 3 = 7  ? B')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(8 / 4) - 2 = 2  ? Z'), ('S4', '(4 x 2) + 2 = 10 ? X'), ('S5', None), ('S6', '(3 x 3) - 2 = 7  ? W'), ('S7', None), ('S8', None), ('S9', '(2 x 1) + 1 = 4 ? V'), ('S10', '(8 / 2) + 4 = 6 ? X'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(9 / 1) + 1 = 10  ? G'), ('S17', '(3 x 3) - 2 = 7  ? R'), ('S18', None), ('S19', None), ('S20', '(8 x 1) + 8 = 16  ? G'), ('S21', '(2 x 3) + 5 = 10 ? X')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(2 / 2) + 2 = 3  ? M'), ('S4', None), ('S5', None), ('S6', '(9 / 1) - 7 = 4 ? R'), ('S7', None), ('S8', None), ('S9', '(8 x 4) + 3 = 33 ? Q'), ('S10', '(9 x 3) + 2 = 29 ? Q'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 x 4) + 1 = 17  ? S'), ('S17', '(5 / 1) + 4 = 9 ? T'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)]), OrderedDict([('S1', None), ('S2', None), ('S3', None), ('S4', None), ('S5', None), ('S6', '(5 / 1) + 3 = 9 ? Q'), ('S7', None), ('S8', None), ('S9', '(3 / 3) + 1 = 2  ? G'), ('S10', None), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', None), ('S17', '(6 / 3) + 2 = 4  ? X'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Condition.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Trial_18" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Ospan_5c"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Trial_18"/>
    <LoopInitiator loopType="TrialHandler" name="Remember_18">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Remember_18" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Remember_5c"/>
    <LoopTerminator name="Remember_18"/>
    <Routine name="Blank100"/>
    <Routine name="Relax"/>
    <Routine name="Blank100"/>
    <Routine name="warning"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Trial_19">
      <Param name="Selected rows" updates="None" val=":6" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('S1', '(10 / 1) - 9 = 3  ? R'), ('S2', '(3 / 1) + 4 = 9 ? M'), ('S3', '(4 x 3) - 6 = 8 ? W'), ('S4', '(5 x 1) + 1 = 6 ? Q'), ('S5', '(4 / 1) - 4 = 0 ? G'), ('S6', '(8 / 1) - 5 = 3 ? V'), ('S7', '(2 x 2) + 1 = 5 ? X'), ('S8', '(4 x 5) - 1 = 21 ? Q'), ('S9', '(5 x 5) + 3 = 28 ? M'), ('S10', '(6 / 2) + 1 = 4  ? S'), ('S11', '(5 x 4) + 1 = 23 ? B'), ('S12', '(2 x 4) + 1 = 9 ? N'), ('S13', '(6 x 1) + 9 = 16 ? Z'), ('S14', '(4 x 2) + 1 = 9 ? V'), ('S15', '(9 / 3) + 1 = 3 ? X'), ('S16', '(5 x 3) + 3 = 18 ? R'), ('S17', '(5 x 2) + 2 = 10 ? Z'), ('S18', '(4 / 1) + 4 = 6 ? G'), ('S19', '(4 x 2) - 2 = 7  ? B'), ('S20', '(10 x 1) + 5 = 15 ? N'), ('S21', '(3 / 1) - 2 = 3 ? S')]), OrderedDict([('S1', '(2 / 1) + 4 = 6  ? W'), ('S2', '(9 x 1) - 9 = 1  ? Z'), ('S3', '(9 x 1) - 7 = 2  ? T'), ('S4', '(10 / 2) - 4 = 3 ? B'), ('S5', '(10 x 1) + 9 = 19  ? Z'), ('S6', '(2 / 2) - 2 = 0 ? S'), ('S7', '(7 / 1) - 2 = 5 ? Q'), ('S8', '(8 x 2) - 4 = 13  ? M'), ('S9', '(3 x 2) - 1 = 6 ? T'), ('S10', '(7 / 1) + 2 = 9  ? Z'), ('S11', '(7 x 2) - 1 = 14 ? X'), ('S12', '(8 / 4) + 4 = 8 ? W'), ('S13', '(9 x 5) - 1 = 44  ? S'), ('S14', '(10 / 2) + 5 = 10 ? G'), ('S15', '(7 x 7) - 1 = 49  ? V'), ('S16', '(3 / 1) + 1 = 4 ? X'), ('S17', '(8 x 3) - 1 = 22 ? W'), ('S18', '(10 / 1) + 3 = 13  ? W'), ('S19', '(7 x 2) - 3 = 12 ? M'), ('S20', '(3 / 1) +7 = 10 ? Z'), ('S21', '(7 x 2) + 3 = 17 ? W')]), OrderedDict([('S1', '(8 / 1) - 6 = 4 ? N'), ('S2', '(6 x 4) + 1 = 25 ? R'), ('S3', '(3 x 4) + 2 = 14  ? Q'), ('S4', '(9 x 4) - 6 = 32  ? W'), ('S5', None), ('S6', '(5 / 1) - 1 = 6 ? G'), ('S7', '(8 / 2) - 4 = 0  ? T'), ('S8', None), ('S9', '(6 / 3) + 8 = 10  ? W'), ('S10', '(9 / 1) + 8 = 18  ? M'), ('S11', '(3 / 1) - 1 = 4  ? S'), ('S12', '(7 / 7) + 9 = 11  ? R'), ('S13', '(10 / 1) + 1 = 11  ? X'), ('S14', '(2 x 4) + 1 = 9 ? Z'), ('S15', None), ('S16', '(7 x 7) + 1 = 48  ? T'), ('S17', '(10 / 2) - 2 = 7 ? S'), ('S18', '(6 x 3) - 2 = 17  ? B'), ('S19', '(2 / 1) - 2 = 0  ? T'), ('S20', '(2 / 2) + 5 = 7  ? R'), ('S21', '(10 x 2) + 3 = 23  ? Q')]), OrderedDict([('S1', '(6 x 7) - 6 = 38 ? T'), ('S2', '(5 / 5) + 1 = 2 ? S'), ('S3', '(7 / 1) + 6 = 12  ? G'), ('S4', '(6 / 3) + 4 = 7  ? G'), ('S5', None), ('S6', '(10 x 2) + 4 = 22 ? T'), ('S7', '(9 x 2) - 1 = 18  ? V'), ('S8', None), ('S9', '(10 x 5) + 1 = 51  ? N'), ('S10', '(10 / 1) - 1 = 11 ? V'), ('S11', '(4 / 2) - 1 = 1 ? M'), ('S12', None), ('S13', None), ('S14', '(6 x 3) - 2 = 17  ? Q'), ('S15', None), ('S16', '(6 / 2) - 3 = 2  ? Z'), ('S17', '(7 x 2) + 3 = 16  ? N'), ('S18', '(3 x 2) - 2 = 5  ? N'), ('S19', None), ('S20', '(6 / 2) + 3 = 7  ? V'), ('S21', '(5 / 1) + 7 = 13 ? N')]), OrderedDict([('S1', None), ('S2', '(7 / 7) + 6 = 7  ? B'), ('S3', '(3 x 1) - 2 = 1 ? V'), ('S4', '(7 x 1) - 6 = 2  ? N'), ('S5', None), ('S6', '(6 x 1) - 6 = 0 ? B'), ('S7', '(3 / 1) + 3 = 6  ? B'), ('S8', None), ('S9', '(7 / 1) + 6 = 12  ? S'), ('S10', '(4 / 1) - 1 = 3  ? R'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 / 2) + 8 = 10  ? N'), ('S17', '(2 x 1) + 7 = 9 ? B'), ('S18', '(5 / 5) + 5 = 6 ? V'), ('S19', None), ('S20', '(8 x 1) + 5 = 13  ? M'), ('S21', '(4 / 2) + 3 = 7  ? B')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(8 / 4) - 2 = 2  ? Z'), ('S4', '(4 x 2) + 2 = 10 ? X'), ('S5', None), ('S6', '(3 x 3) - 2 = 7  ? W'), ('S7', None), ('S8', None), ('S9', '(2 x 1) + 1 = 4 ? V'), ('S10', '(8 / 2) + 4 = 6 ? X'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(9 / 1) + 1 = 10  ? G'), ('S17', '(3 x 3) - 2 = 7  ? R'), ('S18', None), ('S19', None), ('S20', '(8 x 1) + 8 = 16  ? G'), ('S21', '(2 x 3) + 5 = 10 ? X')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(2 / 2) + 2 = 3  ? M'), ('S4', None), ('S5', None), ('S6', '(9 / 1) - 7 = 4 ? R'), ('S7', None), ('S8', None), ('S9', '(8 x 4) + 3 = 33 ? Q'), ('S10', '(9 x 3) + 2 = 29 ? Q'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 x 4) + 1 = 17  ? S'), ('S17', '(5 / 1) + 4 = 9 ? T'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)]), OrderedDict([('S1', None), ('S2', None), ('S3', None), ('S4', None), ('S5', None), ('S6', '(5 / 1) + 3 = 9 ? Q'), ('S7', None), ('S8', None), ('S9', '(3 / 3) + 1 = 2  ? G'), ('S10', None), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', None), ('S17', '(6 / 3) + 2 = 4  ? X'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Condition.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Trial_19" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Ospan_3c"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Trial_19"/>
    <LoopInitiator loopType="TrialHandler" name="Remember_19">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Remember_19" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Remember_3c"/>
    <LoopTerminator name="Remember_19"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Trial_20">
      <Param name="Selected rows" updates="None" val=":4" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('S1', '(10 / 1) - 9 = 3  ? R'), ('S2', '(3 / 1) + 4 = 9 ? M'), ('S3', '(4 x 3) - 6 = 8 ? W'), ('S4', '(5 x 1) + 1 = 6 ? Q'), ('S5', '(4 / 1) - 4 = 0 ? G'), ('S6', '(8 / 1) - 5 = 3 ? V'), ('S7', '(2 x 2) + 1 = 5 ? X'), ('S8', '(4 x 5) - 1 = 21 ? Q'), ('S9', '(5 x 5) + 3 = 28 ? M'), ('S10', '(6 / 2) + 1 = 4  ? S'), ('S11', '(5 x 4) + 1 = 23 ? B'), ('S12', '(2 x 4) + 1 = 9 ? N'), ('S13', '(6 x 1) + 9 = 16 ? Z'), ('S14', '(4 x 2) + 1 = 9 ? V'), ('S15', '(9 / 3) + 1 = 3 ? X'), ('S16', '(5 x 3) + 3 = 18 ? R'), ('S17', '(5 x 2) + 2 = 10 ? Z'), ('S18', '(4 / 1) + 4 = 6 ? G'), ('S19', '(4 x 2) - 2 = 7  ? B'), ('S20', '(10 x 1) + 5 = 15 ? N'), ('S21', '(3 / 1) - 2 = 3 ? S')]), OrderedDict([('S1', '(2 / 1) + 4 = 6  ? W'), ('S2', '(9 x 1) - 9 = 1  ? Z'), ('S3', '(9 x 1) - 7 = 2  ? T'), ('S4', '(10 / 2) - 4 = 3 ? B'), ('S5', '(10 x 1) + 9 = 19  ? Z'), ('S6', '(2 / 2) - 2 = 0 ? S'), ('S7', '(7 / 1) - 2 = 5 ? Q'), ('S8', '(8 x 2) - 4 = 13  ? M'), ('S9', '(3 x 2) - 1 = 6 ? T'), ('S10', '(7 / 1) + 2 = 9  ? Z'), ('S11', '(7 x 2) - 1 = 14 ? X'), ('S12', '(8 / 4) + 4 = 8 ? W'), ('S13', '(9 x 5) - 1 = 44  ? S'), ('S14', '(10 / 2) + 5 = 10 ? G'), ('S15', '(7 x 7) - 1 = 49  ? V'), ('S16', '(3 / 1) + 1 = 4 ? X'), ('S17', '(8 x 3) - 1 = 22 ? W'), ('S18', '(10 / 1) + 3 = 13  ? W'), ('S19', '(7 x 2) - 3 = 12 ? M'), ('S20', '(3 / 1) +7 = 10 ? Z'), ('S21', '(7 x 2) + 3 = 17 ? W')]), OrderedDict([('S1', '(8 / 1) - 6 = 4 ? N'), ('S2', '(6 x 4) + 1 = 25 ? R'), ('S3', '(3 x 4) + 2 = 14  ? Q'), ('S4', '(9 x 4) - 6 = 32  ? W'), ('S5', None), ('S6', '(5 / 1) - 1 = 6 ? G'), ('S7', '(8 / 2) - 4 = 0  ? T'), ('S8', None), ('S9', '(6 / 3) + 8 = 10  ? W'), ('S10', '(9 / 1) + 8 = 18  ? M'), ('S11', '(3 / 1) - 1 = 4  ? S'), ('S12', '(7 / 7) + 9 = 11  ? R'), ('S13', '(10 / 1) + 1 = 11  ? X'), ('S14', '(2 x 4) + 1 = 9 ? Z'), ('S15', None), ('S16', '(7 x 7) + 1 = 48  ? T'), ('S17', '(10 / 2) - 2 = 7 ? S'), ('S18', '(6 x 3) - 2 = 17  ? B'), ('S19', '(2 / 1) - 2 = 0  ? T'), ('S20', '(2 / 2) + 5 = 7  ? R'), ('S21', '(10 x 2) + 3 = 23  ? Q')]), OrderedDict([('S1', '(6 x 7) - 6 = 38 ? T'), ('S2', '(5 / 5) + 1 = 2 ? S'), ('S3', '(7 / 1) + 6 = 12  ? G'), ('S4', '(6 / 3) + 4 = 7  ? G'), ('S5', None), ('S6', '(10 x 2) + 4 = 22 ? T'), ('S7', '(9 x 2) - 1 = 18  ? V'), ('S8', None), ('S9', '(10 x 5) + 1 = 51  ? N'), ('S10', '(10 / 1) - 1 = 11 ? V'), ('S11', '(4 / 2) - 1 = 1 ? M'), ('S12', None), ('S13', None), ('S14', '(6 x 3) - 2 = 17  ? Q'), ('S15', None), ('S16', '(6 / 2) - 3 = 2  ? Z'), ('S17', '(7 x 2) + 3 = 16  ? N'), ('S18', '(3 x 2) - 2 = 5  ? N'), ('S19', None), ('S20', '(6 / 2) + 3 = 7  ? V'), ('S21', '(5 / 1) + 7 = 13 ? N')]), OrderedDict([('S1', None), ('S2', '(7 / 7) + 6 = 7  ? B'), ('S3', '(3 x 1) - 2 = 1 ? V'), ('S4', '(7 x 1) - 6 = 2  ? N'), ('S5', None), ('S6', '(6 x 1) - 6 = 0 ? B'), ('S7', '(3 / 1) + 3 = 6  ? B'), ('S8', None), ('S9', '(7 / 1) + 6 = 12  ? S'), ('S10', '(4 / 1) - 1 = 3  ? R'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 / 2) + 8 = 10  ? N'), ('S17', '(2 x 1) + 7 = 9 ? B'), ('S18', '(5 / 5) + 5 = 6 ? V'), ('S19', None), ('S20', '(8 x 1) + 5 = 13  ? M'), ('S21', '(4 / 2) + 3 = 7  ? B')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(8 / 4) - 2 = 2  ? Z'), ('S4', '(4 x 2) + 2 = 10 ? X'), ('S5', None), ('S6', '(3 x 3) - 2 = 7  ? W'), ('S7', None), ('S8', None), ('S9', '(2 x 1) + 1 = 4 ? V'), ('S10', '(8 / 2) + 4 = 6 ? X'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(9 / 1) + 1 = 10  ? G'), ('S17', '(3 x 3) - 2 = 7  ? R'), ('S18', None), ('S19', None), ('S20', '(8 x 1) + 8 = 16  ? G'), ('S21', '(2 x 3) + 5 = 10 ? X')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(2 / 2) + 2 = 3  ? M'), ('S4', None), ('S5', None), ('S6', '(9 / 1) - 7 = 4 ? R'), ('S7', None), ('S8', None), ('S9', '(8 x 4) + 3 = 33 ? Q'), ('S10', '(9 x 3) + 2 = 29 ? Q'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 x 4) + 1 = 17  ? S'), ('S17', '(5 / 1) + 4 = 9 ? T'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)]), OrderedDict([('S1', None), ('S2', None), ('S3', None), ('S4', None), ('S5', None), ('S6', '(5 / 1) + 3 = 9 ? Q'), ('S7', None), ('S8', None), ('S9', '(3 / 3) + 1 = 2  ? G'), ('S10', None), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', None), ('S17', '(6 / 3) + 2 = 4  ? X'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Condition.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Trial_20" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Ospan_6b"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Trial_20"/>
    <LoopInitiator loopType="TrialHandler" name="Remember_20">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Remember_20" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Remember_6b"/>
    <LoopTerminator name="Remember_20"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Trial_21">
      <Param name="Selected rows" updates="None" val=":5" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('S1', '(10 / 1) - 9 = 3  ? R'), ('S2', '(3 / 1) + 4 = 9 ? M'), ('S3', '(4 x 3) - 6 = 8 ? W'), ('S4', '(5 x 1) + 1 = 6 ? Q'), ('S5', '(4 / 1) - 4 = 0 ? G'), ('S6', '(8 / 1) - 5 = 3 ? V'), ('S7', '(2 x 2) + 1 = 5 ? X'), ('S8', '(4 x 5) - 1 = 21 ? Q'), ('S9', '(5 x 5) + 3 = 28 ? M'), ('S10', '(6 / 2) + 1 = 4  ? S'), ('S11', '(5 x 4) + 1 = 23 ? B'), ('S12', '(2 x 4) + 1 = 9 ? N'), ('S13', '(6 x 1) + 9 = 16 ? Z'), ('S14', '(4 x 2) + 1 = 9 ? V'), ('S15', '(9 / 3) + 1 = 3 ? X'), ('S16', '(5 x 3) + 3 = 18 ? R'), ('S17', '(5 x 2) + 2 = 10 ? Z'), ('S18', '(4 / 1) + 4 = 6 ? G'), ('S19', '(4 x 2) - 2 = 7  ? B'), ('S20', '(10 x 1) + 5 = 15 ? N'), ('S21', '(3 / 1) - 2 = 3 ? S')]), OrderedDict([('S1', '(2 / 1) + 4 = 6  ? W'), ('S2', '(9 x 1) - 9 = 1  ? Z'), ('S3', '(9 x 1) - 7 = 2  ? T'), ('S4', '(10 / 2) - 4 = 3 ? B'), ('S5', '(10 x 1) + 9 = 19  ? Z'), ('S6', '(2 / 2) - 2 = 0 ? S'), ('S7', '(7 / 1) - 2 = 5 ? Q'), ('S8', '(8 x 2) - 4 = 13  ? M'), ('S9', '(3 x 2) - 1 = 6 ? T'), ('S10', '(7 / 1) + 2 = 9  ? Z'), ('S11', '(7 x 2) - 1 = 14 ? X'), ('S12', '(8 / 4) + 4 = 8 ? W'), ('S13', '(9 x 5) - 1 = 44  ? S'), ('S14', '(10 / 2) + 5 = 10 ? G'), ('S15', '(7 x 7) - 1 = 49  ? V'), ('S16', '(3 / 1) + 1 = 4 ? X'), ('S17', '(8 x 3) - 1 = 22 ? W'), ('S18', '(10 / 1) + 3 = 13  ? W'), ('S19', '(7 x 2) - 3 = 12 ? M'), ('S20', '(3 / 1) +7 = 10 ? Z'), ('S21', '(7 x 2) + 3 = 17 ? W')]), OrderedDict([('S1', '(8 / 1) - 6 = 4 ? N'), ('S2', '(6 x 4) + 1 = 25 ? R'), ('S3', '(3 x 4) + 2 = 14  ? Q'), ('S4', '(9 x 4) - 6 = 32  ? W'), ('S5', None), ('S6', '(5 / 1) - 1 = 6 ? G'), ('S7', '(8 / 2) - 4 = 0  ? T'), ('S8', None), ('S9', '(6 / 3) + 8 = 10  ? W'), ('S10', '(9 / 1) + 8 = 18  ? M'), ('S11', '(3 / 1) - 1 = 4  ? S'), ('S12', '(7 / 7) + 9 = 11  ? R'), ('S13', '(10 / 1) + 1 = 11  ? X'), ('S14', '(2 x 4) + 1 = 9 ? Z'), ('S15', None), ('S16', '(7 x 7) + 1 = 48  ? T'), ('S17', '(10 / 2) - 2 = 7 ? S'), ('S18', '(6 x 3) - 2 = 17  ? B'), ('S19', '(2 / 1) - 2 = 0  ? T'), ('S20', '(2 / 2) + 5 = 7  ? R'), ('S21', '(10 x 2) + 3 = 23  ? Q')]), OrderedDict([('S1', '(6 x 7) - 6 = 38 ? T'), ('S2', '(5 / 5) + 1 = 2 ? S'), ('S3', '(7 / 1) + 6 = 12  ? G'), ('S4', '(6 / 3) + 4 = 7  ? G'), ('S5', None), ('S6', '(10 x 2) + 4 = 22 ? T'), ('S7', '(9 x 2) - 1 = 18  ? V'), ('S8', None), ('S9', '(10 x 5) + 1 = 51  ? N'), ('S10', '(10 / 1) - 1 = 11 ? V'), ('S11', '(4 / 2) - 1 = 1 ? M'), ('S12', None), ('S13', None), ('S14', '(6 x 3) - 2 = 17  ? Q'), ('S15', None), ('S16', '(6 / 2) - 3 = 2  ? Z'), ('S17', '(7 x 2) + 3 = 16  ? N'), ('S18', '(3 x 2) - 2 = 5  ? N'), ('S19', None), ('S20', '(6 / 2) + 3 = 7  ? V'), ('S21', '(5 / 1) + 7 = 13 ? N')]), OrderedDict([('S1', None), ('S2', '(7 / 7) + 6 = 7  ? B'), ('S3', '(3 x 1) - 2 = 1 ? V'), ('S4', '(7 x 1) - 6 = 2  ? N'), ('S5', None), ('S6', '(6 x 1) - 6 = 0 ? B'), ('S7', '(3 / 1) + 3 = 6  ? B'), ('S8', None), ('S9', '(7 / 1) + 6 = 12  ? S'), ('S10', '(4 / 1) - 1 = 3  ? R'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 / 2) + 8 = 10  ? N'), ('S17', '(2 x 1) + 7 = 9 ? B'), ('S18', '(5 / 5) + 5 = 6 ? V'), ('S19', None), ('S20', '(8 x 1) + 5 = 13  ? M'), ('S21', '(4 / 2) + 3 = 7  ? B')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(8 / 4) - 2 = 2  ? Z'), ('S4', '(4 x 2) + 2 = 10 ? X'), ('S5', None), ('S6', '(3 x 3) - 2 = 7  ? W'), ('S7', None), ('S8', None), ('S9', '(2 x 1) + 1 = 4 ? V'), ('S10', '(8 / 2) + 4 = 6 ? X'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(9 / 1) + 1 = 10  ? G'), ('S17', '(3 x 3) - 2 = 7  ? R'), ('S18', None), ('S19', None), ('S20', '(8 x 1) + 8 = 16  ? G'), ('S21', '(2 x 3) + 5 = 10 ? X')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(2 / 2) + 2 = 3  ? M'), ('S4', None), ('S5', None), ('S6', '(9 / 1) - 7 = 4 ? R'), ('S7', None), ('S8', None), ('S9', '(8 x 4) + 3 = 33 ? Q'), ('S10', '(9 x 3) + 2 = 29 ? Q'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 x 4) + 1 = 17  ? S'), ('S17', '(5 / 1) + 4 = 9 ? T'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)]), OrderedDict([('S1', None), ('S2', None), ('S3', None), ('S4', None), ('S5', None), ('S6', '(5 / 1) + 3 = 9 ? Q'), ('S7', None), ('S8', None), ('S9', '(3 / 3) + 1 = 2  ? G'), ('S10', None), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', None), ('S17', '(6 / 3) + 2 = 4  ? X'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Condition.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Trial_21" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Ospan_6c"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Trial_21"/>
    <LoopInitiator loopType="TrialHandler" name="Remember_21">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Remember_21" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Remember_6c"/>
    <LoopTerminator name="Remember_21"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Trial_22">
      <Param name="Selected rows" updates="None" val=":3" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('S1', '(10 / 1) - 9 = 3  ? R'), ('S2', '(3 / 1) + 4 = 9 ? M'), ('S3', '(4 x 3) - 6 = 8 ? W'), ('S4', '(5 x 1) + 1 = 6 ? Q'), ('S5', '(4 / 1) - 4 = 0 ? G'), ('S6', '(8 / 1) - 5 = 3 ? V'), ('S7', '(2 x 2) + 1 = 5 ? X'), ('S8', '(4 x 5) - 1 = 21 ? Q'), ('S9', '(5 x 5) + 3 = 28 ? M'), ('S10', '(6 / 2) + 1 = 4  ? S'), ('S11', '(5 x 4) + 1 = 23 ? B'), ('S12', '(2 x 4) + 1 = 9 ? N'), ('S13', '(6 x 1) + 9 = 16 ? Z'), ('S14', '(4 x 2) + 1 = 9 ? V'), ('S15', '(9 / 3) + 1 = 3 ? X'), ('S16', '(5 x 3) + 3 = 18 ? R'), ('S17', '(5 x 2) + 2 = 10 ? Z'), ('S18', '(4 / 1) + 4 = 6 ? G'), ('S19', '(4 x 2) - 2 = 7  ? B'), ('S20', '(10 x 1) + 5 = 15 ? N'), ('S21', '(3 / 1) - 2 = 3 ? S')]), OrderedDict([('S1', '(2 / 1) + 4 = 6  ? W'), ('S2', '(9 x 1) - 9 = 1  ? Z'), ('S3', '(9 x 1) - 7 = 2  ? T'), ('S4', '(10 / 2) - 4 = 3 ? B'), ('S5', '(10 x 1) + 9 = 19  ? Z'), ('S6', '(2 / 2) - 2 = 0 ? S'), ('S7', '(7 / 1) - 2 = 5 ? Q'), ('S8', '(8 x 2) - 4 = 13  ? M'), ('S9', '(3 x 2) - 1 = 6 ? T'), ('S10', '(7 / 1) + 2 = 9  ? Z'), ('S11', '(7 x 2) - 1 = 14 ? X'), ('S12', '(8 / 4) + 4 = 8 ? W'), ('S13', '(9 x 5) - 1 = 44  ? S'), ('S14', '(10 / 2) + 5 = 10 ? G'), ('S15', '(7 x 7) - 1 = 49  ? V'), ('S16', '(3 / 1) + 1 = 4 ? X'), ('S17', '(8 x 3) - 1 = 22 ? W'), ('S18', '(10 / 1) + 3 = 13  ? W'), ('S19', '(7 x 2) - 3 = 12 ? M'), ('S20', '(3 / 1) +7 = 10 ? Z'), ('S21', '(7 x 2) + 3 = 17 ? W')]), OrderedDict([('S1', '(8 / 1) - 6 = 4 ? N'), ('S2', '(6 x 4) + 1 = 25 ? R'), ('S3', '(3 x 4) + 2 = 14  ? Q'), ('S4', '(9 x 4) - 6 = 32  ? W'), ('S5', None), ('S6', '(5 / 1) - 1 = 6 ? G'), ('S7', '(8 / 2) - 4 = 0  ? T'), ('S8', None), ('S9', '(6 / 3) + 8 = 10  ? W'), ('S10', '(9 / 1) + 8 = 18  ? M'), ('S11', '(3 / 1) - 1 = 4  ? S'), ('S12', '(7 / 7) + 9 = 11  ? R'), ('S13', '(10 / 1) + 1 = 11  ? X'), ('S14', '(2 x 4) + 1 = 9 ? Z'), ('S15', None), ('S16', '(7 x 7) + 1 = 48  ? T'), ('S17', '(10 / 2) - 2 = 7 ? S'), ('S18', '(6 x 3) - 2 = 17  ? B'), ('S19', '(2 / 1) - 2 = 0  ? T'), ('S20', '(2 / 2) + 5 = 7  ? R'), ('S21', '(10 x 2) + 3 = 23  ? Q')]), OrderedDict([('S1', '(6 x 7) - 6 = 38 ? T'), ('S2', '(5 / 5) + 1 = 2 ? S'), ('S3', '(7 / 1) + 6 = 12  ? G'), ('S4', '(6 / 3) + 4 = 7  ? G'), ('S5', None), ('S6', '(10 x 2) + 4 = 22 ? T'), ('S7', '(9 x 2) - 1 = 18  ? V'), ('S8', None), ('S9', '(10 x 5) + 1 = 51  ? N'), ('S10', '(10 / 1) - 1 = 11 ? V'), ('S11', '(4 / 2) - 1 = 1 ? M'), ('S12', None), ('S13', None), ('S14', '(6 x 3) - 2 = 17  ? Q'), ('S15', None), ('S16', '(6 / 2) - 3 = 2  ? Z'), ('S17', '(7 x 2) + 3 = 16  ? N'), ('S18', '(3 x 2) - 2 = 5  ? N'), ('S19', None), ('S20', '(6 / 2) + 3 = 7  ? V'), ('S21', '(5 / 1) + 7 = 13 ? N')]), OrderedDict([('S1', None), ('S2', '(7 / 7) + 6 = 7  ? B'), ('S3', '(3 x 1) - 2 = 1 ? V'), ('S4', '(7 x 1) - 6 = 2  ? N'), ('S5', None), ('S6', '(6 x 1) - 6 = 0 ? B'), ('S7', '(3 / 1) + 3 = 6  ? B'), ('S8', None), ('S9', '(7 / 1) + 6 = 12  ? S'), ('S10', '(4 / 1) - 1 = 3  ? R'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 / 2) + 8 = 10  ? N'), ('S17', '(2 x 1) + 7 = 9 ? B'), ('S18', '(5 / 5) + 5 = 6 ? V'), ('S19', None), ('S20', '(8 x 1) + 5 = 13  ? M'), ('S21', '(4 / 2) + 3 = 7  ? B')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(8 / 4) - 2 = 2  ? Z'), ('S4', '(4 x 2) + 2 = 10 ? X'), ('S5', None), ('S6', '(3 x 3) - 2 = 7  ? W'), ('S7', None), ('S8', None), ('S9', '(2 x 1) + 1 = 4 ? V'), ('S10', '(8 / 2) + 4 = 6 ? X'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(9 / 1) + 1 = 10  ? G'), ('S17', '(3 x 3) - 2 = 7  ? R'), ('S18', None), ('S19', None), ('S20', '(8 x 1) + 8 = 16  ? G'), ('S21', '(2 x 3) + 5 = 10 ? X')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(2 / 2) + 2 = 3  ? M'), ('S4', None), ('S5', None), ('S6', '(9 / 1) - 7 = 4 ? R'), ('S7', None), ('S8', None), ('S9', '(8 x 4) + 3 = 33 ? Q'), ('S10', '(9 x 3) + 2 = 29 ? Q'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 x 4) + 1 = 17  ? S'), ('S17', '(5 / 1) + 4 = 9 ? T'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)]), OrderedDict([('S1', None), ('S2', None), ('S3', None), ('S4', None), ('S5', None), ('S6', '(5 / 1) + 3 = 9 ? Q'), ('S7', None), ('S8', None), ('S9', '(3 / 3) + 1 = 2  ? G'), ('S10', None), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', None), ('S17', '(6 / 3) + 2 = 4  ? X'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Condition.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Trial_22" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Ospan_new_1"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Trial_22"/>
    <LoopInitiator loopType="TrialHandler" name="Recall_22">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Recall_22" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Remember_new_1"/>
    <LoopTerminator name="Recall_22"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Trial_23">
      <Param name="Selected rows" updates="None" val=":3" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('S1', '(10 / 1) - 9 = 3  ? R'), ('S2', '(3 / 1) + 4 = 9 ? M'), ('S3', '(4 x 3) - 6 = 8 ? W'), ('S4', '(5 x 1) + 1 = 6 ? Q'), ('S5', '(4 / 1) - 4 = 0 ? G'), ('S6', '(8 / 1) - 5 = 3 ? V'), ('S7', '(2 x 2) + 1 = 5 ? X'), ('S8', '(4 x 5) - 1 = 21 ? Q'), ('S9', '(5 x 5) + 3 = 28 ? M'), ('S10', '(6 / 2) + 1 = 4  ? S'), ('S11', '(5 x 4) + 1 = 23 ? B'), ('S12', '(2 x 4) + 1 = 9 ? N'), ('S13', '(6 x 1) + 9 = 16 ? Z'), ('S14', '(4 x 2) + 1 = 9 ? V'), ('S15', '(9 / 3) + 1 = 3 ? X'), ('S16', '(5 x 3) + 3 = 18 ? R'), ('S17', '(5 x 2) + 2 = 10 ? Z'), ('S18', '(4 / 1) + 4 = 6 ? G'), ('S19', '(4 x 2) - 2 = 7  ? B'), ('S20', '(10 x 1) + 5 = 15 ? N'), ('S21', '(3 / 1) - 2 = 3 ? S')]), OrderedDict([('S1', '(2 / 1) + 4 = 6  ? W'), ('S2', '(9 x 1) - 9 = 1  ? Z'), ('S3', '(9 x 1) - 7 = 2  ? T'), ('S4', '(10 / 2) - 4 = 3 ? B'), ('S5', '(10 x 1) + 9 = 19  ? Z'), ('S6', '(2 / 2) - 2 = 0 ? S'), ('S7', '(7 / 1) - 2 = 5 ? Q'), ('S8', '(8 x 2) - 4 = 13  ? M'), ('S9', '(3 x 2) - 1 = 6 ? T'), ('S10', '(7 / 1) + 2 = 9  ? Z'), ('S11', '(7 x 2) - 1 = 14 ? X'), ('S12', '(8 / 4) + 4 = 8 ? W'), ('S13', '(9 x 5) - 1 = 44  ? S'), ('S14', '(10 / 2) + 5 = 10 ? G'), ('S15', '(7 x 7) - 1 = 49  ? V'), ('S16', '(3 / 1) + 1 = 4 ? X'), ('S17', '(8 x 3) - 1 = 22 ? W'), ('S18', '(10 / 1) + 3 = 13  ? W'), ('S19', '(7 x 2) - 3 = 12 ? M'), ('S20', '(3 / 1) +7 = 10 ? Z'), ('S21', '(7 x 2) + 3 = 17 ? W')]), OrderedDict([('S1', '(8 / 1) - 6 = 4 ? N'), ('S2', '(6 x 4) + 1 = 25 ? R'), ('S3', '(3 x 4) + 2 = 14  ? Q'), ('S4', '(9 x 4) - 6 = 32  ? W'), ('S5', None), ('S6', '(5 / 1) - 1 = 6 ? G'), ('S7', '(8 / 2) - 4 = 0  ? T'), ('S8', None), ('S9', '(6 / 3) + 8 = 10  ? W'), ('S10', '(9 / 1) + 8 = 18  ? M'), ('S11', '(3 / 1) - 1 = 4  ? S'), ('S12', '(7 / 7) + 9 = 11  ? R'), ('S13', '(10 / 1) + 1 = 11  ? X'), ('S14', '(2 x 4) + 1 = 9 ? Z'), ('S15', None), ('S16', '(7 x 7) + 1 = 48  ? T'), ('S17', '(10 / 2) - 2 = 7 ? S'), ('S18', '(6 x 3) - 2 = 17  ? B'), ('S19', '(2 / 1) - 2 = 0  ? T'), ('S20', '(2 / 2) + 5 = 7  ? R'), ('S21', '(10 x 2) + 3 = 23  ? Q')]), OrderedDict([('S1', '(6 x 7) - 6 = 38 ? T'), ('S2', '(5 / 5) + 1 = 2 ? S'), ('S3', '(7 / 1) + 6 = 12  ? G'), ('S4', '(6 / 3) + 4 = 7  ? G'), ('S5', None), ('S6', '(10 x 2) + 4 = 22 ? T'), ('S7', '(9 x 2) - 1 = 18  ? V'), ('S8', None), ('S9', '(10 x 5) + 1 = 51  ? N'), ('S10', '(10 / 1) - 1 = 11 ? V'), ('S11', '(4 / 2) - 1 = 1 ? M'), ('S12', None), ('S13', None), ('S14', '(6 x 3) - 2 = 17  ? Q'), ('S15', None), ('S16', '(6 / 2) - 3 = 2  ? Z'), ('S17', '(7 x 2) + 3 = 16  ? N'), ('S18', '(3 x 2) - 2 = 5  ? N'), ('S19', None), ('S20', '(6 / 2) + 3 = 7  ? V'), ('S21', '(5 / 1) + 7 = 13 ? N')]), OrderedDict([('S1', None), ('S2', '(7 / 7) + 6 = 7  ? B'), ('S3', '(3 x 1) - 2 = 1 ? V'), ('S4', '(7 x 1) - 6 = 2  ? N'), ('S5', None), ('S6', '(6 x 1) - 6 = 0 ? B'), ('S7', '(3 / 1) + 3 = 6  ? B'), ('S8', None), ('S9', '(7 / 1) + 6 = 12  ? S'), ('S10', '(4 / 1) - 1 = 3  ? R'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 / 2) + 8 = 10  ? N'), ('S17', '(2 x 1) + 7 = 9 ? B'), ('S18', '(5 / 5) + 5 = 6 ? V'), ('S19', None), ('S20', '(8 x 1) + 5 = 13  ? M'), ('S21', '(4 / 2) + 3 = 7  ? B')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(8 / 4) - 2 = 2  ? Z'), ('S4', '(4 x 2) + 2 = 10 ? X'), ('S5', None), ('S6', '(3 x 3) - 2 = 7  ? W'), ('S7', None), ('S8', None), ('S9', '(2 x 1) + 1 = 4 ? V'), ('S10', '(8 / 2) + 4 = 6 ? X'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(9 / 1) + 1 = 10  ? G'), ('S17', '(3 x 3) - 2 = 7  ? R'), ('S18', None), ('S19', None), ('S20', '(8 x 1) + 8 = 16  ? G'), ('S21', '(2 x 3) + 5 = 10 ? X')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(2 / 2) + 2 = 3  ? M'), ('S4', None), ('S5', None), ('S6', '(9 / 1) - 7 = 4 ? R'), ('S7', None), ('S8', None), ('S9', '(8 x 4) + 3 = 33 ? Q'), ('S10', '(9 x 3) + 2 = 29 ? Q'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 x 4) + 1 = 17  ? S'), ('S17', '(5 / 1) + 4 = 9 ? T'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)]), OrderedDict([('S1', None), ('S2', None), ('S3', None), ('S4', None), ('S5', None), ('S6', '(5 / 1) + 3 = 9 ? Q'), ('S7', None), ('S8', None), ('S9', '(3 / 3) + 1 = 2  ? G'), ('S10', None), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', None), ('S17', '(6 / 3) + 2 = 4  ? X'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Condition.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Trial_23" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Ospan_new_2"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Trial_23"/>
    <LoopInitiator loopType="TrialHandler" name="Recall_23">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Recall_23" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Remember_new_2"/>
    <LoopTerminator name="Recall_23"/>
    <Routine name="Blank100"/>
    <Routine name="ThankYouScreen"/>
    <LoopInitiator loopType="TrialHandler" name="Trial_24">
      <Param name="Selected rows" updates="None" val=":2" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('S1', '(10 / 1) - 9 = 3  ? R'), ('S2', '(3 / 1) + 4 = 9 ? M'), ('S3', '(4 x 3) - 6 = 8 ? W'), ('S4', '(5 x 1) + 1 = 6 ? Q'), ('S5', '(4 / 1) - 4 = 0 ? G'), ('S6', '(8 / 1) - 5 = 3 ? V'), ('S7', '(2 x 2) + 1 = 5 ? X'), ('S8', '(4 x 5) - 1 = 21 ? Q'), ('S9', '(5 x 5) + 3 = 28 ? M'), ('S10', '(6 / 2) + 1 = 4  ? S'), ('S11', '(5 x 4) + 1 = 23 ? B'), ('S12', '(2 x 4) + 1 = 9 ? N'), ('S13', '(6 x 1) + 9 = 16 ? Z'), ('S14', '(4 x 2) + 1 = 9 ? V'), ('S15', '(9 / 3) + 1 = 3 ? X'), ('S16', '(5 x 3) + 3 = 18 ? R'), ('S17', '(5 x 2) + 2 = 10 ? Z'), ('S18', '(4 / 1) + 4 = 6 ? G'), ('S19', '(4 x 2) - 2 = 7  ? B'), ('S20', '(10 x 1) + 5 = 15 ? N'), ('S21', '(3 / 1) - 2 = 3 ? S')]), OrderedDict([('S1', '(2 / 1) + 4 = 6  ? W'), ('S2', '(9 x 1) - 9 = 1  ? Z'), ('S3', '(9 x 1) - 7 = 2  ? T'), ('S4', '(10 / 2) - 4 = 3 ? B'), ('S5', '(10 x 1) + 9 = 19  ? Z'), ('S6', '(2 / 2) - 2 = 0 ? S'), ('S7', '(7 / 1) - 2 = 5 ? Q'), ('S8', '(8 x 2) - 4 = 13  ? M'), ('S9', '(3 x 2) - 1 = 6 ? T'), ('S10', '(7 / 1) + 2 = 9  ? Z'), ('S11', '(7 x 2) - 1 = 14 ? X'), ('S12', '(8 / 4) + 4 = 8 ? W'), ('S13', '(9 x 5) - 1 = 44  ? S'), ('S14', '(10 / 2) + 5 = 10 ? G'), ('S15', '(7 x 7) - 1 = 49  ? V'), ('S16', '(3 / 1) + 1 = 4 ? X'), ('S17', '(8 x 3) - 1 = 22 ? W'), ('S18', '(10 / 1) + 3 = 13  ? W'), ('S19', '(7 x 2) - 3 = 12 ? M'), ('S20', '(3 / 1) +7 = 10 ? Z'), ('S21', '(7 x 2) + 3 = 17 ? W')]), OrderedDict([('S1', '(8 / 1) - 6 = 4 ? N'), ('S2', '(6 x 4) + 1 = 25 ? R'), ('S3', '(3 x 4) + 2 = 14  ? Q'), ('S4', '(9 x 4) - 6 = 32  ? W'), ('S5', None), ('S6', '(5 / 1) - 1 = 6 ? G'), ('S7', '(8 / 2) - 4 = 0  ? T'), ('S8', None), ('S9', '(6 / 3) + 8 = 10  ? W'), ('S10', '(9 / 1) + 8 = 18  ? M'), ('S11', '(3 / 1) - 1 = 4  ? S'), ('S12', '(7 / 7) + 9 = 11  ? R'), ('S13', '(10 / 1) + 1 = 11  ? X'), ('S14', '(2 x 4) + 1 = 9 ? Z'), ('S15', None), ('S16', '(7 x 7) + 1 = 48  ? T'), ('S17', '(10 / 2) - 2 = 7 ? S'), ('S18', '(6 x 3) - 2 = 17  ? B'), ('S19', '(2 / 1) - 2 = 0  ? T'), ('S20', '(2 / 2) + 5 = 7  ? R'), ('S21', '(10 x 2) + 3 = 23  ? Q')]), OrderedDict([('S1', '(6 x 7) - 6 = 38 ? T'), ('S2', '(5 / 5) + 1 = 2 ? S'), ('S3', '(7 / 1) + 6 = 12  ? G'), ('S4', '(6 / 3) + 4 = 7  ? G'), ('S5', None), ('S6', '(10 x 2) + 4 = 22 ? T'), ('S7', '(9 x 2) - 1 = 18  ? V'), ('S8', None), ('S9', '(10 x 5) + 1 = 51  ? N'), ('S10', '(10 / 1) - 1 = 11 ? V'), ('S11', '(4 / 2) - 1 = 1 ? M'), ('S12', None), ('S13', None), ('S14', '(6 x 3) - 2 = 17  ? Q'), ('S15', None), ('S16', '(6 / 2) - 3 = 2  ? Z'), ('S17', '(7 x 2) + 3 = 16  ? N'), ('S18', '(3 x 2) - 2 = 5  ? N'), ('S19', None), ('S20', '(6 / 2) + 3 = 7  ? V'), ('S21', '(5 / 1) + 7 = 13 ? N')]), OrderedDict([('S1', None), ('S2', '(7 / 7) + 6 = 7  ? B'), ('S3', '(3 x 1) - 2 = 1 ? V'), ('S4', '(7 x 1) - 6 = 2  ? N'), ('S5', None), ('S6', '(6 x 1) - 6 = 0 ? B'), ('S7', '(3 / 1) + 3 = 6  ? B'), ('S8', None), ('S9', '(7 / 1) + 6 = 12  ? S'), ('S10', '(4 / 1) - 1 = 3  ? R'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 / 2) + 8 = 10  ? N'), ('S17', '(2 x 1) + 7 = 9 ? B'), ('S18', '(5 / 5) + 5 = 6 ? V'), ('S19', None), ('S20', '(8 x 1) + 5 = 13  ? M'), ('S21', '(4 / 2) + 3 = 7  ? B')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(8 / 4) - 2 = 2  ? Z'), ('S4', '(4 x 2) + 2 = 10 ? X'), ('S5', None), ('S6', '(3 x 3) - 2 = 7  ? W'), ('S7', None), ('S8', None), ('S9', '(2 x 1) + 1 = 4 ? V'), ('S10', '(8 / 2) + 4 = 6 ? X'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(9 / 1) + 1 = 10  ? G'), ('S17', '(3 x 3) - 2 = 7  ? R'), ('S18', None), ('S19', None), ('S20', '(8 x 1) + 8 = 16  ? G'), ('S21', '(2 x 3) + 5 = 10 ? X')]), OrderedDict([('S1', None), ('S2', None), ('S3', '(2 / 2) + 2 = 3  ? M'), ('S4', None), ('S5', None), ('S6', '(9 / 1) - 7 = 4 ? R'), ('S7', None), ('S8', None), ('S9', '(8 x 4) + 3 = 33 ? Q'), ('S10', '(9 x 3) + 2 = 29 ? Q'), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', '(4 x 4) + 1 = 17  ? S'), ('S17', '(5 / 1) + 4 = 9 ? T'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)]), OrderedDict([('S1', None), ('S2', None), ('S3', None), ('S4', None), ('S5', None), ('S6', '(5 / 1) + 3 = 9 ? Q'), ('S7', None), ('S8', None), ('S9', '(3 / 3) + 1 = 2  ? G'), ('S10', None), ('S11', None), ('S12', None), ('S13', None), ('S14', None), ('S15', None), ('S16', None), ('S17', '(6 / 3) + 2 = 4  ? X'), ('S18', None), ('S19', None), ('S20', None), ('S21', None)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Condition.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Trial_24" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Ospan_new_3"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Trial_24"/>
    <LoopInitiator loopType="TrialHandler" name="Recall_24">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Recall_24" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Remember_new_3"/>
    <LoopTerminator name="Recall_24"/>
    <Routine name="Blank100"/>
    <LoopTerminator name="Experiment"/>
    <Routine name="Thank_2"/>
  </Flow>
</PsychoPy2experiment>
